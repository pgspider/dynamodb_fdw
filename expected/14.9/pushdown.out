\set ECHO none
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS dynamodb_fdw;
--Testcase 2:
CREATE SERVER dynamodb_server FOREIGN DATA WRAPPER dynamodb_fdw
  OPTIONS (endpoint :DYNAMODB_ENDPOINT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER dynamodb_server 
  OPTIONS (user :DYNAMODB_USER, password :DYNAMODB_PASSWORD);
-- TEST FOR AGGREGATE
--Testcase 4:
CREATE FOREIGN TABLE agg_tbl (
    id int, score float, 
    numbers float[], 
    name text, 
    color int[], 
    active boolean, 
    active_lock_reason text, 
    created_at timestamp, 
    events text[], 
    description text, 
    teams jsonb) 
SERVER dynamodb_server OPTIONS (table_name 'agg_tbl', partition_key 'id');
-- test simple aggregate
--Testcase 5:
EXPLAIN VERBOSE
SELECT var_pop(1.0::float8), var_samp(2.0::float8) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=229.46..229.47 rows=1 width=16)
   Output: var_pop('1'::double precision), var_samp('2'::double precision)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 6:
SELECT var_pop(1.0::float8), var_samp(2.0::float8) FROM agg_tbl;
 var_pop | var_samp 
---------+----------
       0 |        0
(1 row)

--Testcase 7:
EXPLAIN VERBOSE
SELECT stddev_pop('nan'::float8), stddev_samp('nan'::float8) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=220.93..220.94 rows=1 width=16)
   Output: stddev_pop('NaN'::double precision), stddev_samp('NaN'::double precision)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 8:
SELECT stddev_pop('nan'::float8), stddev_samp('nan'::float8) FROM agg_tbl;
 stddev_pop | stddev_samp 
------------+-------------
        NaN |         NaN
(1 row)

--Testcase 9:
EXPLAIN VERBOSE
SELECT var_pop(1.0::float4), var_samp(2.0::float4) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=229.46..229.47 rows=1 width=16)
   Output: var_pop('1'::real), var_samp('2'::real)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 10:
SELECT var_pop(1.0::float4), var_samp(2.0::float4) FROM agg_tbl;
 var_pop | var_samp 
---------+----------
       0 |        0
(1 row)

--Testcase 11:
EXPLAIN VERBOSE
SELECT var_pop('nan'::numeric), var_samp('nan'::numeric) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=220.93..220.94 rows=1 width=64)
   Output: var_pop('NaN'::numeric), var_samp('NaN'::numeric)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 12:
SELECT var_pop('nan'::numeric), var_samp('nan'::numeric) FROM agg_tbl;
 var_pop | var_samp 
---------+----------
     NaN |      NaN
(1 row)

--Testcase 13:
EXPLAIN VERBOSE
SELECT stddev_pop('nan'::numeric), stddev_samp('nan'::numeric) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=220.93..220.94 rows=1 width=64)
   Output: stddev_pop('NaN'::numeric), stddev_samp('NaN'::numeric)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 14:
SELECT stddev_pop('nan'::numeric), stddev_samp('nan'::numeric) FROM agg_tbl;
 stddev_pop | stddev_samp 
------------+-------------
        NaN |         NaN
(1 row)

--Testcase 15:
EXPLAIN VERBOSE SELECT count(*) FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=220.92..220.93 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..212.39 rows=3413 width=0)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT * FROM agg_tbl
(5 rows)

--Testcase 16:
SELECT count(*) FROM agg_tbl;
 count 
-------
     9
(1 row)

--Testcase 17:
EXPLAIN VERBOSE
SELECT count(id) AS cnt FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=205.06..205.07 rows=1 width=8)
   Output: count(id)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..197.75 rows=2925 width=4)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id FROM agg_tbl
(5 rows)

--Testcase 18:
SELECT count(id) AS cnt FROM agg_tbl;
 cnt 
-----
   9
(1 row)

--Testcase 19:
EXPLAIN VERBOSE SELECT count(DISTINCT id) AS cnt FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=205.06..205.07 rows=1 width=8)
   Output: count(DISTINCT id)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..197.75 rows=2925 width=4)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id FROM agg_tbl
(5 rows)

--Testcase 20:
SELECT count(DISTINCT id) AS cnt FROM agg_tbl;
 cnt 
-----
   9
(1 row)

--Testcase 21:
EXPLAIN VERBOSE
SELECT  BIT_AND(color[0]) AS "1", BIT_AND(color[1]) AS "1", BIT_OR(color[0]) AS "?", BIT_OR(color[1]) AS "7" FROM agg_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=168.48..168.49 rows=1 width=16)
   Output: bit_and(color[0]), bit_and(color[1]), bit_or(color[0]), bit_or(color[1])
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..153.86 rows=1462 width=32)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT color FROM agg_tbl
(5 rows)

--Testcase 22:
SELECT  BIT_AND(color[0]) AS "1", BIT_AND(color[1]) AS "1", BIT_OR(color[0]) AS "?", BIT_OR(color[1]) AS "7" FROM agg_tbl;
 1 | 1 | ? | 7  
---+---+---+----
   | 0 |   | 63
(1 row)

--Testcase 23:
EXPLAIN VERBOSE
SELECT BOOL_AND(id > 0), BOOL_AND(NOT id <= 0), BOOL_OR(id = 0), BOOL_OR(NOT id != 0), EVERY(id >= 0), EVERY(NOT id <> 0) FROM agg_tbl;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=256.25..256.26 rows=1 width=6)
   Output: bool_and((id > 0)), bool_and((id > 0)), bool_or((id = 0)), bool_or((id = 0)), every((id >= 0)), every((id = 0))
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..197.75 rows=2925 width=4)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id FROM agg_tbl
(5 rows)

--Testcase 24:
SELECT BOOL_AND(id > 0), BOOL_AND(NOT id <= 0), BOOL_OR(id = 0), BOOL_OR(NOT id != 0), EVERY(id >= 0), EVERY(NOT id <> 0) FROM agg_tbl;
 bool_and | bool_and | bool_or | bool_or | every | every 
----------+----------+---------+---------+-------+-------
 t        | t        | f       | f       | t     | f
(1 row)

-- test aggregate and where
--Testcase 25:
EXPLAIN VERBOSE
SELECT max(id), sum(score), avg(score) FROM agg_tbl WHERE id > 0;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=159.29..159.30 rows=1 width=20)
   Output: max(id), sum(score), avg(score)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..153.60 rows=758 width=12)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id, score FROM agg_tbl WHERE (id > 0)
(5 rows)

--Testcase 26:
SELECT max(id), sum(score), avg(score) FROM agg_tbl WHERE id > 0;
 max  |        sum         |        avg         
------+--------------------+--------------------
 3887 | 2534.8199999999997 | 281.64666666666665
(1 row)

--Testcase 27:
EXPLAIN VERBOSE
SELECT distinct max(id) FROM agg_tbl WHERE id <> 0;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=212.06..212.06 rows=1 width=4)
   Output: (max(id))
   ->  Sort  (cost=212.06..212.06 rows=1 width=4)
         Output: (max(id))
         Sort Key: (max(agg_tbl.id))
         ->  Aggregate  (cost=212.04..212.05 rows=1 width=4)
               Output: max(id)
               ->  Foreign Scan on public.agg_tbl  (cost=100.00..204.76 rows=2910 width=4)
                     Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
                     Remote SQL: SELECT id FROM agg_tbl WHERE (id <> 0)
(10 rows)

--Testcase 28:
SELECT distinct max(id) FROM agg_tbl WHERE id <> 0;
 max  
------
 3887
(1 row)

--Testcase 29:
EXPLAIN VERBOSE
SELECT distinct min(score), max(score) FROM agg_tbl WHERE id != 0;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=205.69..205.70 rows=1 width=16)
   Output: (min(score)), (max(score))
   ->  Sort  (cost=205.69..205.70 rows=1 width=16)
         Output: (min(score)), (max(score))
         Sort Key: (min(agg_tbl.score)), (max(agg_tbl.score))
         ->  Aggregate  (cost=205.68..205.69 rows=1 width=16)
               Output: min(score), max(score)
               ->  Foreign Scan on public.agg_tbl  (cost=100.00..192.94 rows=2547 width=8)
                     Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
                     Remote SQL: SELECT score FROM agg_tbl WHERE (id <> 0)
(10 rows)

--Testcase 30:
SELECT distinct min(score), max(score) FROM agg_tbl WHERE id != 0;
  min   |  max  
--------+-------
 -5.636 | 920.1
(1 row)

--Testcase 31:
EXPLAIN VERBOSE
SELECT min(id) FROM agg_tbl WHERE id >= 0;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=168.50..168.51 rows=1 width=4)
   Output: min(id)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..166.06 rows=975 width=4)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id FROM agg_tbl WHERE (id >= 0)
(5 rows)

--Testcase 32:
SELECT min(id) FROM agg_tbl WHERE id >= 0;
 min 
-----
 212
(1 row)

--Testcase 33:
EXPLAIN VERBOSE
SELECT array_agg(name || ':' || description), array_agg(events) FROM agg_tbl WHERE score <> 0.0;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=138.90..138.91 rows=1 width=64)
   Output: array_agg(((name || ':'::text) || description)), array_agg(events)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..132.11 rows=679 width=96)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT name, events, description FROM agg_tbl WHERE (score <> 0)
(5 rows)

--Testcase 34:
SELECT array_agg(name || ':' || description), array_agg(events) FROM agg_tbl WHERE score <> 0.0;
                                                                                                                                                                                       array_agg                                                                                                                                                                                        |                                                                                                                                                      array_agg                                                                                                                                                      

 {"good first issue:Good for newcomers","bug:Something isn't working","enhancement:New feature or request","help wanted:Extra attention is needed","wontfix:This will not be worked on","invalid:This doesn't seem right","question:Further information is requested","duplicate:This issue or pull request already exists","documentation:Improvements or additions to documentation"} | {{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch},{create,delete,push,update,watch}}
(1 row)

--Testcase 35:
EXPLAIN VERBOSE
SELECT max(name || description), min (name || description), avg(score) FROM agg_tbl WHERE color[0] IN (21, 210, 121, 211);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=140.01..140.02 rows=1 width=72)
   Output: max((name || description)), min((name || description)), avg(score)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..139.80 rows=17 width=72)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Filter: (agg_tbl.color[0] = ANY ('{21,210,121,211}'::integer[]))
         Remote SQL: SELECT score, name, color, description FROM agg_tbl
(6 rows)

--Testcase 36:
SELECT max(name || description), min (name || description), avg(score) FROM agg_tbl WHERE color[0] IN (21, 210, 121, 211);
 max | min | avg 
-----+-----+-----
     |     |    
(1 row)

--Testcase 37:
EXPLAIN VERBOSE
SELECT sum(id)/sum(score), max(name), min(description) FROM agg_tbl WHERE id BETWEEN 0 AND 55666;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=122.41..122.42 rows=1 width=72)
   Output: ((sum(id))::double precision / sum(score)), max(name), min(description)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..122.37 rows=4 width=76)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id, score, name, description FROM agg_tbl WHERE (id >= 0) AND (id <= 55666)
(5 rows)

--Testcase 38:
SELECT sum(id)/sum(score), max(name), min(description) FROM agg_tbl WHERE id BETWEEN 0 AND 55666;
     ?column?      |   max   |            min            
-------------------+---------+---------------------------
 7.082554185307044 | wontfix | Extra attention is needed
(1 row)

--Testcase 39:
EXPLAIN VERBOSE
SELECT stddev_pop(score), stddev_samp(score), stddev(score) FROM agg_tbl WHERE id IN (3887, 2891, 2747);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=146.06..146.07 rows=1 width=24)
   Output: stddev_pop(score), stddev_samp(score), stddev(score)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..145.96 rows=38 width=8)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT score FROM agg_tbl WHERE id IN (3887, 2891, 2747)
(5 rows)

--Testcase 40:
SELECT stddev_pop(score), stddev_samp(score), stddev(score) FROM agg_tbl WHERE id IN (3887, 2891, 2747);
     stddev_pop     |    stddev_samp    |      stddev       
--------------------+-------------------+-------------------
 28.077739525981947 | 34.38806748471529 | 34.38806748471529
(1 row)

--Testcase 41:
EXPLAIN VERBOSE
SELECT count(DISTINCT id), max(description), min(name) FROM agg_tbl WHERE id <= 586878;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=129.29..129.30 rows=1 width=72)
   Output: count(DISTINCT id), max(description), min(name)
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..127.06 rows=297 width=68)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Remote SQL: SELECT id, name, description FROM agg_tbl WHERE (id <= 586878)
(5 rows)

--Testcase 42:
SELECT count(DISTINCT id), max(description), min(name) FROM agg_tbl WHERE id <= 586878;
 count |            max             | min 
-------+----------------------------+-----
     9 | This will not be worked on | bug
(1 row)

--Testcase 43:
EXPLAIN VERBOSE
SELECT avg(score), sum(color[0] + color[1] + color[2]), stddev(color[0] + color[1] + color[2]) FROM agg_tbl WHERE color[0] IN (21, 210, 121, 211) AND id > 0;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=141.56..141.57 rows=1 width=48)
   Output: avg(score), sum(((color[0] + color[1]) + color[2])), stddev(((color[0] + color[1]) + color[2]))
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..141.40 rows=9 width=40)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Filter: (agg_tbl.color[0] = ANY ('{21,210,121,211}'::integer[]))
         Remote SQL: SELECT score, color FROM agg_tbl WHERE (id > 0)
(6 rows)

--Testcase 44:
SELECT avg(score), sum(color[0] + color[1] + color[2]), stddev(color[0] + color[1] + color[2]) FROM agg_tbl WHERE color[0] IN (21, 210, 121, 211) AND id > 0;
 avg | sum | stddev 
-----+-----+--------
     |     |       
(1 row)

--Testcase 45:
EXPLAIN VERBOSE
SELECT id, name, avg(color[0] + color[1] + color[2]) FROM agg_tbl WHERE score BETWEEN -212.23 AND 3313.4 GROUP BY id, name, events HAVING events[0] = 'create' ORDER BY id, name;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=125.56..125.59 rows=1 width=100)
   Output: id, name, avg(((color[0] + color[1]) + color[2])), events
   Group Key: agg_tbl.id, agg_tbl.name, agg_tbl.events
   ->  Sort  (cost=125.56..125.56 rows=1 width=100)
         Output: id, name, events, color
         Sort Key: agg_tbl.id, agg_tbl.name, agg_tbl.events
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..125.55 rows=1 width=100)
               Output: id, name, events, color
               Filter: (agg_tbl.events[0] = 'create'::text)
               Remote SQL: SELECT id, name, color, events FROM agg_tbl WHERE (score >= -212.23) AND (score <= 3313.4)
(10 rows)

--Testcase 46:
SELECT id, name, avg(color[0] + color[1] + color[2]) FROM agg_tbl WHERE score BETWEEN -212.23 AND 3313.4 GROUP BY id, name, events HAVING events[0] = 'create' ORDER BY id, name;
 id | name | avg 
----+------+-----
(0 rows)

--Testcase 47:
EXPLAIN VERBOSE
SELECT max(numbers[0]) + 22, min(numbers[1])/score FROM agg_tbl WHERE score NOT IN (0, 0.0, 0.21) GROUP BY score, id HAVING min(id) > 0 ORDER BY id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=169.97..170.13 rows=67 width=28)
   Output: ((max(numbers[0]) + '22'::double precision)), ((min(numbers[1]) / score)), id, score
   Sort Key: agg_tbl.id
   ->  HashAggregate  (cost=165.10..167.94 rows=67 width=28)
         Output: (max(numbers[0]) + '22'::double precision), (min(numbers[1]) / score), id, score
         Group Key: agg_tbl.id, agg_tbl.score
         Filter: (min(agg_tbl.id) > 0)
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..150.28 rows=1186 width=44)
               Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
               Remote SQL: SELECT id, score, numbers FROM agg_tbl WHERE score NOT IN (0, 0, 0.21)
(10 rows)

--Testcase 48:
SELECT max(numbers[0]) + 22, min(numbers[1])/score FROM agg_tbl WHERE score NOT IN (0, 0.0, 0.21) GROUP BY score, id HAVING min(id) > 0 ORDER BY id;
 ?column? |        ?column?        
----------+------------------------
          | -0.0032301316431009265
          |   -0.03839188699746469
          |   0.004542078348179695
          |  -0.002304097380719487
          |      0.376153300212917
          |  -0.046902654867256637
          |  -0.046117032847509246
          |    0.22198952879581152
          |    0.06886126973463218
(9 rows)

--Testcase 49:
EXPLAIN VERBOSE
SELECT id, count(*), sum(score) FROM agg_tbl WHERE id > 0 GROUP BY id, name HAVING name IN ('invalid', 'question') ORDER BY id ASC, name DESC;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=128.18..128.27 rows=4 width=52)
   Output: id, count(*), sum(score), name
   Group Key: agg_tbl.id, agg_tbl.name
   ->  Sort  (cost=128.18..128.19 rows=4 width=44)
         Output: id, name, score
         Sort Key: agg_tbl.id, agg_tbl.name DESC
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..128.14 rows=4 width=44)
               Output: id, name, score
               Remote SQL: SELECT id, score, name FROM agg_tbl WHERE (id > 0) AND name IN ('invalid', 'question')
(9 rows)

--Testcase 50:
SELECT id, count(*), sum(score) FROM agg_tbl WHERE id > 0 GROUP BY id, name HAVING name IN ('invalid', 'question') ORDER BY id ASC, name DESC;
  id  | count |   sum   
------+-------+---------
  274 |     1 | 748.556
 2891 |     1 |   45.97
(2 rows)

--Testcase 51:
EXPLAIN VERBOSE
SELECT id, count(score), sum(DISTINCT score) FROM agg_tbl WHERE description IS NOT NULL GROUP BY id, active HAVING active = true ORDER BY id, active;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=231.81..249.57 rows=400 width=21)
   Output: id, count(score), sum(DISTINCT score), active
   Group Key: agg_tbl.id, agg_tbl.active
   ->  Sort  (cost=231.81..234.56 rows=1101 width=13)
         Output: id, active, score
         Sort Key: agg_tbl.id, agg_tbl.active
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..176.18 rows=1101 width=13)
               Output: id, active, score
               Filter: agg_tbl.active
               Remote SQL: SELECT id, score, active FROM agg_tbl WHERE (description IS NOT NULL)
(10 rows)

--Testcase 52:
SELECT id, count(score), sum(DISTINCT score) FROM agg_tbl WHERE description IS NOT NULL GROUP BY id, active HAVING active = true ORDER BY id, active;
  id  | count |   sum   
------+-------+---------
  212 |     1 |  656.32
  273 |     1 |   55.22
  274 |     1 | 748.556
  895 |     1 |   920.1
 2891 |     1 |   45.97
 3887 |     1 |   59.54
(6 rows)

--Testcase 53:
EXPLAIN VERBOSE
SELECT string_agg(name, ':' ORDER BY name), string_agg(description, ',' ORDER BY description) FROM agg_tbl WHERE name IS NOT NULL GROUP BY name HAVING max(id) >= 0 ORDER BY name;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=179.99..194.57 rows=67 width=96)
   Output: string_agg(name, ':'::text ORDER BY name), string_agg(description, ','::text ORDER BY description), name
   Group Key: agg_tbl.name
   Filter: (max(agg_tbl.id) >= 0)
   ->  Sort  (cost=179.99..182.21 rows=886 width=68)
         Output: name, description, id
         Sort Key: agg_tbl.name
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..136.62 rows=886 width=68)
               Output: name, description, id
               Remote SQL: SELECT id, name, description FROM agg_tbl WHERE (name IS NOT NULL)
(10 rows)

--Testcase 54:
SELECT string_agg(name, ':' ORDER BY name), string_agg(description, ',' ORDER BY description) FROM agg_tbl WHERE name IS NOT NULL GROUP BY name HAVING max(id) >= 0 ORDER BY name;
    string_agg    |                 string_agg                 
------------------+--------------------------------------------
 bug              | Something isn't working
 documentation    | Improvements or additions to documentation
 duplicate        | This issue or pull request already exists
 enhancement      | New feature or request
 good first issue | Good for newcomers
 help wanted      | Extra attention is needed
 invalid          | This doesn't seem right
 question         | Further information is requested
 wontfix          | This will not be worked on
(9 rows)

--Testcase 55:
EXPLAIN VERBOSE
SELECT json_agg((name, '!@!*')), jsonb_agg((name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23') FROM agg_tbl WHERE description IS NOT NULL GROUP BY description HAVING min(id) <> 0 ORDER BY description;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=179.99..200.00 rows=199 width=160)
   Output: json_agg(ROW(name, '!@!*')), jsonb_agg(ROW(name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23'), description
   Group Key: agg_tbl.description
   Filter: (min(agg_tbl.id) <> 0)
   ->  Sort  (cost=179.99..182.21 rows=886 width=68)
         Output: description, name, id
         Sort Key: agg_tbl.description
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..136.62 rows=886 width=68)
               Output: description, name, id
               Remote SQL: SELECT id, name, description FROM agg_tbl WHERE (description IS NOT NULL)
(10 rows)

--Testcase 56:
SELECT json_agg((name, '!@!*')), jsonb_agg((name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23') FROM agg_tbl WHERE description IS NOT NULL GROUP BY description HAVING min(id) <> 0 ORDER BY description;
                json_agg                 |                 jsonb_agg                  | json_object_agg  | jsonb_object_agg 
-----------------------------------------+--------------------------------------------+------------------+------------------
 [{"f1":"help wanted","f2":"!@!*"}]      | [{"f1": "help wanted", "f2": "varr"}]      | { "3887" : "x" } | {"3887": "23"}
 [{"f1":"question","f2":"!@!*"}]         | [{"f1": "question", "f2": "varr"}]         | { "274" : "x" }  | {"274": "23"}
 [{"f1":"good first issue","f2":"!@!*"}] | [{"f1": "good first issue", "f2": "varr"}] | { "2889" : "x" } | {"2889": "23"}
 [{"f1":"documentation","f2":"!@!*"}]    | [{"f1": "documentation", "f2": "varr"}]    | { "2747" : "x" } | {"2747": "23"}
 [{"f1":"enhancement","f2":"!@!*"}]      | [{"f1": "enhancement", "f2": "varr"}]      | { "3885" : "x" } | {"3885": "23"}
 [{"f1":"bug","f2":"!@!*"}]              | [{"f1": "bug", "f2": "varr"}]              | { "212" : "x" }  | {"212": "23"}
 [{"f1":"invalid","f2":"!@!*"}]          | [{"f1": "invalid", "f2": "varr"}]          | { "2891" : "x" } | {"2891": "23"}
 [{"f1":"duplicate","f2":"!@!*"}]        | [{"f1": "duplicate", "f2": "varr"}]        | { "273" : "x" }  | {"273": "23"}
 [{"f1":"wontfix","f2":"!@!*"}]          | [{"f1": "wontfix", "f2": "varr"}]          | { "895" : "x" }  | {"895": "23"}
(9 rows)

--Testcase 57:
EXPLAIN VERBOSE
SELECT count(name), max(description), min(created_at) FROM agg_tbl WHERE active_lock_reason IS NULL GROUP BY name HAVING name != '#!@ADSF' ORDER BY name ASC;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=120.78..120.87 rows=4 width=80)
   Output: count(name), max(description), min(created_at), name
   Group Key: agg_tbl.name
   ->  Sort  (cost=120.78..120.79 rows=4 width=72)
         Output: name, description, created_at
         Sort Key: agg_tbl.name
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..120.74 rows=4 width=72)
               Output: name, description, created_at
               Remote SQL: SELECT name, created_at, description FROM agg_tbl WHERE (active_lock_reason IS NULL) AND (name <> '#!@ADSF')
(9 rows)

--Testcase 58:
SELECT count(name), max(description), min(created_at) FROM agg_tbl WHERE active_lock_reason IS NULL GROUP BY name HAVING name != '#!@ADSF' ORDER BY name ASC;
 count |                    max                     |           min            
-------+--------------------------------------------+--------------------------
     1 | Something isn't working                    | Sun Jan 29 08:11:05 2012
     1 | Improvements or additions to documentation | Fri Jan 29 08:11:05 2021
     1 | This issue or pull request already exists  | Sat Jan 29 08:11:05 2011
     1 | Good for newcomers                         | Fri Jan 29 08:11:05 2010
     1 | This doesn't seem right                    | Thu Jan 29 08:11:05 2009
(5 rows)

--Testcase 59:
EXPLAIN VERBOSE
SELECT created_at, 'aer@#AKSF', 212, count(id) FROM agg_tbl WHERE active_lock_reason IS NOT NULL GROUP BY created_at, active HAVING active != false ORDER BY created_at DESC;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=205.73..206.73 rows=400 width=53)
   Output: created_at, 'aer@#AKSF'::text, 212, (count(id)), active
   Sort Key: agg_tbl.created_at DESC
   ->  HashAggregate  (cost=184.44..188.44 rows=400 width=53)
         Output: created_at, 'aer@#AKSF'::text, 212, count(id), active
         Group Key: agg_tbl.created_at, agg_tbl.active
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..176.18 rows=1101 width=13)
               Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
               Filter: agg_tbl.active
               Remote SQL: SELECT id, active, created_at FROM agg_tbl WHERE (active_lock_reason IS NOT NULL)
(10 rows)

--Testcase 60:
SELECT created_at, 'aer@#AKSF', 212, count(id) FROM agg_tbl WHERE active_lock_reason IS NOT NULL GROUP BY created_at, active HAVING active != false ORDER BY created_at DESC;
        created_at        | ?column?  | ?column? | count 
--------------------------+-----------+----------+-------
 Wed Jan 29 08:11:05 2020 | aer@#AKSF |      212 |     2
 Mon Jan 29 08:11:05 2001 | aer@#AKSF |      212 |     1
(2 rows)

--Testcase 61:
EXPLAIN VERBOSE
SELECT avg(numbers[0] + color[0]), avg(numbers[1] + color[1]), avg(numbers[2] + color[2]) FROM agg_tbl WHERE color[0] != 0 GROUP BY name HAVING name != 'WFKAW';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=150.66..154.16 rows=200 width=56)
   Output: avg((numbers[0] + (color[0])::double precision)), avg((numbers[1] + (color[1])::double precision)), avg((numbers[2] + (color[2])::double precision)), name
   Group Key: agg_tbl.name
   ->  Foreign Scan on public.agg_tbl  (cost=100.00..133.79 rows=675 width=96)
         Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
         Filter: (agg_tbl.color[0] <> 0)
         Remote SQL: SELECT numbers, name, color FROM agg_tbl WHERE (name <> 'WFKAW')
(7 rows)

--Testcase 62:
SELECT avg(numbers[0] + color[0]), avg(numbers[1] + color[1]), avg(numbers[2] + color[2]) FROM agg_tbl WHERE color[0] != 0 GROUP BY name HAVING name != 'WFKAW';
 avg | avg | avg 
-----+-----+-----
(0 rows)

--Testcase 63:
EXPLAIN VERBOSE
SELECT events[0], string_agg(events[0], ' ' ORDER BY events[0]) FROM agg_tbl WHERE description IS NOT NULL GROUP BY score, events HAVING score NOT IN (221.12, .21, 313.12) ORDER BY score;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=217.21..232.25 rows=200 width=104)
   Output: events[0], string_agg(events[0], ' '::text ORDER BY events[0]), score, events
   Group Key: agg_tbl.score, agg_tbl.events
   ->  Sort  (cost=217.21..220.35 rows=1254 width=40)
         Output: score, events
         Sort Key: agg_tbl.score, agg_tbl.events
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..152.68 rows=1254 width=40)
               Output: score, events
               Remote SQL: SELECT score, events FROM agg_tbl WHERE (description IS NOT NULL) AND score NOT IN (221.12, 0.21, 313.12)
(9 rows)

--Testcase 64:
SELECT events[0], string_agg(events[0], ' ' ORDER BY events[0]) FROM agg_tbl WHERE description IS NOT NULL GROUP BY score, events HAVING score NOT IN (221.12, .21, 313.12) ORDER BY score;
 events | string_agg 
--------+------------
        | 
        | 
        | 
        | 
        | 
        | 
        | 
        | 
        | 
(9 rows)

--Testcase 65:
EXPLAIN VERBOSE
SELECT string_agg(name, ' '), string_agg(description, ' ') FROM agg_tbl WHERE events[0] IN (SELECT events[0] FROM agg_tbl WHERE id > 0);
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=281.26..281.27 rows=1 width=64)
   Output: string_agg(agg_tbl.name, ' '::text), string_agg(agg_tbl.description, ' '::text)
   ->  Hash Join  (cost=243.51..279.55 rows=341 width=64)
         Output: agg_tbl.name, agg_tbl.description
         Inner Unique: true
         Hash Cond: (agg_tbl.events[0] = agg_tbl_1.events[0])
         ->  Foreign Scan on public.agg_tbl  (cost=100.00..130.46 rows=682 width=96)
               Output: agg_tbl.id, agg_tbl.score, agg_tbl.numbers, agg_tbl.name, agg_tbl.color, agg_tbl.active, agg_tbl.active_lock_reason, agg_tbl.created_at, agg_tbl.events, agg_tbl.description, agg_tbl.teams
               Remote SQL: SELECT name, events, description FROM agg_tbl
         ->  Hash  (cost=141.13..141.13 rows=190 width=32)
               Output: agg_tbl_1.events
               ->  HashAggregate  (cost=139.23..141.13 rows=190 width=32)
                     Output: agg_tbl_1.events
                     Group Key: agg_tbl_1.events[0]
                     ->  Foreign Scan on public.agg_tbl agg_tbl_1  (cost=100.00..138.02 rows=487 width=32)
                           Output: agg_tbl_1.events, agg_tbl_1.events[0]
                           Remote SQL: SELECT events FROM agg_tbl WHERE (id > 0)
(17 rows)

--Testcase 66:
SELECT string_agg(name, ' '), string_agg(description, ' ') FROM agg_tbl WHERE events[0] IN (SELECT events[0] FROM agg_tbl WHERE id > 0);
 string_agg | string_agg 
------------+------------
            | 
(1 row)

--Testcase 67:
EXPLAIN VERBOSE
SELECT max(name), min(name), max(description), min(description) FROM agg_tbl WHERE score <> ALL(SELECT id FROM agg_tbl);
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=55901.89..55901.90 rows=1 width=128)
   Output: max(agg_tbl.name), min(agg_tbl.name), max(agg_tbl.description), min(agg_tbl.description)
   ->  Foreign Scan on public.agg_tbl  (cost=200.00..55897.24 rows=465 width=64)
         Output: agg_tbl.id, agg_tbl.score, agg_tbl.numbers, agg_tbl.name, agg_tbl.color, agg_tbl.active, agg_tbl.active_lock_reason, agg_tbl.created_at, agg_tbl.events, agg_tbl.description, agg_tbl.teams
         Filter: (SubPlan 1)
         Remote SQL: SELECT score, name, description FROM agg_tbl
         SubPlan 1
           ->  Materialize  (cost=100.00..212.38 rows=2925 width=4)
                 Output: agg_tbl_1.id
                 ->  Foreign Scan on public.agg_tbl agg_tbl_1  (cost=100.00..197.75 rows=2925 width=4)
                       Output: agg_tbl_1.id
                       Remote SQL: SELECT id FROM agg_tbl
(12 rows)

--Testcase 68:
SELECT max(name), min(name), max(description), min(description) FROM agg_tbl WHERE score <> ALL(SELECT id FROM agg_tbl);
   max   | min |            max             |            min            
---------+-----+----------------------------+---------------------------
 wontfix | bug | This will not be worked on | Extra attention is needed
(1 row)

-- test size() function pushdown in WHERE clause 
--Testcase 69:
EXPLAIN VERBOSE
SELECT * FROM agg_tbl WHERE size(id) > 0;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.agg_tbl  (cost=100.00..116.58 rows=101 width=245)
   Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
   Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM agg_tbl WHERE (size(id) > 0)
(3 rows)

--Testcase 70:
SELECT * FROM agg_tbl WHERE size(id) > 0;
 id | score | numbers | name | color | active | active_lock_reason | created_at | events | description | teams 
----+-------+---------+------+-------+--------+--------------------+------------+--------+-------------+-------
(0 rows)

--Testcase 71:
EXPLAIN VERBOSE
SELECT * FROM agg_tbl WHERE size(active) > size(active_lock_reason);
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.agg_tbl  (cost=100.00..117.34 rows=101 width=245)
   Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
   Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM agg_tbl WHERE (size(active) > size(active_lock_reason))
(3 rows)

--Testcase 72:
SELECT * FROM agg_tbl WHERE size(active) > size(active_lock_reason);
 id | score | numbers | name | color | active | active_lock_reason | created_at | events | description | teams 
----+-------+---------+------+-------+--------+--------------------+------------+--------+-------------+-------
(0 rows)

--Testcase 73:
EXPLAIN VERBOSE
SELECT * FROM agg_tbl WHERE size(id+score) > 0;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.agg_tbl  (cost=100.00..122.14 rows=101 width=245)
   Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
   Filter: (size(((agg_tbl.id)::double precision + agg_tbl.score)) > 0)
   Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM agg_tbl
(4 rows)

--Testcase 74:
SELECT * FROM agg_tbl WHERE size(id+score) > 0;
ERROR:  stub size(anyelement) is called
CONTEXT:  PL/pgSQL function size(anyelement) line 3 at RAISE
--Testcase 75:
DROP FOREIGN TABLE agg_tbl;
-- TEST FOR element of array
--Testcase 76:
CREATE FOREIGN TABLE array_test (
    key_dy int, 
    array_n int[], 
    array_s text[], 
    array_f float[], 
    array_jn jsonb, 
    array_js jsonb, 
    array_jf jsonb) 
SERVER dynamodb_server OPTIONS (table_name 'array_test', partition_key 'key_dy');
--Testcase 77:
EXPLAIN VERBOSE 
INSERT INTO array_test (key_dy, array_n[1:5], array_s[1:1], array_f, array_jn, array_js, array_jf) VALUES (11, '{1,2,3,4,5}', '{"AAAAA33250", "AAAAAAAAAAAAAAAAAAA85420", "AAAAAAAAAAA33576"}', '{}', '{}', '{}', '{}');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 11, '{1,2,3,4,5}'::integer[], '{AAAAA33250}'::text[], '{}'::double precision[], '{}'::jsonb, '{}'::jsonb, '{}'::jsonb
(4 rows)

--Testcase 78:
INSERT INTO array_test (key_dy, array_n[1:5], array_s[1:1], array_f, array_jn, array_js, array_jf) VALUES (11, '{1,2,3,4,5}', '{"AAAAA33250", "AAAAAAAAAAAAAAAAAAA85420", "AAAAAAAAAAA33576"}', '{}', '{}', '{}', '{}');
ERROR:  DynamoDB does not support empty set
--Testcase 79:
EXPLAIN VERBOSE 
UPDATE array_test SET array_f[0] = '1.1';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 80:
UPDATE array_test SET array_f[0] = '1.1';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 81:
EXPLAIN VERBOSE 
UPDATE array_test SET array_f[1] = '2.2';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 82:
UPDATE array_test SET array_f[1] = '2.2';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 83:
-- not set value for key, should fail 
EXPLAIN VERBOSE 
INSERT INTO array_test (array_s) VALUES ('{"too long"}');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: NULL::integer, NULL::integer[], '{"too long"}'::text[], NULL::double precision[], NULL::jsonb, NULL::jsonb, NULL::jsonb
(4 rows)

--Testcase 84:
INSERT INTO array_test (array_s) VALUES ('{"too long"}');
ERROR:  dynamodb_fdw: failed to execute remote SQL: Key attribute's data type should match its data type in table's schema: Key key_dy 
   sql=INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
--Testcase 85:
EXPLAIN VERBOSE 
INSERT INTO array_test (key_dy, array_n, array_s[2:2], array_f, array_jn, array_js, array_jf) VALUES (12, '{11,12}', '{"`3gOJ9gOJ3"}', '{"63764.41485008047", "-38626.05345625236"}', '{"key1": "|2FSo3FSo4*", "key2":[70356, 24708, 68429, -84248, -83370]}', '{"key1": "~4YMW4YMW6|", "key2":["`3wSi5wSi8!"]}', '{"key1": "~4YMW4YMW6|", "key2":{"key22": [-76224.64548801386, 28668.41368482083]}}');
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 12, '{11,12}'::integer[], '[2:2]={`3gOJ9gOJ3}'::text[], '{63764.41485008047,-38626.05345625236}'::double precision[], '{"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}'::jsonb, '{"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}'::jsonb, '{"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.64548801386, 28668.41368482083]}}'::jsonb
(4 rows)

--Testcase 86:
INSERT INTO array_test (key_dy, array_n, array_s[2:2], array_f, array_jn, array_js, array_jf) VALUES (12, '{11,12}', '{"`3gOJ9gOJ3"}', '{"63764.41485008047", "-38626.05345625236"}', '{"key1": "|2FSo3FSo4*", "key2":[70356, 24708, 68429, -84248, -83370]}', '{"key1": "~4YMW4YMW6|", "key2":["`3wSi5wSi8!"]}', '{"key1": "~4YMW4YMW6|", "key2":{"key22": [-76224.64548801386, 28668.41368482083]}}');
--Testcase 87:
EXPLAIN VERBOSE 
INSERT INTO array_test (key_dy, array_n, array_s, array_f) VALUES (13, '{3,4}', '{"AAAAAA98232", "AAAA49534", "AAAAAAAAAAA21658"}', '{-79846.26103075403}');
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 13, '{3,4}'::integer[], '{AAAAAA98232,AAAA49534,AAAAAAAAAAA21658}'::text[], '{-79846.26103075403}'::double precision[], NULL::jsonb, NULL::jsonb, NULL::jsonb
(4 rows)

--Testcase 88:
INSERT INTO array_test (key_dy, array_n, array_s, array_f) VALUES (13, '{3,4}', '{"AAAAAA98232", "AAAA49534", "AAAAAAAAAAA21658"}', '{-79846.26103075403}');
--Testcase 89:
EXPLAIN VERBOSE 
INSERT INTO array_test (key_dy, array_n[2]) VALUES(14, now());  -- error, type mismatch
ERROR:  subscripted assignment to "array_n" requires type integer but expression is of type timestamp with time zone
LINE 2: INSERT INTO array_test (key_dy, array_n[2]) VALUES(14, now()...
                                        ^
HINT:  You will need to rewrite or cast the expression.
--Testcase 90:
INSERT INTO array_test (key_dy, array_n[2]) VALUES(14, now());  -- error, type mismatch
ERROR:  subscripted assignment to "array_n" requires type integer but expression is of type timestamp with time zone
LINE 1: INSERT INTO array_test (key_dy, array_n[2]) VALUES(14, now()...
                                        ^
HINT:  You will need to rewrite or cast the expression.
--Testcase 91:
EXPLAIN VERBOSE 
INSERT INTO array_test (key_dy, array_n[1:2]) VALUES(15, now());  -- error, type mismatch
ERROR:  subscripted assignment to "array_n" requires type integer[] but expression is of type timestamp with time zone
LINE 2: INSERT INTO array_test (key_dy, array_n[1:2]) VALUES(15, now...
                                        ^
HINT:  You will need to rewrite or cast the expression.
--Testcase 92:
INSERT INTO array_test (key_dy, array_n[1:2]) VALUES(15, now());  -- error, type mismatch
ERROR:  subscripted assignment to "array_n" requires type integer[] but expression is of type timestamp with time zone
LINE 1: INSERT INTO array_test (key_dy, array_n[1:2]) VALUES(15, now...
                                        ^
HINT:  You will need to rewrite or cast the expression.
--Testcase 93:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 94:
SELECT * FROM array_test;
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(12 rows)

--Testcase 95:
EXPLAIN VERBOSE 
SELECT array_test.array_n[1], array_test.array_s[1], array_test.array_f[1], array_test.array_jn->'key2'->1, array_test.array_js->'key2'->0 FROM array_test;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..127.80 rows=445 width=108)
   Output: array_n[1], array_s[1], array_f[1], ((array_jn -> 'key2'::text) -> 1), ((array_js -> 'key2'::text) -> 0)
   Remote SQL: SELECT array_n, array_s, array_f, array_jn, array_js FROM array_test
(3 rows)

--Testcase 96:
SELECT array_test.array_n[1], array_test.array_s[1], array_test.array_f[1], array_test.array_jn->'key2'->1, array_test.array_js->'key2'->0 FROM array_test;
 array_n |      array_s      |       array_f       | ?column? |    ?column?    
---------+-------------------+---------------------+----------+----------------
       3 | AAAAAA98232       |  -25237.41596382241 |          | "/5zBd5zBd0~"
       5 | AAA54451          |   -49332.1730112388 |          | "~5nGi8nGi0,"
      11 | `3gOJ9gOJ3        |  -38626.05345625236 | 24708    | "`3wSi5wSi8!"
      52 | AAAAAA1059        |  -38626.05345625236 | -83370   | "`3gOJ9gOJ3"
       3 |  A96617           | -18296.165590167177 |          | "/6EdU4EdU0;"
       4 | AAAAA95309        |  -55016.22515167355 | -40535   | " ^2dqt6dqt5?"
      22 |  39557            |   -9739.22377987369 | 1987     | " -6QTT9QTT3|"
      22 |  39557            |   3646.546406708294 | 19955    | "%3hsq6hsq2{"
      60 |  AA6416           |  -90795.07328580023 | 40764    | " !9xtG0xtG8*"
       3 | AAAA49534         |  -79846.26103075403 |          | 
       8 | AAAAAAAAAAAA67946 |  -90553.64098777591 | -60334   | "/0irQ1irQ4;"
      33 |  39557            | -50872.874717404535 |          | "$3tvg5tvg8*"
(12 rows)

--Testcase 97:
EXPLAIN VERBOSE 
SELECT array_n[1], array_s[1], array_f[1], array_jn->'key2'->1, array_js->'key2'->0,  array_jf->'key2'->'key22'->1 FROM array_test;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..128.00 rows=379 width=140)
   Output: array_n[1], array_s[1], array_f[1], ((array_jn -> 'key2'::text) -> 1), ((array_js -> 'key2'::text) -> 0), (((array_jf -> 'key2'::text) -> 'key22'::text) -> 1)
   Remote SQL: SELECT array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 98:
SELECT array_n[1], array_s[1], array_f[1], array_jn->'key2'->1, array_js->'key2'->0,  array_jf->'key2'->'key22'->1 FROM array_test;
 array_n |      array_s      |       array_f       | ?column? |    ?column?    |      ?column?       
---------+-------------------+---------------------+----------+----------------+---------------------
       3 | AAAAAA98232       |  -25237.41596382241 |          | "/5zBd5zBd0~"  | -10797.319506069369
       5 | AAA54451          |   -49332.1730112388 |          | "~5nGi8nGi0,"  | 
      11 | `3gOJ9gOJ3        |  -38626.05345625236 | 24708    | "`3wSi5wSi8!"  | 28668.413685
      52 | AAAAAA1059        |  -38626.05345625236 | -83370   | "`3gOJ9gOJ3"   | 65967.06531806084
       3 |  A96617           | -18296.165590167177 |          | "/6EdU4EdU0;"  | 80596.89133181405
       4 | AAAAA95309        |  -55016.22515167355 | -40535   | " ^2dqt6dqt5?" | -61586.37536428
      22 |  39557            |   -9739.22377987369 | 1987     | " -6QTT9QTT3|" | 84051.72531566783
      22 |  39557            |   3646.546406708294 | 19955    | "%3hsq6hsq2{"  | -10052.559779050527
      60 |  AA6416           |  -90795.07328580023 | 40764    | " !9xtG0xtG8*" | 27397.21161491853
       3 | AAAA49534         |  -79846.26103075403 |          |                | 
       8 | AAAAAAAAAAAA67946 |  -90553.64098777591 | -60334   | "/0irQ1irQ4;"  | -11241.483616956713
      33 |  39557            | -50872.874717404535 |          | "$3tvg5tvg8*"  | -66085.45525509966
(12 rows)

--Testcase 99:
EXPLAIN VERBOSE 
SELECT array_n[1:3], array_s[1:1], array_f[1:2], array_jn->'key2'->1 FROM array_test;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..128.83 rows=538 width=128)
   Output: array_n[1:3], array_s[1:1], array_f[1:2], ((array_jn -> 'key2'::text) -> 1)
   Remote SQL: SELECT array_n, array_s, array_f, array_jn FROM array_test
(3 rows)

--Testcase 100:
SELECT array_n[1:3], array_s[1:1], array_f[1:2], array_jn->'key2'->1 FROM array_test;
  array_n   |       array_s       |                 array_f                  | ?column? 
------------+---------------------+------------------------------------------+----------
 {3,6}      | {AAAAAA98232}       | {-25237.41596382241,13079.9427807561}    | 
 {5,45,71}  | {AAA54451}          | {-49332.1730112388,30691.755680491377}   | 
 {11,12}    | {`3gOJ9gOJ3}        | {-38626.05345625236,63764.41485008047}   | 24708
 {52,64,71} | {AAAAAA1059}        | {-38626.05345625236,-31048.698947807556} | -83370
 {3,11,13}  | {" A96617"}         | {-18296.165590167177}                    | 
 {4,5,42}   | {AAAAA95309}        | {-55016.22515167355,-54424.867326773965} | -40535
 {22,27,35} | {" 39557"}          | {-9739.22377987369}                      | 1987
 {22,41,47} | {" 39557"}          | {3646.546406708294,82233.788828407}      | 19955
 {60,84}    | {" AA6416"}         | {-90795.07328580023,-39854.88621748936}  | 40764
 {3,4}      | {AAAA49534}         | {-79846.26103075403}                     | 
 {8,12,51}  | {AAAAAAAAAAAA67946} | {-90553.64098777591,-47739.90909865857}  | -60334
 {33,39,45} | {" 39557"}          | {-50872.874717404535,-48821.18574220155} | 
(12 rows)

--Testcase 101:
EXPLAIN VERBOSE 
SELECT array_ndims(array_n) AS a, array_ndims(array_s) AS b, array_ndims(array_f) AS c FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..135.57 rows=682 width=12)
   Output: array_ndims(array_n), array_ndims(array_s), array_ndims(array_f)
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(3 rows)

--Testcase 102:
SELECT array_ndims(array_n) AS a, array_ndims(array_s) AS b, array_ndims(array_f) AS c FROM array_test;
 a | b | c 
---+---+---
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
 1 | 1 | 1
(12 rows)

--Testcase 103:
EXPLAIN VERBOSE 
SELECT array_dims(array_n) AS a,array_dims(array_s) AS b,array_dims(array_f) AS c FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..135.57 rows=682 width=96)
   Output: array_dims(array_n), array_dims(array_s), array_dims(array_f)
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(3 rows)

--Testcase 104:
SELECT array_dims(array_n) AS a,array_dims(array_s) AS b,array_dims(array_f) AS c FROM array_test;
   a    |   b    |   c   
--------+--------+-------
 [1:2]  | [1:5]  | [1:2]
 [1:3]  | [1:7]  | [1:3]
 [1:2]  | [1:1]  | [1:2]
 [1:6]  | [1:4]  | [1:4]
 [1:10] | [1:9]  | [1:1]
 [1:5]  | [1:10] | [1:5]
 [1:8]  | [1:8]  | [1:1]
 [1:8]  | [1:8]  | [1:2]
 [1:2]  | [1:9]  | [1:4]
 [1:2]  | [1:3]  | [1:1]
 [1:5]  | [1:3]  | [1:2]
 [1:7]  | [1:6]  | [1:2]
(12 rows)

-- returns nothing
--Testcase 105:
EXPLAIN VERBOSE 
SELECT * FROM array_test WHERE array_n[1] < 5 and array_s = '{"foobar"}'::text[];
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..123.02 rows=1 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Filter: ((array_test.array_n[1] < 5) AND (array_test.array_s = '{foobar}'::text[]))
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(4 rows)

--Testcase 106:
SELECT * FROM array_test WHERE array_n[1] < 5 and array_s = '{"foobar"}'::text[];
 key_dy | array_n | array_s | array_f | array_jn | array_js | array_jf 
--------+---------+---------+---------+----------+----------+----------
(0 rows)

--Testcase 107:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[1:2] = '{16,25}' WHERE NOT array_n = '{}'::int[];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 108:
UPDATE array_test SET array_n[1:2] = '{16,25}' WHERE NOT array_n = '{}'::int[];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 109:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[1:2] = '{113, 117}', array_f[1:2]= '{142.23, 147.233}' WHERE array_dims(array_f) = '[1:5]';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 110:
UPDATE array_test SET array_n[1:2] = '{113, 117}', array_f[1:2]= '{142.23, 147.233}' WHERE array_dims(array_f) = '[1:5]';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 111:
EXPLAIN VERBOSE 
UPDATE array_test SET array_s[2:2] = '{"new_word"}' WHERE array_dims(array_s) is not null;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 112:
UPDATE array_test SET array_s[2:2] = '{"new_word"}' WHERE array_dims(array_s) is not null;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 113:
EXPLAIN VERBOSE 
SELECT array_n, array_s, array_f FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..130.46 rows=682 width=96)
   Output: array_n, array_s, array_f
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(3 rows)

--Testcase 114:
SELECT array_n, array_s, array_f FROM array_test;
            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             
--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------
 {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}
 {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}
 {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}
 {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}
 {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}
 {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445}
 {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}
 {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}
 {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}
 {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}
 {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}
 {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}
(12 rows)

--Testcase 115:
EXPLAIN VERBOSE 
INSERT INTO array_test(key_dy, array_n) VALUES(16, '{1,null,3}');
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 16, '{1,NULL,3}'::integer[], NULL::text[], NULL::double precision[], NULL::jsonb, NULL::jsonb, NULL::jsonb
(4 rows)

--Testcase 116:
INSERT INTO array_test(key_dy, array_n) VALUES(16, '{1,null,3}');
--Testcase 117:
EXPLAIN VERBOSE 
SELECT array_n FROM array_test;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..153.86 rows=1462 width=32)
   Output: array_n
   Remote SQL: SELECT array_n FROM array_test
(3 rows)

--Testcase 118:
SELECT array_n FROM array_test;
            array_n             
--------------------------------
 {3,6}
 {5,45,71}
 {11,12}
 {52,64,71,75,83,92}
 {3,11,13,30,37,41,43,44,64,95}
 {4,5,42,50,77}
 {22,27,35,44,52,56,80,81}
 {22,41,47,48,50,74,75,86}
 {60,84}
 {3,4}
 {0,1,3}
 {8,12,51,64,88}
 {33,39,45,55,71,75,99}
(13 rows)

--Testcase 119:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[4] = NULL WHERE array_n[2] IS NULL;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 120:
UPDATE array_test SET array_n[4] = NULL WHERE array_n[2] IS NULL;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 121:
EXPLAIN VERBOSE 
SELECT array_n FROM array_test WHERE array_n[2] IS NULL;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..152.62 rows=7 width=32)
   Output: array_n
   Filter: (array_test.array_n[2] IS NULL)
   Remote SQL: SELECT array_n FROM array_test
(4 rows)

--Testcase 122:
SELECT array_n FROM array_test WHERE array_n[2] IS NULL;
 array_n 
---------
(0 rows)

--Testcase 123:
EXPLAIN VERBOSE 
DELETE FROM array_test WHERE array_n[2] IS NULL AND array_f IS NULL;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Delete on public.array_test  (cost=100.00..143.25 rows=0 width=0)
   Remote SQL: DELETE FROM array_test WHERE key_dy = ?
   ->  Foreign Scan on public.array_test  (cost=100.00..143.25 rows=1 width=4)
         Output: key_dy
         Filter: (array_test.array_n[2] IS NULL)
         Remote SQL: SELECT key_dy, array_n FROM array_test WHERE (array_f IS NULL)
(6 rows)

--Testcase 124:
DELETE FROM array_test WHERE array_n[2] IS NULL AND array_f IS NULL;
--Testcase 125:
EXPLAIN VERBOSE 
SELECT array_n, array_s, array_f FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..130.46 rows=682 width=96)
   Output: array_n, array_s, array_f
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(3 rows)

--Testcase 126:
SELECT array_n, array_s, array_f FROM array_test;
            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             
--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------
 {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}
 {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}
 {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}
 {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}
 {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}
 {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445}
 {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}
 {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}
 {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}
 {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}
 {0,1,3}                        |                                                                                                                                                                              | 
 {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}
 {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}
(13 rows)

-- test mixed slice/scalar subscripting
--Testcase 127:
EXPLAIN VERBOSE 
SELECT '{{1,2,3},{4,5,6},{7,8,9}}'::int[];
                    QUERY PLAN                    
--------------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=32)
   Output: '{{1,2,3},{4,5,6},{7,8,9}}'::integer[]
(2 rows)

--Testcase 128:
SELECT '{{1,2,3},{4,5,6},{7,8,9}}'::int[];
           int4            
---------------------------
 {{1,2,3},{4,5,6},{7,8,9}}
(1 row)

--Testcase 129:
EXPLAIN VERBOSE 
SELECT ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
                QUERY PLAN                 
-------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=32)
   Output: '{{1,2},{4,5}}'::integer[]
(2 rows)

--Testcase 130:
SELECT ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
     int4      
---------------
 {{1,2},{4,5}}
(1 row)

--Testcase 131:
EXPLAIN VERBOSE 
SELECT '{"AAAAA33250", "AAAAAAAAAAAAAAAAAAA85420", "AAAAAAAAAAA33576"}'::text[];
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=32)
   Output: '{AAAAA33250,AAAAAAAAAAAAAAAAAAA85420,AAAAAAAAAAA33576}'::text[]
(2 rows)

--Testcase 132:
SELECT '{"AAAAA33250", "AAAAAAAAAAAAAAAAAAA85420", "AAAAAAAAAAA33576"}'::text[];
                          text                          
--------------------------------------------------------
 {AAAAA33250,AAAAAAAAAAAAAAAAAAA85420,AAAAAAAAAAA33576}
(1 row)

--Testcase 133:
EXPLAIN VERBOSE 
SELECT ('{}'::int[])[1][2][3][4][5][6];
                QUERY PLAN                
------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=4)
   Output: NULL::integer
(2 rows)

--Testcase 134:
SELECT ('{}'::int[])[1][2][3][4][5][6];
 int4 
------
     
(1 row)

-- NULL index yields NULL when selecting
--Testcase 135:
EXPLAIN VERBOSE 
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1];
                QUERY PLAN                
------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=4)
   Output: NULL::integer
(2 rows)

--Testcase 136:
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1];
 int4 
------
     
(1 row)

--Testcase 137:
EXPLAIN VERBOSE 
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1];
                QUERY PLAN                 
-------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=32)
   Output: NULL::integer[]
(2 rows)

--Testcase 138:
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1];
 int4 
------
 
(1 row)

--Testcase 139:
EXPLAIN VERBOSE 
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1];
                QUERY PLAN                 
-------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=32)
   Output: NULL::integer[]
(2 rows)

--Testcase 140:
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1];
 int4 
------
 
(1 row)

--select slices
--Testcase 141:
EXPLAIN VERBOSE 
SELECT array_n[:3], array_s[:2] FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..137.90 rows=930 width=64)
   Output: array_n[:3], array_s[:2]
   Remote SQL: SELECT array_n, array_s FROM array_test
(3 rows)

--Testcase 142:
SELECT array_n[:3], array_s[:2] FROM array_test;
  array_n   |                  array_s                   
------------+--------------------------------------------
 {3,6}      | {AAAAAA98232,AAAAAAAA79710}
 {5,45,71}  | {AAA54451,AAAAAAAAA27249}
 {11,12}    | {`3gOJ9gOJ3}
 {52,64,71} | {AAAAAA1059,AAAAAAA48038}
 {3,11,13}  | {" A96617"," AA17009"}
 {4,5,42}   | {AAAAA95309,AAAAAA66777}
 {22,27,35} | {" 39557"," A27153"}
 {22,41,47} | {" 39557",AAAA41702}
 {60,84}    | {" AA6416",AAAAA64741}
 {3,4}      | {AAAA49534,AAAAAA98232}
 {0,1,3}    | 
 {8,12,51}  | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407}
 {33,39,45} | {" 39557",AAA99043}
(13 rows)

--Testcase 143:
EXPLAIN VERBOSE 
SELECT array_n[2:], array_s[2:] FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..137.90 rows=930 width=64)
   Output: array_n[2:], array_s[2:]
   Remote SQL: SELECT array_n, array_s FROM array_test
(3 rows)

--Testcase 144:
SELECT array_n[2:], array_s[2:] FROM array_test;
           array_n            |                                                                              array_s                                                                              
------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {6}                          | {AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}
 {45,71}                      | {AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}
 {12}                         | {}
 {64,71,75,83,92}             | {AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}
 {11,13,30,37,41,43,44,64,95} | {" AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}
 {5,42,50,77}                 | {AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104}
 {27,35,44,52,56,80,81}       | {" A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}
 {41,47,48,50,74,75,86}       | {AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}
 {84}                         | {AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}
 {4}                          | {AAAAAA98232,AAAAAAAAAAA21658}
 {1,3}                        | 
 {12,51,64,88}                | {AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}
 {39,45,55,71,75,99}          | {AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}
(13 rows)

--Testcase 145:
EXPLAIN VERBOSE 
SELECT array_n[:], array_s[:] FROM array_test;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..137.90 rows=930 width=64)
   Output: array_n[:], array_s[:]
   Remote SQL: SELECT array_n, array_s FROM array_test
(3 rows)

--Testcase 146:
SELECT array_n[:], array_s[:] FROM array_test;
            array_n             |                                                                                   array_s                                                                                    
--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}
 {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}
 {11,12}                        | {`3gOJ9gOJ3}
 {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}
 {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}
 {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104}
 {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}
 {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}
 {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}
 {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}
 {0,1,3}                        | 
 {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}
 {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}
(13 rows)

-- updates
--Testcase 147:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[:3] = '{11, 12, 13}', array_s[:2] = '{{"AAAAAA98232", "AAAAAAAA79710"}, {"AAAAAAAAA53663", "AAAAAAAAAAAAAAA67062"}}' WHERE array_lower(array_n, 1) = 1;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 148:
UPDATE array_test SET array_n[:3] = '{11, 12, 13}', array_s[:2] = '{{"AAAAAA98232", "AAAAAAAA79710"}, {"AAAAAAAAA53663", "AAAAAAAAAAAAAAA67062"}}' WHERE array_lower(array_n, 1) = 1;
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 149:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 150:
SELECT * FROM array_test;
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
     16 | {0,1,3}                        |                                                                                                                                                                              |                                                                                                 |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(13 rows)

--Testcase 151:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[3:] = '{23, 24, 25}', array_s[2:] = '{{"AAAAAAAAA53663", "AAAAAAAAAAAAAAA67062"}, {"AAAAAAAAAAAAAAA73034", "AAAAAAAAAAAAA7929"}}';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 152:
UPDATE array_test SET array_n[3:] = '{23, 24, 25}', array_s[2:] = '{{"AAAAAAAAA53663", "AAAAAAAAAAAAAAA67062"}, {"AAAAAAAAAAAAAAA73034", "AAAAAAAAAAAAA7929"}}';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 153:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 154:
SELECT * FROM array_test;
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
     16 | {0,1,3}                        |                                                                                                                                                                              |                                                                                                 |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(13 rows)

--Testcase 155:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[:] = '{11, 12, 13, 14, 15}';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 156:
UPDATE array_test SET array_n[:] = '{11, 12, 13, 14, 15}';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 157:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 158:
SELECT * FROM array_test;
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
     16 | {0,1,3}                        |                                                                                                                                                                              |                                                                                                 |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(13 rows)

--Testcase 159:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[:] = '{23, 24, 25}';  -- fail, too small
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 160:
UPDATE array_test SET array_n[:] = '{23, 24, 25}';  -- fail, too small
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 161:
EXPLAIN VERBOSE 
INSERT INTO array_test VALUES(17, NULL, NULL);
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 17, NULL::integer[], NULL::text[], NULL::double precision[], NULL::jsonb, NULL::jsonb, NULL::jsonb
(4 rows)

--Testcase 162:
INSERT INTO array_test VALUES(17, NULL, NULL);
--Testcase 163:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[:] = '{11, 12, 13, 14, 15}';  -- fail, no good with null
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 164:
UPDATE array_test SET array_n[:] = '{11, 12, 13, 14, 15}';  -- fail, no good with null
ERROR:  dynamodb_fdw: unsupported updating target
--valid insert null
--Testcase 165:
EXPLAIN VERBOSE 
INSERT INTO array_test VALUES(18, NULL, NULL, NULL, NULL, NULL, NULL);
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 18, NULL::integer[], NULL::text[], NULL::double precision[], NULL::jsonb, NULL::jsonb, NULL::jsonb
(4 rows)

--Testcase 166:
INSERT INTO array_test VALUES(18, NULL, NULL, NULL, NULL, NULL, NULL);
--select and condition =,!=,<>,<,>,<=,>=
--Testcase 167:
EXPLAIN VERBOSE 
SELECT array_n, array_f, array_s FROM array_test WHERE array_n = '{12, 51, 88, 64, 8}';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..130.53 rows=3 width=96)
   Output: array_n, array_f, array_s
   Filter: (array_test.array_n = '{12,51,88,64,8}'::integer[])
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(4 rows)

--Testcase 168:
SELECT array_n, array_f, array_s FROM array_test WHERE array_n = '{12, 51, 88, 64, 8}';
 array_n | array_f | array_s 
---------+---------+---------
(0 rows)

--Testcase 169:
EXPLAIN VERBOSE 
SELECT array_n, array_f, array_s FROM array_test WHERE array_n != '{12, 51, 88, 64, 8}';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..132.16 rows=679 width=96)
   Output: array_n, array_f, array_s
   Filter: (array_test.array_n <> '{12,51,88,64,8}'::integer[])
   Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(4 rows)

--Testcase 170:
SELECT array_n, array_f, array_s FROM array_test WHERE array_n != '{12, 51, 88, 64, 8}';
            array_n             |                                             array_f                                             |                                                                                   array_s                                                                                    
--------------------------------+-------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {3,6}                          | {-25237.41596382241,13079.9427807561}                                                           | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}
 {5,45,71}                      | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}
 {11,12}                        | {-38626.05345625236,63764.41485008047}                                                          | {`3gOJ9gOJ3}
 {52,64,71,75,83,92}            | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}
 {3,11,13,30,37,41,43,44,64,95} | {-18296.165590167177}                                                                           | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}
 {4,5,42,50,77}                 | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104}
 {22,27,35,44,52,56,80,81}      | {-9739.22377987369}                                                                             | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}
 {22,41,47,48,50,74,75,86}      | {3646.546406708294,82233.788828407}                                                             | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}
 {60,84}                        | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}
 {3,4}                          | {-79846.26103075403}                                                                            | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}
 {0,1,3}                        |                                                                                                 | 
 {8,12,51,64,88}                | {-90553.64098777591,-47739.90909865857}                                                         | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}
 {33,39,45,55,71,75,99}         | {-50872.874717404535,-48821.18574220155}                                                        | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}
(13 rows)

--Testcase 171:
EXPLAIN VERBOSE 
SELECT * FROM array_test WHERE array_f <> '{515.221, 545.5, -2.12}';
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..122.09 rows=370 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Filter: (array_test.array_f <> '{515.221,545.5,-2.12}'::double precision[])
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(4 rows)

--Testcase 172:
SELECT * FROM array_test WHERE array_f <> '{515.221, 545.5, -2.12}';
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(12 rows)

--Testcase 173:
EXPLAIN VERBOSE 
SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test WHERE array_n < '{1232, 5121, 8438, 644, 83}';
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..122.09 rows=124 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Filter: (array_test.array_n < '{1232,5121,8438,644,83}'::integer[])
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(4 rows)

--Testcase 174:
SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test WHERE array_n < '{1232, 5121, 8438, 644, 83}';
 key_dy |            array_n             |                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  |                                                  array_js                                                  |                                                                     array_jf                                                                      

      2 | {3,6}                          | {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}                                 | {"key1": "~9RUg9RUg3:", "key2": ["/5zBd5zBd0~"]}                                                           | {"key1": "~7vpt3vpt8+", "key2": {"key22": [-66861.26577766569, -10797.319506069369, 64886.490808153816]}}
      9 | {5,45,71}                      | {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}                                 | {"key1": "&8HGX1HGX7@", "key2": ["~5nGi8nGi0,"]}                                                           | {"key1": "|2OxF6OxF9)", "key2": {"key22": [51318.65507552793]}}
     12 | {11,12}                        | {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}    | {"key1": "~4YMW4YMW6|", "key2": ["`3wSi5wSi8!"]}                                                           | {"key1": "~4YMW4YMW6|", "key2": {"key22": [-76224.645488, 28668.413685]}}
      1 | {52,64,71,75,83,92}            | {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}    | {"key1": ",3xbA8xbA8!", "key2": ["`3gOJ9gOJ3"]}                                                            | {"key1": ")5zGA9zGA6%", "key2": {"key22": [19405.705586544413, 65967.06531806084]}}
      3 | {3,11,13,30,37,41,43,44,64,95} | {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}                                 | {"key1": "`2Xtb9Xtb5:", "key2": ["/6EdU4EdU0;"]}                                                           | {"key1": "?0OwP0OwP2<", "key2": {"key22": [9824.9807006888, 80596.89133181405]}}
      5 | {4,5,42,50,77}                 | {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]} | {"key1": "?3Rfr9Rfr9,", "key2": [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]}                | {"key1": ";2XUI2XUI0)", "key2": {"key22": [-71457.94963834029, -61586.37536428]}}
      8 | {22,27,35,44,52,56,80,81}      | {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}                     | {"key1": "$5TBY6TBY6:", "key2": [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]}            | {"key1": "_5omy7omy1*", "key2": {"key22": [5976.917739108772, 84051.72531566783]}}
     10 | {22,41,47,48,50,74,75,86}      | {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}                          | {"key1": "+3uec0uec4}", "key2": ["%3hsq6hsq2{"]}                                                           | {"key1": ":7QIv6QIv3?", "key2": {"key22": [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]}}
      7 | {60,84}                        | {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}                            | {"key1": "4Uzr3Uzr4]", "key2": [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"]} | {"key1": "/1mQJ5mQJ2`", "key2": {"key22": [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]}}
     13 | {3,4}                          | {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            |                                                                           |                                                                                                            | 
     16 | {0,1,3}                        |                                                                                                                                                                              |                                                                                                 |                                                                           |                                                                                                            | 
      6 | {8,12,51,64,88}                | {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}          | {"key1": "*7KaM1KaM8.", "key2": ["/0irQ1irQ4;"]}                                                           | {"key1": "|2efE8efE3|", "key2": {"key22": [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]}}
      4 | {33,39,45,55,71,75,99}         | {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}                                  | {"key1": "!9fRI5fRI7@", "key2": ["$3tvg5tvg8*", "/9vev1vev4:"]}                                            | {"key1": "]4uLG0uLG0@", "key2": {"key22": [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]}}
(13 rows)

--Testcase 175:
EXPLAIN VERBOSE 
SELECT array_s, array_f, array_jn FROM array_test WHERE array_s > '{"$"}';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..132.15 rows=227 width=96)
   Output: array_s, array_f, array_jn
   Filter: (array_test.array_s > '{$}'::text[])
   Remote SQL: SELECT array_s, array_f, array_jn FROM array_test
(4 rows)

--Testcase 176:
SELECT array_s, array_f, array_jn FROM array_test WHERE array_s > '{"$"}';
                                                                                   array_s                                                                                    |                                             array_f                                             |                                 array_jn                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------
 {AAAAAA98232,AAAAAAAA79710,AAAAAAAAA12793,AAAAAAAAAAAAAAAA55798,AAAAAAAAAAAAAAAAA69675}                                                                                      | {-25237.41596382241,13079.9427807561}                                                           | {"key1": ":1qZk0qZk8,", "key2": [-69770]}
 {AAA54451,AAAAAAAAA27249,AAAAAAAAAAA21658,AAAAAAAAAAA74076,AAAAAAAAAAAA21089,AAAAAAAAAAAAAA28620,AAAAAAAAAAAAAAAAAA54141}                                                    | {-49332.1730112388,30691.755680491377,62143.21122818763}                                        | {"key1": "(6Ykr3Ykr9{", "key2": [-12066]}
 {`3gOJ9gOJ3}                                                                                                                                                                 | {-38626.05345625236,63764.41485008047}                                                          | {"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}
 {AAAAAA1059,AAAAAAA48038,AAAAAAAA44066,AAAAAAAAAAA176}                                                                                                                       | {-38626.05345625236,-31048.698947807556,63764.41485008047,92587.98254484517}                    | {"key1": "|2FSo3FSo4*", "key2": [-84248, -83370, 24708, 68429, 70356]}
 {" A96617"," AA17009",AAA54451,AAAAA75968,AAAAA95309,AAAAAAA99836,AAAAAAAAAA22292,AAAAAAAAAA48845,AAAAAAAAAAAAAA95246}                                                       | {-18296.165590167177}                                                                           | {"key1": "~8WdZ5WdZ5}", "key2": [-93527]}
 {AAAAA95309,AAAAAA66777,AAAAAAA79710,AAAAAAAAA27249,AAAAAAAAAA64777,AAAAAAAAAAA176,AAAAAAAAAAA46154,AAAAAAAAAAAAAAAAA26540,AAAAAAAAAAAAAAAAAAA1205,AAAAAAAAAAAAAAAAAAA70104} | {-55016.22515167355,-54424.867326773965,1650.9169848841702,75860.99904981075,93487.89047952445} | {"key1": "(7whB4whB4;", "key2": [-76020, -40535, -33651, -14711, -13410]}
 {" 39557"," A27153"," AA88409",AAAAAAA66161,AAAAAAAA9523,AAAAAAAAAAA99000,AAAAAAAAAAAAA7929,AAAAAAAAAAAAAAA73034}                                                            | {-9739.22377987369}                                                                             | {"key1": "2oBm5oBm4*", "key2": [-55266, 1987, 28980]}
 {" 39557",AAAA41702,AAAAA62737,AAAAAAAA9523,AAAAAAAAAAA46154,AAAAAAAAAAAA37562,AAAAAAAAAAAAAAAA14047,AAAAAAAAAAAAAAAAA764}                                                   | {3646.546406708294,82233.788828407}                                                             | {"key1": ":4rgs7rgs9:", "key2": [-36482, 19955]}
 {" AA6416",AAAAA64741,AAAAA961,AAAAAA1059,AAAAAAA81898,AAAAAAAAAAAA81511,AAAAAAAAAAAAAAAA31334,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA32918}                               | {-90795.07328580023,-39854.88621748936,63902.91107811255,73775.02555383104}                     | {"key1": "5tUx4tUx6{", "key2": [-2511, 40764]}
 {AAAA49534,AAAAAA98232,AAAAAAAAAAA21658}                                                                                                                                     | {-79846.26103075403}                                                                            | 
 {AAAAAAAAAAAA67946,AAAAAAAAAAAAAAAAA50407,AAAAAAAAAAAAAAAAAA12591}                                                                                                           | {-90553.64098777591,-47739.90909865857}                                                         | {"key1": "?2wyI2wyI3[", "key2": [-90865, -60334, -12316, 21115]}
 {" 39557",AAA99043,AAAAAAAAA53663,AAAAAAAAAA64777,AAAAAAAAAAAAAAA67062,AAAAAAAAAAAAAAAAAAA91804}                                                                             | {-50872.874717404535,-48821.18574220155}                                                        | {"key1": "*3NKX2NKX2/", "key2": [93305]}
(12 rows)

--Testcase 177:
EXPLAIN VERBOSE 
SELECT array_js->'key1', array_js->'key2', array_js->'key2'->0 FROM array_test WHERE (array_js->'key2'->0)::text != '$';
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..186.69 rows=1455 width=96)
   Output: (array_js -> 'key1'::text), (array_js -> 'key2'::text), ((array_js -> 'key2'::text) -> 0)
   Filter: ((((array_test.array_js -> 'key2'::text) -> 0))::text <> '$'::text)
   Remote SQL: SELECT array_js FROM array_test
(4 rows)

--Testcase 178:
SELECT array_js->'key1', array_js->'key2', array_js->'key2'->0 FROM array_test WHERE (array_js->'key2'->0)::text != '$';
   ?column?    |                                  ?column?                                  |    ?column?    
---------------+----------------------------------------------------------------------------+----------------
 "~9RUg9RUg3:" | ["/5zBd5zBd0~"]                                                            | "/5zBd5zBd0~"
 "&8HGX1HGX7@" | ["~5nGi8nGi0,"]                                                            | "~5nGi8nGi0,"
 "~4YMW4YMW6|" | ["`3wSi5wSi8!"]                                                            | "`3wSi5wSi8!"
 ",3xbA8xbA8!" | ["`3gOJ9gOJ3"]                                                             | "`3gOJ9gOJ3"
 "`2Xtb9Xtb5:" | ["/6EdU4EdU0;"]                                                            | "/6EdU4EdU0;"
 "?3Rfr9Rfr9," | [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]                 | " ^2dqt6dqt5?"
 "$5TBY6TBY6:" | [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]             | " -6QTT9QTT3|"
 "+3uec0uec4}" | ["%3hsq6hsq2{"]                                                            | "%3hsq6hsq2{"
 "4Uzr3Uzr4]"  | [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"] | " !9xtG0xtG8*"
 "*7KaM1KaM8." | ["/0irQ1irQ4;"]                                                            | "/0irQ1irQ4;"
 "!9fRI5fRI7@" | ["$3tvg5tvg8*", "/9vev1vev4:"]                                             | "$3tvg5tvg8*"
(11 rows)

--Testcase 179:
EXPLAIN VERBOSE 
SELECT array_jn->'key1', array_jn->'key2'->0 FROM array_test WHERE (array_jn->'key2'->0)::int >= -122;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..172.11 rows=487 width=64)
   Output: (array_jn -> 'key1'::text), ((array_jn -> 'key2'::text) -> 0)
   Filter: ((((array_test.array_jn -> 'key2'::text) -> 0))::integer >= '-122'::integer)
   Remote SQL: SELECT array_jn FROM array_test
(4 rows)

--Testcase 180:
SELECT array_jn->'key1', array_jn->'key2'->0 FROM array_test WHERE (array_jn->'key2'->0)::int >= -122;
   ?column?    | ?column? 
---------------+----------
 "|2FSo3FSo4*" | 70356
 "*3NKX2NKX2/" | 93305
(2 rows)

--Testcase 181:
EXPLAIN VERBOSE 
SELECT array_jf->'key1', array_jf->'key2'->'key22' FROM array_test WHERE (array_jf->'key2'->'key22'->0)::float <= 32212.233;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..175.77 rows=487 width=64)
   Output: (array_jf -> 'key1'::text), ((array_jf -> 'key2'::text) -> 'key22'::text)
   Filter: (((((array_test.array_jf -> 'key2'::text) -> 'key22'::text) -> 0))::double precision <= '32212.233'::double precision)
   Remote SQL: SELECT array_jf FROM array_test
(4 rows)

--Testcase 182:
SELECT array_jf->'key1', array_jf->'key2'->'key22' FROM array_test WHERE (array_jf->'key2'->'key22'->0)::float <= 32212.233;
   ?column?    |                                               ?column?                                                
---------------+-------------------------------------------------------------------------------------------------------
 "~7vpt3vpt8+" | [-66861.26577766569, -10797.319506069369, 64886.490808153816]
 "~4YMW4YMW6|" | [-76224.645488, 28668.413685]
 ")5zGA9zGA6%" | [19405.705586544413, 65967.06531806084]
 "?0OwP0OwP2<" | [9824.9807006888, 80596.89133181405]
 ";2XUI2XUI0)" | [-71457.94963834029, -61586.37536428]
 "_5omy7omy1*" | [5976.917739108772, 84051.72531566783]
 ":7QIv6QIv3?" | [-71676.79434681767, -10052.559779050527, 7742.598486606963, 39766.29258475767, 45589.575400305155]
 "/1mQJ5mQJ2`" | [17857.284606812624, 27397.21161491853, 68880.11534103603, 77718.67842279281]
 "|2efE8efE3|" | [-47187.525033581565, -11241.483616956713, 33078.7105305751, 42088.54540159687]
 "]4uLG0uLG0@" | [-82530.51086218841, -66085.45525509966, -11554.833340017285, -3224.6865385745914, 7305.270420132918]
(10 rows)

--Testcase 183:
EXPLAIN VERBOSE 
SELECT array_js->'key1', array_js->'key2', array_js#>'{key2, 0}' FROM array_test WHERE array_js#>>'{key2, 0}' != '$';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..172.08 rows=1455 width=96)
   Output: (array_js -> 'key1'::text), (array_js -> 'key2'::text), (array_js #> '{key2,0}'::text[])
   Filter: ((array_test.array_js #>> '{key2,0}'::text[]) <> '$'::text)
   Remote SQL: SELECT array_js FROM array_test
(4 rows)

--Testcase 184:
SELECT array_js->'key1', array_js->'key2', array_js#>'{key2, 0}' FROM array_test WHERE array_js#>>'{key2, 0}' != '$';
   ?column?    |                                  ?column?                                  |    ?column?    
---------------+----------------------------------------------------------------------------+----------------
 "~9RUg9RUg3:" | ["/5zBd5zBd0~"]                                                            | "/5zBd5zBd0~"
 "&8HGX1HGX7@" | ["~5nGi8nGi0,"]                                                            | "~5nGi8nGi0,"
 "~4YMW4YMW6|" | ["`3wSi5wSi8!"]                                                            | "`3wSi5wSi8!"
 ",3xbA8xbA8!" | ["`3gOJ9gOJ3"]                                                             | "`3gOJ9gOJ3"
 "`2Xtb9Xtb5:" | ["/6EdU4EdU0;"]                                                            | "/6EdU4EdU0;"
 "?3Rfr9Rfr9," | [" ^2dqt6dqt5?", "/9lcF6lcF4<, ,8EOW5EOW5", "_1rfp2rfp8+"]                 | " ^2dqt6dqt5?"
 "$5TBY6TBY6:" | [" -6QTT9QTT3|", " ^3wIS6wIS0", " ^7NfF5NfF1(", "@2Diz3Diz2]"]             | " -6QTT9QTT3|"
 "+3uec0uec4}" | ["%3hsq6hsq2{"]                                                            | "%3hsq6hsq2{"
 "4Uzr3Uzr4]"  | [" !9xtG0xtG8*", "%2vTI0vTI2=", "*6qYP9qYP8*", "+0gxD9gxD1:, ,1vKu1vKu0^"] | " !9xtG0xtG8*"
 "*7KaM1KaM8." | ["/0irQ1irQ4;"]                                                            | "/0irQ1irQ4;"
 "!9fRI5fRI7@" | ["$3tvg5tvg8*", "/9vev1vev4:"]                                             | "$3tvg5tvg8*"
(11 rows)

--Testcase 185:
EXPLAIN VERBOSE 
SELECT array_jn->'key1', array_jn#>'{key2, 0}' FROM array_test WHERE (array_jn#>>'{key2, 0}')::int >= -122;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..170.90 rows=487 width=64)
   Output: (array_jn -> 'key1'::text), (array_jn #> '{key2,0}'::text[])
   Filter: (((array_test.array_jn #>> '{key2,0}'::text[]))::integer >= '-122'::integer)
   Remote SQL: SELECT array_jn FROM array_test
(4 rows)

--Testcase 186:
SELECT array_jn->'key1', array_jn#>'{key2, 0}' FROM array_test WHERE (array_jn#>>'{key2, 0}')::int >= -122;
   ?column?    | ?column? 
---------------+----------
 "|2FSo3FSo4*" | 70356
 "*3NKX2NKX2/" | 93305
(2 rows)

--Testcase 187:
EXPLAIN VERBOSE 
SELECT array_jf->'key1', array_jf#>'{key2,key22,0}' FROM array_test WHERE (array_jf#>>'{key2,key22,0}')::float <= 32212.233;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..170.90 rows=487 width=64)
   Output: (array_jf -> 'key1'::text), (array_jf #> '{key2,key22,0}'::text[])
   Filter: (((array_test.array_jf #>> '{key2,key22,0}'::text[]))::double precision <= '32212.233'::double precision)
   Remote SQL: SELECT array_jf FROM array_test
(4 rows)

--Testcase 188:
SELECT array_jf->'key1', array_jf#>'{key2,key22,0}' FROM array_test WHERE (array_jf#>>'{key2,key22,0}')::float <= 32212.233;
   ?column?    |      ?column?       
---------------+---------------------
 "~7vpt3vpt8+" | -66861.26577766569
 "~4YMW4YMW6|" | -76224.645488
 ")5zGA9zGA6%" | 19405.705586544413
 "?0OwP0OwP2<" | 9824.9807006888
 ";2XUI2XUI0)" | -71457.94963834029
 "_5omy7omy1*" | 5976.917739108772
 ":7QIv6QIv3?" | -71676.79434681767
 "/1mQJ5mQJ2`" | 17857.284606812624
 "|2efE8efE3|" | -47187.525033581565
 "]4uLG0uLG0@" | -82530.51086218841
(10 rows)

--Testcase 189:
EXPLAIN VERBOSE 
SELECT array_n[0], array_s[0], array_f[0] FROM array_test WHERE array_f[0] <> 0 GROUP BY array_n[0], array_s[0], array_f[0] HAVING array_n[0] BETWEEN -1222 AND 21233 LIMIT 5 OFFSET 0;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=134.02..134.05 rows=3 width=44)
   Output: (array_n[0]), (array_s[0]), (array_f[0])
   ->  Group  (cost=134.02..134.05 rows=3 width=44)
         Output: (array_n[0]), (array_s[0]), (array_f[0])
         Group Key: (array_test.array_n[0]), (array_test.array_s[0]), (array_test.array_f[0])
         ->  Sort  (cost=134.02..134.03 rows=3 width=44)
               Output: (array_n[0]), (array_s[0]), (array_f[0])
               Sort Key: (array_test.array_n[0]), (array_test.array_s[0]), (array_test.array_f[0])
               ->  Foreign Scan on public.array_test  (cost=100.00..134.00 rows=3 width=44)
                     Output: array_n[0], array_s[0], array_f[0]
                     Filter: ((array_test.array_f[0] <> '0'::double precision) AND (array_test.array_n[0] >= '-1222'::integer) AND (array_test.array_n[0] <= 21233))
                     Remote SQL: SELECT array_n, array_s, array_f FROM array_test
(12 rows)

--Testcase 190:
SELECT array_n[0], array_s[0], array_f[0] FROM array_test WHERE array_f[0] <> 0 GROUP BY array_n[0], array_s[0], array_f[0] HAVING array_n[0] BETWEEN -1222 AND 21233 LIMIT 5 OFFSET 0;
 array_n | array_s | array_f 
---------+---------+---------
(0 rows)

--Testcase 191:
EXPLAIN VERBOSE 
SELECT array_jn->'key1', array_js->'key1', array_jf->'key1', array_jf->'key2'->'key22'->0 FROM array_test WHERE (array_jn->'key2'->0)::int >= 0 GROUP BY array_jn, array_js, array_jf HAVING (array_jf->'key2'->'key22'->0)::float IN (65967.06531806084, -10797.319506069369, 80596.89133181405, 1.1);
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=147.57..147.69 rows=5 width=224)
   Output: (array_jn -> 'key1'::text), (array_js -> 'key1'::text), (array_jf -> 'key1'::text), (((array_jf -> 'key2'::text) -> 'key22'::text) -> 0), array_jn, array_js, array_jf
   Group Key: array_test.array_jn, array_test.array_js, array_test.array_jf
   ->  Sort  (cost=147.57..147.58 rows=5 width=96)
         Output: array_jn, array_js, array_jf
         Sort Key: array_test.array_jn, array_test.array_js, array_test.array_jf
         ->  Foreign Scan on public.array_test  (cost=100.00..147.51 rows=5 width=96)
               Output: array_jn, array_js, array_jf
               Filter: (((((array_test.array_jn -> 'key2'::text) -> 0))::integer >= 0) AND (((((array_test.array_jf -> 'key2'::text) -> 'key22'::text) -> 0))::double precision = ANY ('{65967.06531806084,-10797.319506069369,80596.89133181405,1.1}'::double precision[])))
               Remote SQL: SELECT array_jn, array_js, array_jf FROM array_test
(10 rows)

--Testcase 192:
SELECT array_jn->'key1', array_js->'key1', array_jf->'key1', array_jf->'key2'->'key22'->0 FROM array_test WHERE (array_jn->'key2'->0)::int >= 0 GROUP BY array_jn, array_js, array_jf HAVING (array_jf->'key2'->'key22'->0)::float IN (65967.06531806084, -10797.319506069369, 80596.89133181405, 1.1);
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
(0 rows)

-- test array extension
--Testcase 193:
EXPLAIN VERBOSE 
DELETE FROM array_test;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Delete on public.array_test  (cost=100.00..197.75 rows=0 width=0)
   Remote SQL: DELETE FROM array_test WHERE key_dy = ?
   ->  Foreign Scan on public.array_test  (cost=100.00..197.75 rows=2925 width=4)
         Output: key_dy
         Remote SQL: SELECT key_dy FROM array_test
(5 rows)

--Testcase 194:
DELETE FROM array_test;
--Testcase 195:
EXPLAIN VERBOSE 
INSERT INTO array_test VALUES(19, array[1,2,null,4], array['one','two',null,'four'], array[551.2121, 5125.5, 45.2, -45.36],'{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}', '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}', '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}');
                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 19, '{1,2,NULL,4}'::integer[], '{one,two,NULL,four}'::text[], '{551.2121,5125.5,45.2,-45.36}'::double precision[], '{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}'::jsonb, '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}'::jsonb, '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}'::jsonb
(4 rows)

--Testcase 196:
INSERT INTO array_test VALUES(19, array[1,2,null,4], array['one','two',null,'four'], array[551.2121, 5125.5, 45.2, -45.36],'{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}', '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}', '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}');
--Testcase 197:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 198:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 199:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[2] = 22, array_s[2] = 'array_swenarray_sy-array_swo';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 200:
UPDATE array_test SET array_n[2] = 22, array_s[2] = 'array_swenarray_sy-array_swo';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 201:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 202:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 203:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[5] = 5, array_s[5] = 'farray_nve';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 204:
UPDATE array_test SET array_n[5] = 5, array_s[5] = 'farray_nve';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 205:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 206:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 207:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[8] = 8, array_s[8] = 'earray_ngharray_s';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 208:
UPDATE array_test SET array_n[8] = 8, array_s[8] = 'earray_ngharray_s';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 209:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 210:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 211:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[0] = 0, array_s[0] = 'zero';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 212:
UPDATE array_test SET array_n[0] = 0, array_s[0] = 'zero';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 213:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 214:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 215:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[-3] = -3, array_s[-3] = 'marray_nnus-array_shree';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 216:
UPDATE array_test SET array_n[-3] = -3, array_s[-3] = 'marray_nnus-array_shree';
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 217:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 218:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 219:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[0:2] = array[10,11,12], array_s[0:2] = array['array_sen','eleven','array_swelve'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 220:
UPDATE array_test SET array_n[0:2] = array[10,11,12], array_s[0:2] = array['array_sen','eleven','array_swelve'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 221:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 222:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 223:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[8:10] = array[18,null,20], array_s[8:10] = array['p18',null,'p20'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 224:
UPDATE array_test SET array_n[8:10] = array[18,null,20], array_s[8:10] = array['p18',null,'p20'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 225:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 226:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 227:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[11:12] = array[null,22], array_s[11:12] = array[null,'p22'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 228:
UPDATE array_test SET array_n[11:12] = array[null,22], array_s[11:12] = array[null,'p22'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 229:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 230:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 231:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[15:16] = array[null,26], array_s[15:16] = array[null,'p26'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 232:
UPDATE array_test SET array_n[15:16] = array[null,26], array_s[15:16] = array[null,'p26'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 233:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 234:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 235:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[-5:-3] = array[-15,-14,-13], array_s[-5:-3] = array['m15','m14','m13'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 236:
UPDATE array_test SET array_n[-5:-3] = array[-15,-14,-13], array_s[-5:-3] = array['m15','m14','m13'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 237:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 238:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 239:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[-7:-6] = array[-17,null], array_s[-7:-6] = array['m17',null];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 240:
UPDATE array_test SET array_n[-7:-6] = array[-17,null], array_s[-7:-6] = array['m17',null];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 241:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 242:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 243:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[-12:-10] = array[-22,null,-20], array_s[-12:-10] = array['m22',null,'m20'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 244:
UPDATE array_test SET array_n[-12:-10] = array[-22,null,-20], array_s[-12:-10] = array['m22',null,'m20'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 245:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 246:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     19 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 247:
EXPLAIN VERBOSE 
DELETE FROM array_test;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Delete on public.array_test  (cost=100.00..197.75 rows=0 width=0)
   Remote SQL: DELETE FROM array_test WHERE key_dy = ?
   ->  Foreign Scan on public.array_test  (cost=100.00..197.75 rows=2925 width=4)
         Output: key_dy
         Remote SQL: SELECT key_dy FROM array_test
(5 rows)

--Testcase 248:
DELETE FROM array_test;
--Testcase 249:
EXPLAIN VERBOSE 
INSERT INTO array_test VALUES(20, array[1,2,null,4], array['one','two',null,'four'], array[551.2121, 5125.5, 45.2, -45.36],'{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}', '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}', '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}');
                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.array_test  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO array_test VALUE {'key_dy' : ?, 'array_n' : ?, 'array_s' : ?, 'array_f' : ?, 'array_jn' : ?, 'array_js' : ?, 'array_jf' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=196)
         Output: 20, '{1,2,NULL,4}'::integer[], '{one,two,NULL,four}'::text[], '{551.2121,5125.5,45.2,-45.36}'::double precision[], '{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}'::jsonb, '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}'::jsonb, '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}'::jsonb
(4 rows)

--Testcase 250:
INSERT INTO array_test VALUES(20, array[1,2,null,4], array['one','two',null,'four'], array[551.2121, 5125.5, 45.2, -45.36],'{"key1": "-0vkD1vkD1", "key2": [-82239, -27568]}', '{"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]}', '{"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.37933343978, -43867.89668332935, 89612.16240976125, 93294.21355107482]}}');
--Testcase 251:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 252:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     20 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 253:
EXPLAIN VERBOSE 
UPDATE array_test SET array_n[0:5] = array[0,1,2,null,4,5], array_s[0:5] = array['z','p1','p2',null,'p4','p5'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 254:
UPDATE array_test SET array_n[0:5] = array[0,1,2,null,4,5], array_s[0:5] = array['z','p1','p2',null,'p4','p5'];
ERROR:  dynamodb_fdw: unsupported updating target
--Testcase 255:
EXPLAIN VERBOSE 
SELECT * FROM array_test;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.array_test  (cost=100.00..121.16 rows=372 width=196)
   Output: key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf
   Remote SQL: SELECT key_dy, array_n, array_s, array_f, array_jn, array_js, array_jf FROM array_test
(3 rows)

--Testcase 256:
SELECT * FROM array_test;
 key_dy |  array_n  |      array_s      |            array_f            |                     array_jn                     |                                            array_js                                             |                                               array_jf                                                
--------+-----------+-------------------+-------------------------------+--------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------
     20 | {0,1,2,4} | {"",four,one,two} | {-45.36,45.2,551.2121,5125.5} | {"key1": "-0vkD1vkD1", "key2": [-82239, -27568]} | {"key1": "^4jzR6jzR8.", "key2": ["}6tUr7tUr9<", " <4khS2khS9_", " #1HvE5HvE2", " #8qnh4qnh3<"]} | {"key1": "_4TbU3TbU1@", "key2": {"key22": [65201.379333, -43867.896683, 89612.162410, 93294.213551]}}
(1 row)

--Testcase 257:
DROP FOREIGN TABLE array_test;
-- TEST FOR table json mixed type
--Testcase 258:
CREATE FOREIGN TABLE mixed_types (
    id int, 
    score float, 
    numbers float[], 
    name text, 
    color int[], 
    active boolean, 
    active_lock_reason text, 
    created_at timestamp, 
    events text[], 
    description text, 
    teams jsonb)
SERVER dynamodb_server OPTIONS (table_name 'mixed_types', partition_key 'id');
--Testcase 259:
EXPLAIN VERBOSE 
SELECT * FROM mixed_types;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..119.12 rows=304 width=245)
   Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
   Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM mixed_types
(3 rows)

--Testcase 260:
SELECT * FROM mixed_types;
  id  |  score  |        numbers         |       name       |    color     | active | active_lock_reason |        created_at        |              events               |                description                 |                                   teams                                    
------+---------+------------------------+------------------+--------------+--------+--------------------+--------------------------+-----------------------------------+--------------------------------------------+----------------------------------------------------------------------------
 2889 |    45.2 | {-2.12,97.09,121.2}    | good first issue | {51,66,100}  | f      |                    | Fri Jan 29 08:11:05 2010 | {create,delete,push,update,watch} | Good for newcomers                         | {"name": "team2", "parent": {"id": 4534163, "name": "team1"}}
  212 |  656.32 | {-2.12,43.09,121.3656} | bug              | {10,21,51}   | t      |                    | Sun Jan 29 08:11:05 2012 | {create,delete,push,update,watch} | Something isn't working                    | {"name": "//_\\||team9;'-\"", "parent": {"id": 4534163, "name": "team1"}}
 3885 |    9.55 | {2.12,7.09,9.66}       | enhancement      | {51,100,210} | f      |                    | Mon Jan 29 08:11:05 2001 | {create,delete,push,update,watch} | New feature or request                     | {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}}
 3887 |   59.54 | {4.1,12.12,92.6}       | help wanted      | {12,43,155}  | t      | not valid          | Mon Jan 29 08:11:05 2001 | {create,delete,push,update,watch} | Extra attention is needed                  | {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
  895 |   920.1 | {-2.12,2.4,9.23}       | wontfix          | {25,55,255}  | t      |                    | Wed Jan 29 08:11:05 2020 | {create,delete,push,update,watch} | This will not be worked on                 | {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 2891 |   45.97 | {-2.12,43.09,121.3}    | invalid          | {11,121,151} | t      |                    | Thu Jan 29 08:11:05 2009 | {create,delete,push,update,watch} | This doesn't seem right                    | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  274 | 748.556 | {3.4,4.4,43.09}        | question         | {31,151,211} | t      | invalid            | Wed Jan 29 08:11:05 2020 | {create,delete,push,update,watch} | Further information is requested           | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  273 |   55.22 | {-2.12,4.63,63.09}     | duplicate        | {12,43,121}  | t      |                    | Sat Jan 29 08:11:05 2011 | {create,delete,push,update,watch} | This issue or pull request already exists  | {"name": "team1", "parent": null}
 2747 |  -5.636 | {-2.12,34.34,43.09}    | documentation    | {51,112,241} | f      |                    | Fri Jan 29 08:11:05 2021 | {create,delete,push,update,watch} | Improvements or additions to documentation | {"name": "=-~@030-team8", "parent": {"id": 4538778, "name": "team3"}}
(9 rows)

--Testcase 261:
EXPLAIN VERBOSE 
SELECT id, name, score, numbers, color FROM mixed_types;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..128.60 rows=620 width=108)
   Output: id, name, score, numbers, color
   Remote SQL: SELECT id, score, numbers, name, color FROM mixed_types
(3 rows)

--Testcase 262:
SELECT id, name, score, numbers, color FROM mixed_types;
  id  |       name       |  score  |        numbers         |    color     
------+------------------+---------+------------------------+--------------
 2889 | good first issue |    45.2 | {-2.12,97.09,121.2}    | {51,66,100}
  212 | bug              |  656.32 | {-2.12,43.09,121.3656} | {10,21,51}
 3885 | enhancement      |    9.55 | {2.12,7.09,9.66}       | {51,100,210}
 3887 | help wanted      |   59.54 | {4.1,12.12,92.6}       | {12,43,155}
  895 | wontfix          |   920.1 | {-2.12,2.4,9.23}       | {25,55,255}
 2891 | invalid          |   45.97 | {-2.12,43.09,121.3}    | {11,121,151}
  274 | question         | 748.556 | {3.4,4.4,43.09}        | {31,151,211}
  273 | duplicate        |   55.22 | {-2.12,4.63,63.09}     | {12,43,121}
 2747 | documentation    |  -5.636 | {-2.12,34.34,43.09}    | {51,112,241}
(9 rows)

--Testcase 263:
EXPLAIN VERBOSE 
SELECT id, name, description, active, active_lock_reason, teams FROM mixed_types;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..125.63 rows=521 width=133)
   Output: id, name, description, active, active_lock_reason, teams
   Remote SQL: SELECT id, name, active, active_lock_reason, description, teams FROM mixed_types
(3 rows)

--Testcase 264:
SELECT id, name, description, active, active_lock_reason, teams FROM mixed_types;
  id  |       name       |                description                 | active | active_lock_reason |                                   teams                                    
------+------------------+--------------------------------------------+--------+--------------------+----------------------------------------------------------------------------
 2889 | good first issue | Good for newcomers                         | f      |                    | {"name": "team2", "parent": {"id": 4534163, "name": "team1"}}
  212 | bug              | Something isn't working                    | t      |                    | {"name": "//_\\||team9;'-\"", "parent": {"id": 4534163, "name": "team1"}}
 3885 | enhancement      | New feature or request                     | f      |                    | {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}}
 3887 | help wanted      | Extra attention is needed                  | t      | not valid          | {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
  895 | wontfix          | This will not be worked on                 | t      |                    | {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 2891 | invalid          | This doesn't seem right                    | t      |                    | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  274 | question         | Further information is requested           | t      | invalid            | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  273 | duplicate        | This issue or pull request already exists  | t      |                    | {"name": "team1", "parent": null}
 2747 | documentation    | Improvements or additions to documentation | f      |                    | {"name": "=-~@030-team8", "parent": {"id": 4538778, "name": "team3"}}
(9 rows)

--Testcase 265:
EXPLAIN VERBOSE 
SELECT numbers, numbers[0], numbers[1], numbers[2] FROM mixed_types;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..153.86 rows=1462 width=56)
   Output: numbers, numbers[0], numbers[1], numbers[2]
   Remote SQL: SELECT numbers FROM mixed_types
(3 rows)

--Testcase 266:
SELECT numbers, numbers[0], numbers[1], numbers[2] FROM mixed_types;
        numbers         | numbers | numbers | numbers 
------------------------+---------+---------+---------
 {-2.12,97.09,121.2}    |         |   -2.12 |   97.09
 {-2.12,43.09,121.3656} |         |   -2.12 |   43.09
 {2.12,7.09,9.66}       |         |    2.12 |    7.09
 {4.1,12.12,92.6}       |         |     4.1 |   12.12
 {-2.12,2.4,9.23}       |         |   -2.12 |     2.4
 {-2.12,43.09,121.3}    |         |   -2.12 |   43.09
 {3.4,4.4,43.09}        |         |     3.4 |     4.4
 {-2.12,4.63,63.09}     |         |   -2.12 |    4.63
 {-2.12,34.34,43.09}    |         |   -2.12 |   34.34
(9 rows)

--Testcase 267:
EXPLAIN VERBOSE 
SELECT color, events, color[0], events[0], events[3] FROM mixed_types;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..137.90 rows=930 width=132)
   Output: color, events, color[0], events[0], events[3]
   Remote SQL: SELECT color, events FROM mixed_types
(3 rows)

--Testcase 268:
SELECT color, events, color[0], events[0], events[3] FROM mixed_types;
    color     |              events               | color | events | events 
--------------+-----------------------------------+-------+--------+--------
 {51,66,100}  | {create,delete,push,update,watch} |       |        | push
 {10,21,51}   | {create,delete,push,update,watch} |       |        | push
 {51,100,210} | {create,delete,push,update,watch} |       |        | push
 {12,43,155}  | {create,delete,push,update,watch} |       |        | push
 {25,55,255}  | {create,delete,push,update,watch} |       |        | push
 {11,121,151} | {create,delete,push,update,watch} |       |        | push
 {31,151,211} | {create,delete,push,update,watch} |       |        | push
 {12,43,121}  | {create,delete,push,update,watch} |       |        | push
 {51,112,241} | {create,delete,push,update,watch} |       |        | push
(9 rows)

--Testcase 269:
EXPLAIN VERBOSE 
SELECT teams, teams->'name', teams->'parent'->'name', teams->'parent'->'id' FROM mixed_types;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..172.14 rows=1462 width=128)
   Output: teams, (teams -> 'name'::text), ((teams -> 'parent'::text) -> 'name'::text), ((teams -> 'parent'::text) -> 'id'::text)
   Remote SQL: SELECT teams FROM mixed_types
(3 rows)

--Testcase 270:
SELECT teams, teams->'name', teams->'parent'->'name', teams->'parent'->'id' FROM mixed_types;
                                   teams                                    |      ?column?       |      ?column?       | ?column? 
----------------------------------------------------------------------------+---------------------+---------------------+----------
 {"name": "team2", "parent": {"id": 4534163, "name": "team1"}}              | "team2"             | "team1"             | 4534163
 {"name": "//_\\||team9;'-\"", "parent": {"id": 4534163, "name": "team1"}}  | "//_\\||team9;'-\"" | "team1"             | 4534163
 {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}} | "team10"            | "//_\\||team9;'-\"" | 4579782
 {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}      | "team3"             | "=-~@030-team8"     | 4534163
 {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}      | "team6"             | "=-~@030-team8"     | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}              | "team4"             | "team1"             | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}              | "team4"             | "team1"             | 4534163
 {"name": "team1", "parent": null}                                          | "team1"             |                     | 
 {"name": "=-~@030-team8", "parent": {"id": 4538778, "name": "team3"}}      | "=-~@030-team8"     | "team3"             | 4538778
(9 rows)

--Testcase 271:
EXPLAIN VERBOSE 
SELECT teams, teams->>'name', teams->'parent'->>'name', teams->'parent'->>'id' FROM mixed_types;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..172.14 rows=1462 width=128)
   Output: teams, (teams ->> 'name'::text), ((teams -> 'parent'::text) ->> 'name'::text), ((teams -> 'parent'::text) ->> 'id'::text)
   Remote SQL: SELECT teams FROM mixed_types
(3 rows)

--Testcase 272:
SELECT teams, teams->>'name', teams->'parent'->>'name', teams->'parent'->>'id' FROM mixed_types;
                                   teams                                    |    ?column?     |    ?column?     | ?column? 
----------------------------------------------------------------------------+-----------------+-----------------+----------
 {"name": "team2", "parent": {"id": 4534163, "name": "team1"}}              | team2           | team1           | 4534163
 {"name": "//_\\||team9;'-\"", "parent": {"id": 4534163, "name": "team1"}}  | //_\||team9;'-" | team1           | 4534163
 {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}} | team10          | //_\||team9;'-" | 4579782
 {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}      | team3           | =-~@030-team8   | 4534163
 {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}      | team6           | =-~@030-team8   | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}              | team4           | team1           | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}              | team4           | team1           | 4534163
 {"name": "team1", "parent": null}                                          | team1           |                 | 
 {"name": "=-~@030-team8", "parent": {"id": 4538778, "name": "team3"}}      | =-~@030-team8   | team3           | 4538778
(9 rows)

--Testcase 273:
EXPLAIN VERBOSE 
SELECT active AND true, active_lock_reason IS NULL FROM mixed_types; 
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..153.11 rows=1437 width=2)
   Output: active, (active_lock_reason IS NULL)
   Remote SQL: SELECT active, active_lock_reason FROM mixed_types
(3 rows)

--Testcase 274:
SELECT active AND true, active_lock_reason IS NULL FROM mixed_types; 
 ?column? | ?column? 
----------+----------
 f        | t
 t        | t
 f        | f
 t        | f
 t        | f
 t        | t
 t        | f
 t        | t
 f        | t
(9 rows)

--Testcase 275:
EXPLAIN VERBOSE 
SELECT id, name || description, active_lock_reason, color FROM mixed_types;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..127.06 rows=525 width=100)
   Output: id, (name || description), active_lock_reason, color
   Remote SQL: SELECT id, name, color, active_lock_reason, description FROM mixed_types
(3 rows)

--Testcase 276:
SELECT id, name || description, active_lock_reason, color FROM mixed_types;
  id  |                        ?column?                         | active_lock_reason |    color     
------+---------------------------------------------------------+--------------------+--------------
 2889 | good first issueGood for newcomers                      |                    | {51,66,100}
  212 | bugSomething isn't working                              |                    | {10,21,51}
 3885 | enhancementNew feature or request                       |                    | {51,100,210}
 3887 | help wantedExtra attention is needed                    | not valid          | {12,43,155}
  895 | wontfixThis will not be worked on                       |                    | {25,55,255}
 2891 | invalidThis doesn't seem right                          |                    | {11,121,151}
  274 | questionFurther information is requested                | invalid            | {31,151,211}
  273 | duplicateThis issue or pull request already exists      |                    | {12,43,121}
 2747 | documentationImprovements or additions to documentation |                    | {51,112,241}
(9 rows)

--Testcase 277:
EXPLAIN VERBOSE 
SELECT id + score, color[0]/numbers[0], color[1]-numbers[1], color[2]*numbers[2] FROM mixed_types;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..150.95 rows=819 width=32)
   Output: ((id)::double precision + score), ((color[0])::double precision / numbers[0]), ((color[1])::double precision - numbers[1]), ((color[2])::double precision * numbers[2])
   Remote SQL: SELECT id, score, numbers, color FROM mixed_types
(3 rows)

--Testcase 278:
SELECT id + score, color[0]/numbers[0], color[1]-numbers[1], color[2]*numbers[2] FROM mixed_types;
 ?column? | ?column? |      ?column?      |      ?column?      
----------+----------+--------------------+--------------------
   2934.2 |          |              53.12 | 6407.9400000000005
   868.32 |          | 12.120000000000001 |  904.8900000000001
  3894.55 |          |              48.88 |                709
  3946.54 |          |                7.9 |             521.16
   1815.1 |          |              27.12 |                132
  2936.97 |          | 13.120000000000001 |            5213.89
 1022.556 |          |               27.6 |  664.4000000000001
   328.22 |          | 14.120000000000001 |             199.09
 2741.364 |          |              53.12 | 3846.0800000000004
(9 rows)

--Testcase 279:
EXPLAIN VERBOSE 
SELECT * FROM mixed_types WHERE id <> 0;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..119.84 rows=302 width=245)
   Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
   Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM mixed_types WHERE (id <> 0)
(3 rows)

--Testcase 280:
SELECT * FROM mixed_types WHERE id <> 0;
  id  |  score  |        numbers         |       name       |    color     | active | active_lock_reason |        created_at        |              events               |                description                 |                                   teams                                    
------+---------+------------------------+------------------+--------------+--------+--------------------+--------------------------+-----------------------------------+--------------------------------------------+----------------------------------------------------------------------------
 2889 |    45.2 | {-2.12,97.09,121.2}    | good first issue | {51,66,100}  | f      |                    | Fri Jan 29 08:11:05 2010 | {create,delete,push,update,watch} | Good for newcomers                         | {"name": "team2", "parent": {"id": 4534163, "name": "team1"}}
  212 |  656.32 | {-2.12,43.09,121.3656} | bug              | {10,21,51}   | t      |                    | Sun Jan 29 08:11:05 2012 | {create,delete,push,update,watch} | Something isn't working                    | {"name": "//_\\||team9;'-\"", "parent": {"id": 4534163, "name": "team1"}}
 3885 |    9.55 | {2.12,7.09,9.66}       | enhancement      | {51,100,210} | f      |                    | Mon Jan 29 08:11:05 2001 | {create,delete,push,update,watch} | New feature or request                     | {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}}
 3887 |   59.54 | {4.1,12.12,92.6}       | help wanted      | {12,43,155}  | t      | not valid          | Mon Jan 29 08:11:05 2001 | {create,delete,push,update,watch} | Extra attention is needed                  | {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
  895 |   920.1 | {-2.12,2.4,9.23}       | wontfix          | {25,55,255}  | t      |                    | Wed Jan 29 08:11:05 2020 | {create,delete,push,update,watch} | This will not be worked on                 | {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 2891 |   45.97 | {-2.12,43.09,121.3}    | invalid          | {11,121,151} | t      |                    | Thu Jan 29 08:11:05 2009 | {create,delete,push,update,watch} | This doesn't seem right                    | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  274 | 748.556 | {3.4,4.4,43.09}        | question         | {31,151,211} | t      | invalid            | Wed Jan 29 08:11:05 2020 | {create,delete,push,update,watch} | Further information is requested           | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
  273 |   55.22 | {-2.12,4.63,63.09}     | duplicate        | {12,43,121}  | t      |                    | Sat Jan 29 08:11:05 2011 | {create,delete,push,update,watch} | This issue or pull request already exists  | {"name": "team1", "parent": null}
 2747 |  -5.636 | {-2.12,34.34,43.09}    | documentation    | {51,112,241} | f      |                    | Fri Jan 29 08:11:05 2021 | {create,delete,push,update,watch} | Improvements or additions to documentation | {"name": "=-~@030-team8", "parent": {"id": 4538778, "name": "team3"}}
(9 rows)

--Testcase 281:
EXPLAIN VERBOSE 
SELECT name, numbers, color FROM mixed_types WHERE id NOT IN (1212, 21212, 38239);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..132.82 rows=672 width=96)
   Output: name, numbers, color
   Remote SQL: SELECT numbers, name, color FROM mixed_types WHERE id NOT IN (1212, 21212, 38239)
(3 rows)

--Testcase 282:
SELECT name, numbers, color FROM mixed_types WHERE id NOT IN (1212, 21212, 38239);
       name       |        numbers         |    color     
------------------+------------------------+--------------
 good first issue | {-2.12,97.09,121.2}    | {51,66,100}
 bug              | {-2.12,43.09,121.3656} | {10,21,51}
 enhancement      | {2.12,7.09,9.66}       | {51,100,210}
 help wanted      | {4.1,12.12,92.6}       | {12,43,155}
 wontfix          | {-2.12,2.4,9.23}       | {25,55,255}
 invalid          | {-2.12,43.09,121.3}    | {11,121,151}
 question         | {3.4,4.4,43.09}        | {31,151,211}
 duplicate        | {-2.12,4.63,63.09}     | {12,43,121}
 documentation    | {-2.12,34.34,43.09}    | {51,112,241}
(9 rows)

--Testcase 283:
EXPLAIN VERBOSE 
SELECT teams, teams->'name', teams->'parent'->'name', teams->'parent'->'id' FROM mixed_types WHERE score IN (59.54, 45.97, 748.556);
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..130.82 rows=22 width=128)
   Output: teams, (teams -> 'name'::text), ((teams -> 'parent'::text) -> 'name'::text), ((teams -> 'parent'::text) -> 'id'::text)
   Remote SQL: SELECT teams FROM mixed_types WHERE score IN (59.54, 45.97, 748.556)
(3 rows)

--Testcase 284:
SELECT teams, teams->'name', teams->'parent'->'name', teams->'parent'->'id' FROM mixed_types WHERE score IN (59.54, 45.97, 748.556);
                                 teams                                 | ?column? |    ?column?     | ?column? 
-----------------------------------------------------------------------+----------+-----------------+----------
 {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}} | "team3"  | "=-~@030-team8" | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}         | "team4"  | "team1"         | 4534163
 {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}         | "team4"  | "team1"         | 4534163
(3 rows)

--Testcase 285:
EXPLAIN VERBOSE 
SELECT teams->>'name', teams->'parent'->>'name', teams->'parent'->>'id' FROM mixed_types WHERE score >= -1221.331;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..144.10 rows=487 width=96)
   Output: (teams ->> 'name'::text), ((teams -> 'parent'::text) ->> 'name'::text), ((teams -> 'parent'::text) ->> 'id'::text)
   Remote SQL: SELECT teams FROM mixed_types WHERE (score >= -1221.331)
(3 rows)

--Testcase 286:
SELECT teams->>'name', teams->'parent'->>'name', teams->'parent'->>'id' FROM mixed_types WHERE score >= -1221.331;
    ?column?     |    ?column?     | ?column? 
-----------------+-----------------+----------
 team2           | team1           | 4534163
 //_\||team9;'-" | team1           | 4534163
 team10          | //_\||team9;'-" | 4579782
 team3           | =-~@030-team8   | 4534163
 team6           | =-~@030-team8   | 4534163
 team4           | team1           | 4534163
 team4           | team1           | 4534163
 team1           |                 | 
 =-~@030-team8   | team3           | 4538778
(9 rows)

--Testcase 287:
EXPLAIN VERBOSE 
SELECT active AND true, active OR FALSE, active_lock_reason IS NOT NULL FROM mixed_types WHERE score <= 2112.12;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..137.54 rows=479 width=3)
   Output: active, active, (active_lock_reason IS NOT NULL)
   Remote SQL: SELECT active, active_lock_reason FROM mixed_types WHERE (score <= 2112.12)
(3 rows)

--Testcase 288:
SELECT active AND true, active OR FALSE, active_lock_reason IS NOT NULL FROM mixed_types WHERE score <= 2112.12;
 ?column? | ?column? | ?column? 
----------+----------+----------
 f        | f        | f
 t        | t        | f
 f        | f        | t
 t        | t        | t
 t        | t        | t
 t        | t        | f
 t        | t        | t
 t        | t        | f
 f        | f        | f
(9 rows)

--Testcase 289:
EXPLAIN VERBOSE 
SELECT id + color[0], id - color[1], id * color[2], id/color[0] FROM mixed_types WHERE color[0] != 0;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..167.94 rows=1358 width=16)
   Output: (id + color[0]), (id - color[1]), (id * color[2]), (id / color[0])
   Filter: (mixed_types.color[0] <> 0)
   Remote SQL: SELECT id, color FROM mixed_types
(4 rows)

--Testcase 290:
SELECT id + color[0], id - color[1], id * color[2], id/color[0] FROM mixed_types WHERE color[0] != 0;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
(0 rows)

--Testcase 291:
EXPLAIN VERBOSE 
SELECT numbers[0] + color[0], numbers[1] * color[1], numbers[2]/(color[2]+2) FROM mixed_types WHERE active_lock_reason IS NULL;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..119.49 rows=5 width=24)
   Output: (numbers[0] + (color[0])::double precision), (numbers[1] * (color[1])::double precision), (numbers[2] / ((color[2] + 2))::double precision)
   Remote SQL: SELECT numbers, color FROM mixed_types WHERE (active_lock_reason IS NULL)
(3 rows)

--Testcase 292:
SELECT numbers[0] + color[0], numbers[1] * color[1], numbers[2]/(color[2]+2) FROM mixed_types WHERE active_lock_reason IS NULL;
 ?column? |      ?column?       |      ?column?       
----------+---------------------+---------------------
          |             -108.12 |  1.4277941176470588
          | -21.200000000000003 |  1.8734782608695653
          |              -23.32 | 0.35032520325203254
          |              -25.44 | 0.10288888888888889
          |             -108.12 |  0.3012280701754386
(5 rows)

--Testcase 293:
EXPLAIN VERBOSE 
SELECT events[0] || events[1] || events[2], events[3] || events[4], score FROM mixed_types WHERE score > 0.5454;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..137.74 rows=427 width=72)
   Output: ((events[0] || events[1]) || events[2]), (events[3] || events[4]), score
   Remote SQL: SELECT score, events FROM mixed_types WHERE (score > 0.5454)
(3 rows)

--Testcase 294:
SELECT events[0] || events[1] || events[2], events[3] || events[4], score FROM mixed_types WHERE score > 0.5454;
 ?column? |  ?column?  |  score  
----------+------------+---------
          | pushupdate |    45.2
          | pushupdate |  656.32
          | pushupdate |    9.55
          | pushupdate |   59.54
          | pushupdate |   920.1
          | pushupdate |   45.97
          | pushupdate | 748.556
          | pushupdate |   55.22
(8 rows)

--Testcase 295:
EXPLAIN VERBOSE 
SELECT id + (teams->'parent'->>'id')::bigint, name, description FROM mixed_types WHERE name ||  description != 'Q#J(@AWJE)';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..141.31 rows=657 width=72)
   Output: (id + (((teams -> 'parent'::text) ->> 'id'::text))::bigint), name, description
   Filter: ((mixed_types.name || mixed_types.description) <> 'Q#J(@AWJE)'::text)
   Remote SQL: SELECT id, name, description, teams FROM mixed_types
(4 rows)

--Testcase 296:
SELECT id + (teams->'parent'->>'id')::bigint, name, description FROM mixed_types WHERE name ||  description != 'Q#J(@AWJE)';
 ?column? |       name       |                description                 
----------+------------------+--------------------------------------------
  4537052 | good first issue | Good for newcomers
  4534375 | bug              | Something isn't working
  4583667 | enhancement      | New feature or request
  4538050 | help wanted      | Extra attention is needed
  4535058 | wontfix          | This will not be worked on
  4537054 | invalid          | This doesn't seem right
  4534437 | question         | Further information is requested
          | duplicate        | This issue or pull request already exists
  4541525 | documentation    | Improvements or additions to documentation
(9 rows)

--Testcase 297:
EXPLAIN VERBOSE 
SELECT 1, '4aw0', color[0], events[0], events[3], events[4] FROM mixed_types WHERE events IS NOT NULL AND array_length(events, 1) > 4;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.mixed_types  (cost=100.00..142.43 rows=308 width=136)
   Output: 1, '4aw0'::text, color[0], events[0], events[3], events[4]
   Filter: (array_length(mixed_types.events, 1) > 4)
   Remote SQL: SELECT color, events FROM mixed_types WHERE (events IS NOT NULL)
(4 rows)

--Testcase 298:
SELECT 1, '4aw0', color[0], events[0], events[3], events[4] FROM mixed_types WHERE events IS NOT NULL AND array_length(events, 1) > 4;
 ?column? | ?column? | color | events | events | events 
----------+----------+-------+--------+--------+--------
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
        1 | 4aw0     |       |        | push   | update
(9 rows)

--Testcase 299:
EXPLAIN VERBOSE 
SELECT name FROM (SELECT name FROM mixed_types WHERE id > 0 OR score < 0) tbl LIMIT 5 OFFSET 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit  (cost=100.06..100.36 rows=5 width=32)
   Output: mixed_types.name
   ->  Foreign Scan on public.mixed_types  (cost=100.00..148.17 rows=812 width=32)
         Output: mixed_types.name
         Remote SQL: SELECT name FROM mixed_types WHERE ((id > 0) OR (score < 0))
(5 rows)

--Testcase 300:
SELECT name FROM (SELECT name FROM mixed_types WHERE id > 0 OR score < 0) tbl LIMIT 5 OFFSET 1;
    name     
-------------
 bug
 enhancement
 help wanted
 wontfix
 invalid
(5 rows)

--Testcase 301:
EXPLAIN VERBOSE 
SELECT id FROM (SELECT id FROM mixed_types WHERE color[0] > 0) tbl LIMIT 5 OFFSET 0;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=100.00..100.54 rows=5 width=4)
   Output: mixed_types.id
   ->  Foreign Scan on public.mixed_types  (cost=100.00..205.06 rows=975 width=4)
         Output: mixed_types.id
         Filter: (mixed_types.color[0] > 0)
         Remote SQL: SELECT id, color FROM mixed_types
(6 rows)

--Testcase 302:
SELECT id FROM (SELECT id FROM mixed_types WHERE color[0] > 0) tbl LIMIT 5 OFFSET 0;
 id 
----
(0 rows)

--Testcase 303:
EXPLAIN VERBOSE 
SELECT score, id FROM (SELECT score, id FROM mixed_types WHERE color[0] > 0 AND numbers[0] > 0) tbl LIMIT ALL OFFSET 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit  (cost=100.35..189.62 rows=252 width=12)
   Output: mixed_types.score, mixed_types.id
   ->  Foreign Scan on public.mixed_types  (cost=100.00..189.62 rows=253 width=12)
         Output: mixed_types.score, mixed_types.id
         Filter: ((mixed_types.color[0] > 0) AND (mixed_types.numbers[0] > '0'::double precision))
         Remote SQL: SELECT id, score, numbers, color FROM mixed_types
(6 rows)

--Testcase 304:
SELECT score, id FROM (SELECT score, id FROM mixed_types WHERE color[0] > 0 AND numbers[0] > 0) tbl LIMIT ALL OFFSET 1;
 score | id 
-------+----
(0 rows)

--Testcase 305:
EXPLAIN VERBOSE 
SELECT color FROM (SELECT color FROM mixed_types WHERE name > '@#!S') tbl LIMIT NULL OFFSET 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit  (cost=100.12..157.50 rows=486 width=32)
   Output: mixed_types.color
   ->  Foreign Scan on public.mixed_types  (cost=100.00..157.50 rows=487 width=32)
         Output: mixed_types.color
         Filter: (mixed_types.name > '@#!S'::text)
         Remote SQL: SELECT name, color FROM mixed_types
(6 rows)

--Testcase 306:
SELECT color FROM (SELECT color FROM mixed_types WHERE name > '@#!S') tbl LIMIT NULL OFFSET 1;
 color 
-------
(0 rows)

--Testcase 307:
EXPLAIN VERBOSE 
SELECT events FROM (SELECT events FROM mixed_types WHERE id IN (3887, 2991, 2747, 895, 212)) tbl LIMIT 5 OFFSET 0;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit  (cost=100.00..104.66 rows=5 width=32)
   Output: mixed_types.events
   ->  Foreign Scan on public.mixed_types  (cost=100.00..134.50 rows=37 width=32)
         Output: mixed_types.events
         Remote SQL: SELECT events FROM mixed_types WHERE id IN (3887, 2991, 2747, 895, 212)
(5 rows)

--Testcase 308:
SELECT events FROM (SELECT events FROM mixed_types WHERE id IN (3887, 2991, 2747, 895, 212)) tbl LIMIT 5 OFFSET 0;
              events               
-----------------------------------
 {create,delete,push,update,watch}
 {create,delete,push,update,watch}
 {create,delete,push,update,watch}
 {create,delete,push,update,watch}
(4 rows)

--Testcase 309:
EXPLAIN VERBOSE 
SELECT teams FROM (SELECT teams FROM mixed_types WHERE active_lock_reason IS NOT NULL) tbl LIMIT 3 OFFSET 0;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit  (cost=100.00..100.11 rows=3 width=32)
   Output: mixed_types.teams
   ->  Foreign Scan on public.mixed_types  (cost=100.00..153.72 rows=1455 width=32)
         Output: mixed_types.teams
         Remote SQL: SELECT teams FROM mixed_types WHERE (active_lock_reason IS NOT NULL)
(5 rows)

--Testcase 310:
SELECT teams FROM (SELECT teams FROM mixed_types WHERE active_lock_reason IS NOT NULL) tbl LIMIT 3 OFFSET 0;
                                   teams                                    
----------------------------------------------------------------------------
 {"name": "team10", "parent": {"id": 4579782, "name": "//_\\||team9;'-\""}}
 {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
(3 rows)

--Testcase 311:
EXPLAIN VERBOSE 
SELECT numbers, teams FROM (SELECT numbers, teams FROM mixed_types WHERE active = true) tbl LIMIT 3 OFFSET 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit  (cost=100.08..100.33 rows=3 width=64)
   Output: mixed_types.numbers, mixed_types.teams
   ->  Foreign Scan on public.mixed_types  (cost=100.00..137.90 rows=465 width=64)
         Output: mixed_types.numbers, mixed_types.teams
         Filter: mixed_types.active
         Remote SQL: SELECT numbers, active, teams FROM mixed_types
(6 rows)

--Testcase 312:
SELECT numbers, teams FROM (SELECT numbers, teams FROM mixed_types WHERE active = true) tbl LIMIT 3 OFFSET 1;
       numbers       |                                 teams                                 
---------------------+-----------------------------------------------------------------------
 {4.1,12.12,92.6}    | {"name": "team3", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 {-2.12,2.4,9.23}    | {"name": "team6", "parent": {"id": 4534163, "name": "=-~@030-team8"}}
 {-2.12,43.09,121.3} | {"name": "team4", "parent": {"id": 4534163, "name": "team1"}}
(3 rows)

--Testcase 313:
EXPLAIN VERBOSE 
SELECT * FROM (SELECT * FROM mixed_types WHERE id > 0 AND color[0] > 0) tbl LIMIT 3 OFFSET 0;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100.00..101.46 rows=3 width=245)
   Output: mixed_types.id, mixed_types.score, mixed_types.numbers, mixed_types.name, mixed_types.color, mixed_types.active, mixed_types.active_lock_reason, mixed_types.created_at, mixed_types.events, mixed_types.description, mixed_types.teams
   ->  Foreign Scan on public.mixed_types  (cost=100.00..116.60 rows=34 width=245)
         Output: mixed_types.id, mixed_types.score, mixed_types.numbers, mixed_types.name, mixed_types.color, mixed_types.active, mixed_types.active_lock_reason, mixed_types.created_at, mixed_types.events, mixed_types.description, mixed_types.teams
         Filter: (mixed_types.color[0] > 0)
         Remote SQL: SELECT id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams FROM mixed_types WHERE (id > 0)
(6 rows)

--Testcase 314:
SELECT * FROM (SELECT * FROM mixed_types WHERE id > 0 AND color[0] > 0) tbl LIMIT 3 OFFSET 0;
 id | score | numbers | name | color | active | active_lock_reason | created_at | events | description | teams 
----+-------+---------+------+-------+--------+--------------------+------------+--------+-------------+-------
(0 rows)

--Testcase 315:
EXPLAIN VERBOSE 
SELECT 23, '2313', name FROM (SELECT * FROM mixed_types WHERE active = false) tbl LIMIT 3 OFFSET 0;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit  (cost=100.00..100.22 rows=3 width=68)
   Output: 23, '2313'::text, mixed_types.name
   ->  Foreign Scan on public.mixed_types  (cost=100.00..153.86 rows=731 width=68)
         Output: 23, '2313'::text, mixed_types.name
         Filter: (NOT mixed_types.active)
         Remote SQL: SELECT name, active FROM mixed_types
(6 rows)

--Testcase 316:
SELECT 23, '2313', name FROM (SELECT * FROM mixed_types WHERE active = false) tbl LIMIT 3 OFFSET 0;
 ?column? | ?column? |       name       
----------+----------+------------------
       23 | 2313     | good first issue
       23 | 2313     | enhancement
       23 | 2313     | documentation
(3 rows)

--Testcase 317:
EXPLAIN VERBOSE 
SELECT score + id, name || description FROM (SELECT score, id, name, description FROM mixed_types WHERE active_lock_reason IS NULL) tbl LIMIT 5 OFFSET 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100.00..118.30 rows=4 width=40)
   Output: ((mixed_types.score + (mixed_types.id)::double precision)), ((mixed_types.name || mixed_types.description))
   ->  Foreign Scan on public.mixed_types  (cost=100.00..118.30 rows=4 width=40)
         Output: (mixed_types.score + (mixed_types.id)::double precision), (mixed_types.name || mixed_types.description)
         Remote SQL: SELECT id, score, name, description FROM mixed_types WHERE (active_lock_reason IS NULL)
(5 rows)

--Testcase 318:
SELECT score + id, name || description FROM (SELECT score, id, name, description FROM mixed_types WHERE active_lock_reason IS NULL) tbl LIMIT 5 OFFSET 0;
 ?column? |                        ?column?                         
----------+---------------------------------------------------------
   2934.2 | good first issueGood for newcomers
   868.32 | bugSomething isn't working
  2936.97 | invalidThis doesn't seem right
   328.22 | duplicateThis issue or pull request already exists
 2741.364 | documentationImprovements or additions to documentation
(5 rows)

--Testcase 319:
EXPLAIN VERBOSE 
SELECT id, name FROM mixed_types WHERE id > 0 GROUP BY id, name ORDER BY id, name LIMIT 5;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143.41..143.43 rows=5 width=36)
   Output: id, name
   ->  Sort  (cost=143.41..143.88 rows=187 width=36)
         Output: id, name
         Sort Key: mixed_types.id, mixed_types.name
         ->  HashAggregate  (cost=138.44..140.31 rows=187 width=36)
               Output: id, name
               Group Key: mixed_types.id, mixed_types.name
               ->  Foreign Scan on public.mixed_types  (cost=100.00..136.16 rows=455 width=36)
                     Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
                     Remote SQL: SELECT id, name FROM mixed_types WHERE (id > 0)
(11 rows)

--Testcase 320:
SELECT id, name FROM mixed_types WHERE id > 0 GROUP BY id, name ORDER BY id, name LIMIT 5;
  id  |     name      
------+---------------
  212 | bug
  273 | duplicate
  274 | question
  895 | wontfix
 2747 | documentation
(5 rows)

--Testcase 321:
EXPLAIN VERBOSE 
SELECT color[0]+color[1]*color[2], numbers[0]/numbers[1]+numbers[2], score FROM mixed_types WHERE numbers[1] <> 0 GROUP BY color, numbers, score, id ORDER BY id LIMIT ALL;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=156.41..156.91 rows=200 width=88)
   Output: ((color[0] + (color[1] * color[2]))), (((numbers[0] / numbers[1]) + numbers[2])), score, id, color, numbers
   Sort Key: mixed_types.id
   ->  HashAggregate  (cost=144.77..148.77 rows=200 width=88)
         Output: (color[0] + (color[1] * color[2])), ((numbers[0] / numbers[1]) + numbers[2]), score, id, color, numbers
         Group Key: mixed_types.id, mixed_types.color, mixed_types.numbers, mixed_types.score
         ->  Foreign Scan on public.mixed_types  (cost=100.00..136.62 rows=815 width=76)
               Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
               Filter: (mixed_types.numbers[1] <> '0'::double precision)
               Remote SQL: SELECT id, score, numbers, color FROM mixed_types
(10 rows)

--Testcase 322:
SELECT color[0]+color[1]*color[2], numbers[0]/numbers[1]+numbers[2], score FROM mixed_types WHERE numbers[1] <> 0 GROUP BY color, numbers, score, id ORDER BY id LIMIT ALL;
 ?column? | ?column? |  score  
----------+----------+---------
          |          |  656.32
          |          |   55.22
          |          | 748.556
          |          |   920.1
          |          |  -5.636
          |          |    45.2
          |          |   45.97
          |          |    9.55
          |          |   59.54
(9 rows)

--Testcase 323:
EXPLAIN VERBOSE 
SELECT (teams->'parent'->>'id')::bigint/numbers[0], teams->'parent'->>'name' FROM mixed_types WHERE numbers[0] > 0 GROUP BY teams, numbers ORDER BY teams->'parent'->>'name' LIMIT 3;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149.07..149.08 rows=3 width=104)
   Output: ((((((teams -> 'parent'::text) ->> 'id'::text))::bigint)::double precision / numbers[0])), (((teams -> 'parent'::text) ->> 'name'::text)), teams, numbers
   ->  Sort  (cost=149.07..149.50 rows=170 width=104)
         Output: ((((((teams -> 'parent'::text) ->> 'id'::text))::bigint)::double precision / numbers[0])), (((teams -> 'parent'::text) ->> 'name'::text)), teams, numbers
         Sort Key: (((mixed_types.teams -> 'parent'::text) ->> 'name'::text))
         ->  HashAggregate  (cost=141.78..146.88 rows=170 width=104)
               Output: (((((teams -> 'parent'::text) ->> 'id'::text))::bigint)::double precision / numbers[0]), ((teams -> 'parent'::text) ->> 'name'::text), teams, numbers
               Group Key: mixed_types.teams, mixed_types.numbers
               ->  Foreign Scan on public.mixed_types  (cost=100.00..140.23 rows=310 width=64)
                     Output: id, score, numbers, name, color, active, active_lock_reason, created_at, events, description, teams
                     Filter: (mixed_types.numbers[0] > '0'::double precision)
                     Remote SQL: SELECT numbers, teams FROM mixed_types
(12 rows)

--Testcase 324:
SELECT (teams->'parent'->>'id')::bigint/numbers[0], teams->'parent'->>'name' FROM mixed_types WHERE numbers[0] > 0 GROUP BY teams, numbers ORDER BY teams->'parent'->>'name' LIMIT 3;
 ?column? | ?column? 
----------+----------
(0 rows)

--Testcase 325:
EXPLAIN VERBOSE 
SELECT avg((teams->'parent'->>'id')::bigint), sum(color[0]), avg(numbers[1]) FROM mixed_types WHERE active_lock_reason IS NULL GROUP BY name ORDER BY name LIMIT 5;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=115.46..115.58 rows=3 width=80)
   Output: (avg((((teams -> 'parent'::text) ->> 'id'::text))::bigint)), (sum(color[0])), (avg(numbers[1])), name
   ->  GroupAggregate  (cost=115.46..115.58 rows=3 width=80)
         Output: avg((((teams -> 'parent'::text) ->> 'id'::text))::bigint), sum(color[0]), avg(numbers[1]), name
         Group Key: mixed_types.name
         ->  Sort  (cost=115.46..115.47 rows=3 width=128)
               Output: name, teams, color, numbers
               Sort Key: mixed_types.name
               ->  Foreign Scan on public.mixed_types  (cost=100.00..115.44 rows=3 width=128)
                     Output: name, teams, color, numbers
                     Remote SQL: SELECT numbers, name, color, teams FROM mixed_types WHERE (active_lock_reason IS NULL)
(11 rows)

--Testcase 326:
SELECT avg((teams->'parent'->>'id')::bigint), sum(color[0]), avg(numbers[1]) FROM mixed_types WHERE active_lock_reason IS NULL GROUP BY name ORDER BY name LIMIT 5;
         avg          | sum |  avg  
----------------------+-----+-------
 4534163.000000000000 |     | -2.12
 4538778.000000000000 |     | -2.12
                      |     | -2.12
 4534163.000000000000 |     | -2.12
 4534163.000000000000 |     | -2.12
(5 rows)

--Testcase 327:
EXPLAIN VERBOSE 
SELECT id, name, description FROM mixed_types WHERE id IN (SELECT id FROM mixed_types WHERE active_lock_reason IS NULL) GROUP BY name, description, id ORDER BY name LIMIT 5;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=281.64..281.69 rows=5 width=68)
   Output: mixed_types.id, mixed_types.name, mixed_types.description
   ->  Group  (cost=281.64..282.31 rows=67 width=68)
         Output: mixed_types.id, mixed_types.name, mixed_types.description
         Group Key: mixed_types.name, mixed_types.description, mixed_types.id
         ->  Sort  (cost=281.64..281.80 rows=67 width=68)
               Output: mixed_types.id, mixed_types.name, mixed_types.description
               Sort Key: mixed_types.name, mixed_types.description, mixed_types.id
               ->  Hash Semi Join  (cost=239.74..279.60 rows=67 width=68)
                     Output: mixed_types.id, mixed_types.name, mixed_types.description
                     Hash Cond: (mixed_types.id = mixed_types_1.id)
                     ->  Foreign Scan on public.mixed_types  (cost=100.00..136.70 rows=890 width=68)
                           Output: mixed_types.id, mixed_types.score, mixed_types.numbers, mixed_types.name, mixed_types.color, mixed_types.active, mixed_types.active_lock_reason, mixed_types.created_at, mixed_types.events, mixed_types.description, mixed_types.teams
                           Remote SQL: SELECT id, name, description FROM mixed_types
                     ->  Hash  (cost=139.55..139.55 rows=15 width=4)
                           Output: mixed_types_1.id
                           ->  Foreign Scan on public.mixed_types mixed_types_1  (cost=100.00..139.55 rows=15 width=4)
                                 Output: mixed_types_1.id
                                 Remote SQL: SELECT id FROM mixed_types WHERE (active_lock_reason IS NULL)
(19 rows)

--Testcase 328:
SELECT id, name, description FROM mixed_types WHERE id IN (SELECT id FROM mixed_types WHERE active_lock_reason IS NULL) GROUP BY name, description, id ORDER BY name LIMIT 5;
  id  |       name       |                description                 
------+------------------+--------------------------------------------
  212 | bug              | Something isn't working
 2747 | documentation    | Improvements or additions to documentation
  273 | duplicate        | This issue or pull request already exists
 2889 | good first issue | Good for newcomers
 2891 | invalid          | This doesn't seem right
(5 rows)

--Testcase 329:
EXPLAIN VERBOSE 
SELECT json_agg((name, '!@!*')), jsonb_agg((name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23') FROM mixed_types WHERE description IS NOT NULL GROUP BY name, description ORDER BY description LIMIT 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179.99..180.09 rows=1 width=192)
   Output: (json_agg(ROW(name, '!@!*'))), (jsonb_agg(ROW(name, 'varr'))), (json_object_agg(id, 'x')), (jsonb_object_agg(id, '23')), description, name
   ->  GroupAggregate  (cost=179.99..199.50 rows=200 width=192)
         Output: json_agg(ROW(name, '!@!*')), jsonb_agg(ROW(name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23'), description, name
         Group Key: mixed_types.description, mixed_types.name
         ->  Sort  (cost=179.99..182.21 rows=886 width=68)
               Output: description, name, id
               Sort Key: mixed_types.description, mixed_types.name
               ->  Foreign Scan on public.mixed_types  (cost=100.00..136.62 rows=886 width=68)
                     Output: description, name, id
                     Remote SQL: SELECT id, name, description FROM mixed_types WHERE (description IS NOT NULL)
(11 rows)

--Testcase 330:
SELECT json_agg((name, '!@!*')), jsonb_agg((name, 'varr')), json_object_agg(id, 'x'), jsonb_object_agg(id, '23') FROM mixed_types WHERE description IS NOT NULL GROUP BY name, description ORDER BY description LIMIT 1;
              json_agg              |               jsonb_agg               | json_object_agg  | jsonb_object_agg 
------------------------------------+---------------------------------------+------------------+------------------
 [{"f1":"help wanted","f2":"!@!*"}] | [{"f1": "help wanted", "f2": "varr"}] | { "3887" : "x" } | {"3887": "23"}
(1 row)

--Testcase 331:
EXPLAIN VERBOSE 
SELECT active_lock_reason, active, score FROM mixed_types WHERE score <> ALL(SELECT id FROM mixed_types) GROUP BY active, active_lock_reason, score ORDER BY score LIMIT 5;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75686.52..75686.60 rows=5 width=41)
   Output: mixed_types.active_lock_reason, mixed_types.active, mixed_types.score
   ->  Group  (cost=75686.52..75692.82 rows=394 width=41)
         Output: mixed_types.active_lock_reason, mixed_types.active, mixed_types.score
         Group Key: mixed_types.score, mixed_types.active, mixed_types.active_lock_reason
         ->  Sort  (cost=75686.52..75688.09 rows=630 width=41)
               Output: mixed_types.active_lock_reason, mixed_types.active, mixed_types.score
               Sort Key: mixed_types.score, mixed_types.active, mixed_types.active_lock_reason
               ->  Foreign Scan on public.mixed_types  (cost=200.00..75657.23 rows=630 width=41)
                     Output: mixed_types.active_lock_reason, mixed_types.active, mixed_types.score
                     Filter: (SubPlan 1)
                     Remote SQL: SELECT score, active, active_lock_reason FROM mixed_types
                     SubPlan 1
                       ->  Materialize  (cost=100.00..212.38 rows=2925 width=4)
                             Output: mixed_types_1.id
                             ->  Foreign Scan on public.mixed_types mixed_types_1  (cost=100.00..197.75 rows=2925 width=4)
                                   Output: mixed_types_1.id
                                   Remote SQL: SELECT id FROM mixed_types
(18 rows)

--Testcase 332:
SELECT active_lock_reason, active, score FROM mixed_types WHERE score <> ALL(SELECT id FROM mixed_types) GROUP BY active, active_lock_reason, score ORDER BY score LIMIT 5;
 active_lock_reason | active | score  
--------------------+--------+--------
                    | f      | -5.636
                    | f      |   9.55
                    | f      |   45.2
                    | t      |  45.97
                    | t      |  55.22
(5 rows)

--Testcase 333:
EXPLAIN VERBOSE 
SELECT color[0], color[1], numbers[0], numbers[1] FROM mixed_types WHERE events[0] != 'DELETE' GROUP BY color[0], color[1], numbers[0], numbers[1] ORDER BY color[0], color[1], numbers[0], numbers[1] LIMIT 5;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154.80..154.81 rows=5 width=24)
   Output: (color[0]), (color[1]), (numbers[0]), (numbers[1])
   ->  Sort  (cost=154.80..155.30 rows=200 width=24)
         Output: (color[0]), (color[1]), (numbers[0]), (numbers[1])
         Sort Key: (mixed_types.color[0]), (mixed_types.color[1]), (mixed_types.numbers[0]), (mixed_types.numbers[1])
         ->  HashAggregate  (cost=149.48..151.48 rows=200 width=24)
               Output: (color[0]), (color[1]), (numbers[0]), (numbers[1])
               Group Key: mixed_types.color[0], mixed_types.color[1], mixed_types.numbers[0], mixed_types.numbers[1]
               ->  Foreign Scan on public.mixed_types  (cost=100.00..140.23 rows=925 width=24)
                     Output: color[0], color[1], numbers[0], numbers[1]
                     Filter: (mixed_types.events[0] <> 'DELETE'::text)
                     Remote SQL: SELECT numbers, color, events FROM mixed_types
(12 rows)

--Testcase 334:
SELECT color[0], color[1], numbers[0], numbers[1] FROM mixed_types WHERE events[0] != 'DELETE' GROUP BY color[0], color[1], numbers[0], numbers[1] ORDER BY color[0], color[1], numbers[0], numbers[1] LIMIT 5;
 color | color | numbers | numbers 
-------+-------+---------+---------
(0 rows)

--Testcase 335:
EXPLAIN VERBOSE 
SELECT numbers[0] + color[0], numbers[1] * color[1], numbers[2]/(color[2]+2) FROM mixed_types WHERE id > 0 GROUP BY id, color[0], color[1], color[2], numbers[0], numbers[1], numbers[2] ORDER BY id;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=143.02..143.44 rows=167 width=64)
   Output: (((numbers[0]) + ((color[0]))::double precision)), (((numbers[1]) * ((color[1]))::double precision)), (((numbers[2]) / (((color[2]) + 2))::double precision)), id, (color[0]), (color[1]), (color[2]), (numbers[0]), (numbers[1]), (numbers[2])
   Sort Key: mixed_types.id
   ->  HashAggregate  (cost=132.26..136.85 rows=167 width=64)
         Output: ((numbers[0]) + ((color[0]))::double precision), ((numbers[1]) * ((color[1]))::double precision), ((numbers[2]) / (((color[2]) + 2))::double precision), id, (color[0]), (color[1]), (color[2]), (numbers[0]), (numbers[1]), (numbers[2])
         Group Key: mixed_types.id, mixed_types.color[0], mixed_types.color[1], mixed_types.color[2], mixed_types.numbers[0], mixed_types.numbers[1], mixed_types.numbers[2]
         ->  Foreign Scan on public.mixed_types  (cost=100.00..127.06 rows=297 width=104)
               Output: id, color[0], color[1], color[2], numbers[0], numbers[1], numbers[2], numbers, color
               Remote SQL: SELECT id, numbers, color FROM mixed_types WHERE (id > 0)
(9 rows)

--Testcase 336:
SELECT numbers[0] + color[0], numbers[1] * color[1], numbers[2]/(color[2]+2) FROM mixed_types WHERE id > 0 GROUP BY id, color[0], color[1], color[2], numbers[0], numbers[1], numbers[2] ORDER BY id;
 ?column? |      ?column?       |       ?column?       
----------+---------------------+----------------------
          | -21.200000000000003 |   1.8734782608695653
          |              -25.44 |  0.10288888888888889
          |  105.39999999999999 | 0.028758169934640525
          |                 -53 | 0.042105263157894736
          |             -108.12 |   0.3012280701754386
          |             -108.12 |   1.4277941176470588
          |              -23.32 |  0.35032520325203254
          |              108.12 |  0.06950980392156862
          |  49.199999999999996 |   0.2693333333333333
(9 rows)

--Testcase 337:
EXPLAIN VERBOSE 
SELECT score, id FROM (SELECT score, id, active_lock_reason FROM mixed_types WHERE color[0] > 0 AND numbers[0] > 0) tbl WHERE tbl.active_lock_reason IS NULL GROUP BY score, id ORDER BY score, id;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Group  (cost=144.31..144.32 rows=1 width=12)
   Output: mixed_types.score, mixed_types.id
   Group Key: mixed_types.score, mixed_types.id
   ->  Sort  (cost=144.31..144.32 rows=1 width=12)
         Output: mixed_types.score, mixed_types.id
         Sort Key: mixed_types.score, mixed_types.id
         ->  Foreign Scan on public.mixed_types  (cost=100.00..144.31 rows=1 width=12)
               Output: mixed_types.score, mixed_types.id
               Filter: ((mixed_types.color[0] > 0) AND (mixed_types.numbers[0] > '0'::double precision))
               Remote SQL: SELECT id, score, numbers, color FROM mixed_types WHERE (active_lock_reason IS NULL)
(10 rows)

--Testcase 338:
SELECT score, id FROM (SELECT score, id, active_lock_reason FROM mixed_types WHERE color[0] > 0 AND numbers[0] > 0) tbl WHERE tbl.active_lock_reason IS NULL GROUP BY score, id ORDER BY score, id;
 score | id 
-------+----
(0 rows)

--Testcase 339:
DROP FOREIGN TABLE mixed_types;
-- TEST FOR json nested attribute
--Testcase 340:
CREATE FOREIGN TABLE students (
    "ID" int, 
    name text, 
    friends jsonb)
SERVER dynamodb_server OPTIONS (table_name 'students', partition_key 'ID');
--Testcase 341:
EXPLAIN VERBOSE 
SELECT * FROM students;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..136.70 rows=890 width=68)
   Output: "ID", name, friends
   Remote SQL: SELECT ID, name, friends FROM students
(3 rows)

--Testcase 342:
SELECT * FROM students;
  ID   |  name  |                                                                                                            friends                                                                                                             
-------+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 15455 | Angell | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}
  1969 | Manuel | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}
  9895 | Olivia | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}
  2121 | Rose   | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}
  6566 | Mary   | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}
  1212 | Lily   | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}
  4216 | Ghost  | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}
   934 | Marc   | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}}
(8 rows)

--Testcase 343:
EXPLAIN VERBOSE 
SELECT "ID", name, friends->'class_info', friends->'class_info', friends->'class_info' FROM students;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..143.38 rows=890 width=132)
   Output: "ID", name, (friends -> 'class_info'::text), (friends -> 'class_info'::text), (friends -> 'class_info'::text)
   Remote SQL: SELECT ID, name, friends FROM students
(3 rows)

--Testcase 344:
SELECT "ID", name, friends->'class_info', friends->'class_info', friends->'class_info' FROM students;
  ID   |  name  |                                       ?column?                                        |                                       ?column?                                        |                                       ?column?                                        
-------+--------+---------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------
 15455 | Angell | {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}        | {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}        | {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}
  1969 | Manuel | {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}      | {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}      | {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}
  9895 | Olivia | {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}        | {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}        | {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}
  2121 | Rose   | {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}       | {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}       | {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}
  6566 | Mary   | {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}         | {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}         | {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}
  1212 | Lily   | {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}       | {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}       | {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}
  4216 | Ghost  | {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}             | {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}             | {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}
   934 | Marc   | {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887} | {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887} | {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}
(8 rows)

--Testcase 345:
EXPLAIN VERBOSE 
SELECT friends->'class_info', friends->'login', friends->'class_info', friends->'login', friends->'class_info', friends->'login' FROM students;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..175.79 rows=1462 width=192)
   Output: (friends -> 'class_info'::text), (friends -> 'login'::text), (friends -> 'class_info'::text), (friends -> 'login'::text), (friends -> 'class_info'::text), (friends -> 'login'::text)
   Remote SQL: SELECT friends FROM students
(3 rows)

--Testcase 346:
SELECT friends->'class_info', friends->'login', friends->'class_info', friends->'login', friends->'class_info', friends->'login' FROM students;
                                       ?column?                                        |                                                    ?column?                                                     |                                       ?column?                                        |                                                    ?column?                                                     |                                       ?column?                                        |                                                    ?column?                                                     

 {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}        | {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}   | {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}        | {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}   | {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}        | {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}
 {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}      | {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}  | {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}      | {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}  | {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}      | {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}
 {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}        | {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"} | {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}        | {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"} | {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}        | {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}
 {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}       | {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"} | {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}       | {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"} | {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}       | {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}
 {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}         | {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}   | {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}         | {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}   | {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}         | {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}
 {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}       | {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"} | {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}       | {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"} | {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}       | {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}
 {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}             | {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}   | {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}             | {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}   | {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}             | {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}
 {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887} | {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}  | {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887} | {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}  | {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887} | {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}
(8 rows)

--Testcase 347:
EXPLAIN VERBOSE 
SELECT friends->'class_info'->'ID', friends->'class_info'->'name', friends->'class_info'->'isAtDorm', friends->'class_info'->'score_rand' FROM students;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..183.10 rows=1462 width=128)
   Output: (((friends -> 'class_info'::text) -> 'ID'::text)), (((friends -> 'class_info'::text) -> 'name'::text)), (((friends -> 'class_info'::text) -> 'isAtDorm'::text)), (((friends -> 'class_info'::text) -> 'score_rand'::text))
   Remote SQL: SELECT friends."class_info"."ID", friends."class_info"."name", friends."class_info"."isAtDorm", friends."class_info"."score_rand" FROM students
(3 rows)

--Testcase 348:
SELECT friends->'class_info'->'ID', friends->'class_info'->'name', friends->'class_info'->'isAtDorm', friends->'class_info'->'score_rand' FROM students;
 ?column? |       ?column?       | ?column? |  ?column?   
----------+----------------------+----------+-------------
 1        | "Grant Delgado"      | false    | 45.231508
 2        | "Thelma Fletcher"    | true     | -27.938899
 3        | "Eleanor Barnes"     | false    | 69.39961
 7        | "Hammond Conley"     | true     | -161.88588
 4        | "Jamie Byers"        | false    | -88.060876
 8        | "Pitts Higgins"      | false    | -34.309853
 6        | "Kari Vang"          | true     | 71.612004
 5        | "Schwartz Gallagher" | false    | -105.895887
(8 rows)

--Testcase 349:
EXPLAIN VERBOSE 
SELECT friends->'login'->'ID', friends->'login'->'age', friends->'login'->'isUpdated', friends->'login'->'last_score', friends->'login'->'lastsignin' FROM students;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..190.41 rows=1462 width=160)
   Output: (((friends -> 'login'::text) -> 'ID'::text)), (((friends -> 'login'::text) -> 'age'::text)), (((friends -> 'login'::text) -> 'isUpdated'::text)), (((friends -> 'login'::text) -> 'last_score'::text)), (((friends -> 'login'::text) -> 'lastsignin'::text))
   Remote SQL: SELECT friends."login"."ID", friends."login"."age", friends."login"."isUpdated", friends."login"."last_score", friends."login"."lastsignin" FROM students
(3 rows)

--Testcase 350:
SELECT friends->'login'->'ID', friends->'login'->'age', friends->'login'->'isUpdated', friends->'login'->'last_score', friends->'login'->'lastsignin' FROM students;
 ?column? | ?column? | ?column? |  ?column?  |           ?column?           
----------+----------+----------+------------+------------------------------
 11       | 20       | false    | 3.745553   | "2019-08-25T03:54:25 -07:00"
 22       | 24       | true     | -77.099881 | "2014-12-08T11:48:06 -07:00"
 33       | 40       | false    | -31.046522 | "2016-12-20T11:20:25 -07:00"
 77       | 36       | false    | -24.546655 | "2014-03-11T06:36:08 -07:00"
 44       | 29       | true     | 21.903083  | "2015-09-17T08:31:09 -07:00"
 88       | 22       | false    | -46.318089 | "2015-07-10T12:06:09 -07:00"
 66       | 33       | true     | 38.249618  | "2017-04-30T10:40:28 -07:00"
 55       | 30       | true     | -85.142456 | "2021-04-29T11:37:57 -07:00"
(8 rows)

--Testcase 351:
EXPLAIN VERBOSE 
SELECT friends->'login'->>'ID', friends->'login'->>'age', friends->'login'->>'isUpdated', friends->'login'->>'last_score', friends->'login'->>'lastsignin' FROM students;
                                                                                                                                 QUERY PLAN                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..190.41 rows=1462 width=160)
   Output: (((friends -> 'login'::text) ->> 'ID'::text)), (((friends -> 'login'::text) ->> 'age'::text)), (((friends -> 'login'::text) ->> 'isUpdated'::text)), (((friends -> 'login'::text) ->> 'last_score'::text)), (((friends -> 'login'::text) ->> 'lastsignin'::text))
   Remote SQL: SELECT friends."login"."ID", friends."login"."age", friends."login"."isUpdated", friends."login"."last_score", friends."login"."lastsignin" FROM students
(3 rows)

--Testcase 352:
SELECT friends->'login'->>'ID', friends->'login'->>'age', friends->'login'->>'isUpdated', friends->'login'->>'last_score', friends->'login'->>'lastsignin' FROM students;
 ?column? | ?column? | ?column? |  ?column?  |          ?column?          
----------+----------+----------+------------+----------------------------
 11       | 20       | false    | 3.745553   | 2019-08-25T03:54:25 -07:00
 22       | 24       | true     | -77.099881 | 2014-12-08T11:48:06 -07:00
 33       | 40       | false    | -31.046522 | 2016-12-20T11:20:25 -07:00
 77       | 36       | false    | -24.546655 | 2014-03-11T06:36:08 -07:00
 44       | 29       | true     | 21.903083  | 2015-09-17T08:31:09 -07:00
 88       | 22       | false    | -46.318089 | 2015-07-10T12:06:09 -07:00
 66       | 33       | true     | 38.249618  | 2017-04-30T10:40:28 -07:00
 55       | 30       | true     | -85.142456 | 2021-04-29T11:37:57 -07:00
(8 rows)

--Testcase 353:
EXPLAIN VERBOSE 
SELECT friends#>'{login,ID}', friends#>>'{2,login,age}', friends->'login'->>'isUpdated', friends->'login'->>'last_score', friends->'login'->>'lastsignin' FROM students;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..183.10 rows=1462 width=160)
   Output: (friends #> '{login,ID}'::text[]), (friends #>> '{2,login,age}'::text[]), ((friends -> 'login'::text) ->> 'isUpdated'::text), ((friends -> 'login'::text) ->> 'last_score'::text), ((friends -> 'login'::text) ->> 'lastsignin'::text)
   Remote SQL: SELECT friends FROM students
(3 rows)

--Testcase 354:
SELECT friends#>'{login,ID}', friends#>>'{2,login,age}', friends->'login'->>'isUpdated', friends->'login'->>'last_score', friends->'login'->>'lastsignin' FROM students;
 ?column? | ?column? | ?column? |  ?column?  |          ?column?          
----------+----------+----------+------------+----------------------------
 11       |          | false    | 3.745553   | 2019-08-25T03:54:25 -07:00
 22       |          | true     | -77.099881 | 2014-12-08T11:48:06 -07:00
 33       |          | false    | -31.046522 | 2016-12-20T11:20:25 -07:00
 77       |          | false    | -24.546655 | 2014-03-11T06:36:08 -07:00
 44       |          | true     | 21.903083  | 2015-09-17T08:31:09 -07:00
 88       |          | false    | -46.318089 | 2015-07-10T12:06:09 -07:00
 66       |          | true     | 38.249618  | 2017-04-30T10:40:28 -07:00
 55       |          | true     | -85.142456 | 2021-04-29T11:37:57 -07:00
(8 rows)

--Testcase 355:
EXPLAIN VERBOSE 
SELECT 1, 'a4w23', '@)#malf', 232 FROM students;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..212.39 rows=3413 width=72)
   Output: 1, 'a4w23'::text, '@)#malf'::text, 232
   Remote SQL: SELECT * FROM students
(3 rows)

--Testcase 356:
SELECT 1, 'a4w23', '@)#malf', 232 FROM students;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
        1 | a4w23    | @)#malf  |      232
(8 rows)

--Testcase 357:
EXPLAIN VERBOSE 
SELECT name || '::name', friends->'class_info'->>'name' || ' at dorm ', friends->'class_info'->>'isAtDorm' FROM students;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..151.85 rows=930 width=96)
   Output: (name || '::name'::text), (((friends -> 'class_info'::text) ->> 'name'::text) || ' at dorm '::text), ((friends -> 'class_info'::text) ->> 'isAtDorm'::text)
   Remote SQL: SELECT name, friends FROM students
(3 rows)

--Testcase 358:
SELECT name || '::name', friends->'class_info'->>'name' || ' at dorm ', friends->'class_info'->>'isAtDorm' FROM students;
   ?column?   |          ?column?           | ?column? 
--------------+-----------------------------+----------
 Angell::name | Grant Delgado at dorm       | false
 Manuel::name | Thelma Fletcher at dorm     | true
 Olivia::name | Eleanor Barnes at dorm      | false
 Rose::name   | Hammond Conley at dorm      | true
 Mary::name   | Jamie Byers at dorm         | false
 Lily::name   | Pitts Higgins at dorm       | false
 Ghost::name  | Kari Vang at dorm           | true
 Marc::name   | Schwartz Gallagher at dorm  | false
(8 rows)

--Testcase 359:
EXPLAIN VERBOSE 
SELECT "ID", name, (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'ID')::int / (friends->'class_info'->>'score_rand')::float FROM students;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..170.08 rows=890 width=44)
   Output: "ID", name, ((((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((((friends -> 'class_info'::text) ->> 'ID'::text))::integer)::double precision / (((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision))
   Remote SQL: SELECT ID, name, friends FROM students
(3 rows)

--Testcase 360:
SELECT "ID", name, (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'ID')::int / (friends->'class_info'->>'score_rand')::float FROM students;
  ID   |  name  |      ?column?       
-------+--------+---------------------
 15455 | Angell |    45.2536164824322
  1969 | Manuel | -28.010483782206343
  9895 | Olivia |   69.44283790862946
  2121 | Rose   | -161.92912033695833
  6566 | Mary   |  -88.10629912297688
  1212 | Lily   |  -34.54302217154964
  4216 | Ghost  |   71.69578883584958
   934 | Marc   | -105.94310318697052
(8 rows)

--Testcase 361:
EXPLAIN VERBOSE 
SELECT 33, '234asefAK@', (friends->'class_info'->>'score_rand')::float, (friends->'class_info'->>'score_rand')::float + 212.2 FROM students;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..186.75 rows=1462 width=52)
   Output: 33, '234asefAK@'::text, (((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision, ((((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + '212.2'::double precision)
   Remote SQL: SELECT friends FROM students
(3 rows)

--Testcase 362:
SELECT 33, '234asefAK@', (friends->'class_info'->>'score_rand')::float, (friends->'class_info'->>'score_rand')::float + 212.2 FROM students;
 ?column? |  ?column?  |   float8    |      ?column?      
----------+------------+-------------+--------------------
       33 | 234asefAK@ |   45.231508 |         257.431508
       33 | 234asefAK@ |  -27.938899 |         184.261101
       33 | 234asefAK@ |    69.39961 |          281.59961
       33 | 234asefAK@ |  -161.88588 |           50.31412
       33 | 234asefAK@ |  -88.060876 |         124.139124
       33 | 234asefAK@ |  -34.309853 | 177.89014699999998
       33 | 234asefAK@ |   71.612004 |         283.812004
       33 | 234asefAK@ | -105.895887 | 106.30411299999999
(8 rows)

--Testcase 363:
EXPLAIN VERBOSE 
SELECT * FROM students WHERE "ID" > 555;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..127.06 rows=297 width=68)
   Output: "ID", name, friends
   Remote SQL: SELECT ID, name, friends FROM students WHERE (ID > 555)
(3 rows)

--Testcase 364:
SELECT * FROM students WHERE "ID" > 555;
  ID   |  name  |                                                                                                            friends                                                                                                             
-------+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 15455 | Angell | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}
  1969 | Manuel | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}
  9895 | Olivia | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}
  2121 | Rose   | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}
  6566 | Mary   | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}
  1212 | Lily   | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}
  4216 | Ghost  | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}
   934 | Marc   | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}}
(8 rows)

--Testcase 365:
EXPLAIN VERBOSE 
SELECT "ID", name, friends FROM students WHERE "ID" <> 5454;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..138.85 rows=886 width=68)
   Output: "ID", name, friends
   Remote SQL: SELECT ID, name, friends FROM students WHERE (ID <> 5454)
(3 rows)

--Testcase 366:
SELECT "ID", name, friends FROM students WHERE "ID" <> 5454;
  ID   |  name  |                                                                                                            friends                                                                                                             
-------+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 15455 | Angell | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}
  1969 | Manuel | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}
  9895 | Olivia | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}
  2121 | Rose   | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}
  6566 | Mary   | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}
  1212 | Lily   | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}
  4216 | Ghost  | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}
   934 | Marc   | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}}
(8 rows)

--Testcase 367:
EXPLAIN VERBOSE 
SELECT name, friends->'class_info', friends->'class_info', friends->'class_info' FROM students WHERE friends->'class_info'->'ID' = friends->'login'->'ID';
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..131.06 rows=5 width=128)
   Output: name, (friends -> 'class_info'::text), (friends -> 'class_info'::text), (friends -> 'class_info'::text)
   Remote SQL: SELECT name, friends FROM students WHERE (friends."class_info"."ID" = friends."login"."ID")
(3 rows)

--Testcase 368:
SELECT name, friends->'class_info', friends->'class_info', friends->'class_info' FROM students WHERE friends->'class_info'->'ID' = friends->'login'->'ID';
 name | ?column? | ?column? | ?column? 
------+----------+----------+----------
(0 rows)

--Testcase 369:
EXPLAIN VERBOSE 
SELECT jsonb_extract_path(friends, 'login') FROM students WHERE friends->'login'->>'lastsignin' > '2015-07-10T12:06:09 -07:00';
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..166.02 rows=487 width=32)
   Output: jsonb_extract_path(friends, VARIADIC '{login}'::text[])
   Filter: (((students.friends -> 'login'::text) ->> 'lastsignin'::text) > '2015-07-10T12:06:09 -07:00'::text)
   Remote SQL: SELECT friends FROM students
(4 rows)

--Testcase 370:
SELECT jsonb_extract_path(friends, 'login') FROM students WHERE friends->'login'->>'lastsignin' > '2015-07-10T12:06:09 -07:00';
                                               jsonb_extract_path                                                
-----------------------------------------------------------------------------------------------------------------
 {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}
 {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}
 {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}
 {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}
 {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}
(5 rows)

--Testcase 371:
EXPLAIN VERBOSE 
SELECT name, "ID", friends, friends, friends FROM students WHERE "ID" != 456 AND name IS NOT NULL;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..138.75 rows=881 width=132)
   Output: name, "ID", friends, friends, friends
   Remote SQL: SELECT ID, name, friends FROM students WHERE (name IS NOT NULL) AND (ID <> 456)
(3 rows)

--Testcase 372:
SELECT name, "ID", friends, friends, friends FROM students WHERE "ID" != 456 AND name IS NOT NULL;
  name  |  ID   |                                                                                                            friends                                                                                                             |                                                                                                            friends                                                                                                             |                                                                                                            friends                                                                                                             

 Angell | 15455 | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}         | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}         | {"login": {"ID": 11, "age": 20, "isUpdated": false, "last_score": 3.745553, "lastsignin": "2019-08-25T03:54:25 -07:00"}, "class_info": {"ID": 1, "name": "Grant Delgado", "isAtDorm": false, "score_rand": 45.231508}}
 Manuel |  1969 | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}      | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}      | {"login": {"ID": 22, "age": 24, "isUpdated": true, "last_score": -77.099881, "lastsignin": "2014-12-08T11:48:06 -07:00"}, "class_info": {"ID": 2, "name": "Thelma Fletcher", "isAtDorm": true, "score_rand": -27.938899}}
 Olivia |  9895 | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}       | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}       | {"login": {"ID": 33, "age": 40, "isUpdated": false, "last_score": -31.046522, "lastsignin": "2016-12-20T11:20:25 -07:00"}, "class_info": {"ID": 3, "name": "Eleanor Barnes", "isAtDorm": false, "score_rand": 69.39961}}
 Rose   |  2121 | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}      | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}      | {"login": {"ID": 77, "age": 36, "isUpdated": false, "last_score": -24.546655, "lastsignin": "2014-03-11T06:36:08 -07:00"}, "class_info": {"ID": 7, "name": "Hammond Conley", "isAtDorm": true, "score_rand": -161.88588}}
 Mary   |  6566 | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}          | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}          | {"login": {"ID": 44, "age": 29, "isUpdated": true, "last_score": 21.903083, "lastsignin": "2015-09-17T08:31:09 -07:00"}, "class_info": {"ID": 4, "name": "Jamie Byers", "isAtDorm": false, "score_rand": -88.060876}}
 Lily   |  1212 | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}      | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}      | {"login": {"ID": 88, "age": 22, "isUpdated": false, "last_score": -46.318089, "lastsignin": "2015-07-10T12:06:09 -07:00"}, "class_info": {"ID": 8, "name": "Pitts Higgins", "isAtDorm": false, "score_rand": -34.309853}}
 Ghost  |  4216 | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}              | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}              | {"login": {"ID": 66, "age": 33, "isUpdated": true, "last_score": 38.249618, "lastsignin": "2017-04-30T10:40:28 -07:00"}, "class_info": {"ID": 6, "name": "Kari Vang", "isAtDorm": true, "score_rand": 71.612004}}
 Marc   |   934 | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}} | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}} | {"login": {"ID": 55, "age": 30, "isUpdated": true, "last_score": -85.142456, "lastsignin": "2021-04-29T11:37:57 -07:00"}, "class_info": {"ID": 5, "name": "Schwartz Gallagher", "isAtDorm": false, "score_rand": -105.895887}}
(8 rows)

--Testcase 373:
EXPLAIN VERBOSE 
SELECT friends#>'{class_info,name}', friends#>'{login,ID}', friends#>'{login,lastsignin}' FROM students WHERE (friends->'login'->>'isUpdated')::boolean = false;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..173.96 rows=731 width=96)
   Output: (friends #> '{class_info,name}'::text[]), (friends #> '{login,ID}'::text[]), (friends #> '{login,lastsignin}'::text[])
   Filter: (NOT (((students.friends -> 'login'::text) ->> 'isUpdated'::text))::boolean)
   Remote SQL: SELECT friends FROM students
(4 rows)

--Testcase 374:
SELECT friends#>'{class_info,name}', friends#>'{login,ID}', friends#>'{login,lastsignin}' FROM students WHERE (friends->'login'->>'isUpdated')::boolean = false;
     ?column?     | ?column? |           ?column?           
------------------+----------+------------------------------
 "Grant Delgado"  | 11       | "2019-08-25T03:54:25 -07:00"
 "Eleanor Barnes" | 33       | "2016-12-20T11:20:25 -07:00"
 "Hammond Conley" | 77       | "2014-03-11T06:36:08 -07:00"
 "Pitts Higgins"  | 88       | "2015-07-10T12:06:09 -07:00"
(4 rows)

--Testcase 375:
EXPLAIN VERBOSE 
SELECT friends->>0, friends->>1, friends->>2 FROM students WHERE (friends->'login'->>'last_score')::float > 0 OR (friends->'class_info'->>'score_rand')::float < 0;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..196.50 rows=812 width=96)
   Output: (friends ->> 0), (friends ->> 1), (friends ->> 2)
   Filter: (((((students.friends -> 'login'::text) ->> 'last_score'::text))::double precision > '0'::double precision) OR ((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision < '0'::double precision))
   Remote SQL: SELECT friends FROM students
(4 rows)

--Testcase 376:
SELECT friends->>0, friends->>1, friends->>2 FROM students WHERE (friends->'login'->>'last_score')::float > 0 OR (friends->'class_info'->>'score_rand')::float < 0;
 ?column? | ?column? | ?column? 
----------+----------+----------
          |          | 
          |          | 
          |          | 
          |          | 
          |          | 
          |          | 
          |          | 
(7 rows)

--Testcase 377:
EXPLAIN VERBOSE 
SELECT "ID", name, friends->'class_info'->'name', friends->'class_info'->'name', friends->'class_info'->'name' FROM students WHERE (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float <> 2362.221;
                                                                                                                                                      QUERY PLAN                                                                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.students  (cost=100.00..183.37 rows=886 width=132)
   Output: "ID", name, ((friends -> 'class_info'::text) -> 'name'::text), ((friends -> 'class_info'::text) -> 'name'::text), ((friends -> 'class_info'::text) -> 'name'::text)
   Filter: ((((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision) + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision) <> '2362.221'::double precision)
   Remote SQL: SELECT ID, name, friends FROM students
(4 rows)

--Testcase 378:
SELECT "ID", name, friends->'class_info'->'name', friends->'class_info'->'name', friends->'class_info'->'name' FROM students WHERE (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float <> 2362.221;
  ID   |  name  |       ?column?       |       ?column?       |       ?column?       
-------+--------+----------------------+----------------------+----------------------
 15455 | Angell | "Grant Delgado"      | "Grant Delgado"      | "Grant Delgado"
  1969 | Manuel | "Thelma Fletcher"    | "Thelma Fletcher"    | "Thelma Fletcher"
  9895 | Olivia | "Eleanor Barnes"     | "Eleanor Barnes"     | "Eleanor Barnes"
  2121 | Rose   | "Hammond Conley"     | "Hammond Conley"     | "Hammond Conley"
  6566 | Mary   | "Jamie Byers"        | "Jamie Byers"        | "Jamie Byers"
  1212 | Lily   | "Pitts Higgins"      | "Pitts Higgins"      | "Pitts Higgins"
  4216 | Ghost  | "Kari Vang"          | "Kari Vang"          | "Kari Vang"
   934 | Marc   | "Schwartz Gallagher" | "Schwartz Gallagher" | "Schwartz Gallagher"
(8 rows)

--Testcase 379:
EXPLAIN VERBOSE 
SELECT sum((friends->'login'->>'last_score')::float), avg((friends->'class_info'->>'score_rand')::float), stddev((friends->'class_info'->>'score_rand')::float)/2 FROM students WHERE "ID" > 0;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=150.20..150.21 rows=1 width=24)
   Output: sum((((friends -> 'login'::text) ->> 'last_score'::text))::double precision), avg((((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision), (stddev((((friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision) / '2'::double precision)
   ->  Foreign Scan on public.students  (cost=100.00..138.02 rows=487 width=32)
         Output: "ID", name, friends
         Remote SQL: SELECT friends FROM students WHERE (ID > 0)
(5 rows)

--Testcase 380:
SELECT sum((friends->'login'->>'last_score')::float), avg((friends->'class_info'->>'score_rand')::float), stddev((friends->'class_info'->>'score_rand')::float)/2 FROM students WHERE "ID" > 0;
         sum         |         avg         |     ?column?      
---------------------+---------------------+-------------------
 -200.25534899999997 | -28.981034124999997 | 43.26195730181723
(1 row)

--Testcase 381:
EXPLAIN VERBOSE 
SELECT "ID", name FROM (SELECT (friends->'class_info'->>'ID')::int AS "ID", friends->'class_info'->>'name' AS name FROM students) tbl GROUP BY "ID", name HAVING "ID" IN (15455, 1969, 9895);
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=174.78..175.26 rows=21 width=36)
   Output: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
   Group Key: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
   ->  Sort  (cost=174.78..174.84 rows=22 width=36)
         Output: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
         Sort Key: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
         ->  Foreign Scan on public.students  (cost=100.00..174.29 rows=22 width=36)
               Output: (((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer, ((students.friends -> 'class_info'::text) ->> 'name'::text)
               Filter: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer = ANY ('{15455,1969,9895}'::integer[]))
               Remote SQL: SELECT friends FROM students
(10 rows)

--Testcase 382:
SELECT "ID", name FROM (SELECT (friends->'class_info'->>'ID')::int AS "ID", friends->'class_info'->>'name' AS name FROM students) tbl GROUP BY "ID", name HAVING "ID" IN (15455, 1969, 9895);
 ID | name 
----+------
(0 rows)

--Testcase 383:
EXPLAIN VERBOSE 
SELECT name FROM (SELECT name FROM students WHERE name IN ('Angell', 'Olivia')) tbl GROUP BY name HAVING name NOT IN ('ALLY', 'CHESS');
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Group  (cost=132.48..132.55 rows=14 width=32)
   Output: students.name
   Group Key: students.name
   ->  Sort  (cost=132.48..132.51 rows=14 width=32)
         Output: students.name
         Sort Key: students.name
         ->  Foreign Scan on public.students  (cost=100.00..132.21 rows=14 width=32)
               Output: students.name
               Remote SQL: SELECT name FROM students WHERE name IN ('Angell', 'Olivia') AND name NOT IN ('ALLY', 'CHESS')
(9 rows)

--Testcase 384:
SELECT name FROM (SELECT name FROM students WHERE name IN ('Angell', 'Olivia')) tbl GROUP BY name HAVING name NOT IN ('ALLY', 'CHESS');
  name  
--------
 Angell
 Olivia
(2 rows)

--Testcase 385:
EXPLAIN VERBOSE 
SELECT _name, _id FROM (SELECT friends->'class_info'->'name' AS _name, friends->'login'->'ID' as _id FROM students) tt GROUP BY _name, _id HAVING (_id)::int >= 0;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=175.77..179.57 rows=190 width=64)
   Output: (((students.friends -> 'class_info'::text) -> 'name'::text)), (((students.friends -> 'login'::text) -> 'ID'::text))
   Group Key: ((students.friends -> 'class_info'::text) -> 'name'::text), ((students.friends -> 'login'::text) -> 'ID'::text)
   ->  Foreign Scan on public.students  (cost=100.00..173.33 rows=487 width=64)
         Output: ((students.friends -> 'class_info'::text) -> 'name'::text), ((students.friends -> 'login'::text) -> 'ID'::text)
         Filter: ((((students.friends -> 'login'::text) -> 'ID'::text))::integer >= 0)
         Remote SQL: SELECT friends FROM students
(7 rows)

--Testcase 386:
SELECT _name, _id FROM (SELECT friends->'class_info'->'name' AS _name, friends->'login'->'ID' as _id FROM students) tt GROUP BY _name, _id HAVING (_id)::int >= 0;
        _name         | _id 
----------------------+-----
 "Jamie Byers"        | 44
 "Kari Vang"          | 66
 "Thelma Fletcher"    | 22
 "Grant Delgado"      | 11
 "Pitts Higgins"      | 88
 "Eleanor Barnes"     | 33
 "Schwartz Gallagher" | 55
 "Hammond Conley"     | 77
(8 rows)

--Testcase 387:
EXPLAIN VERBOSE 
SELECT name, tt FROM (SELECT friends->'class_info'->>'name' as name, friends->'login'->>'isUpdated' as tt FROM students) tbl GROUP BY tbl.name, tbl.tt HAVING (tt)::boolean != true;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=179.45..183.43 rows=199 width=64)
   Output: (((students.friends -> 'class_info'::text) ->> 'name'::text)), (((students.friends -> 'login'::text) ->> 'isUpdated'::text))
   Group Key: ((students.friends -> 'class_info'::text) ->> 'name'::text), ((students.friends -> 'login'::text) ->> 'isUpdated'::text)
   ->  Foreign Scan on public.students  (cost=100.00..175.79 rows=731 width=64)
         Output: ((students.friends -> 'class_info'::text) ->> 'name'::text), ((students.friends -> 'login'::text) ->> 'isUpdated'::text)
         Filter: (NOT (((students.friends -> 'login'::text) ->> 'isUpdated'::text))::boolean)
         Remote SQL: SELECT friends FROM students
(7 rows)

--Testcase 388:
SELECT name, tt FROM (SELECT friends->'class_info'->>'name' as name, friends->'login'->>'isUpdated' as tt FROM students) tbl GROUP BY tbl.name, tbl.tt HAVING (tt)::boolean != true;
      name      |  tt   
----------------+-------
 Pitts Higgins  | false
 Eleanor Barnes | false
 Grant Delgado  | false
 Hammond Conley | false
(4 rows)

--Testcase 389:
EXPLAIN VERBOSE 
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL;
                                                                                                             QUERY PLAN                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=266.69..269.19 rows=200 width=48)
   Output: count(students.name), avg(((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision)), students.name
   Group Key: students.name
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.students students_1  (cost=100.00..157.95 rows=51 width=0)
           Remote SQL: SELECT * FROM students WHERE ID IN (15455, 1969, 9895)
   ->  Result  (cost=100.00..137.80 rows=925 width=64)
         Output: students.name, students.friends
         One-Time Filter: $0
         ->  Foreign Scan on public.students  (cost=100.00..137.80 rows=925 width=64)
               Output: students."ID", students.name, students.friends
               Remote SQL: SELECT name, friends FROM students WHERE (name IS NOT NULL)
(12 rows)

--Testcase 390:
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL;
 count |     avg     
-------+-------------
     1 |  -68.619706
     1 | -176.121752
     1 |   138.79922
     1 |  -55.877798
     1 | -211.791774
     1 |  143.224008
     1 |  -323.77176
     1 |   90.463016
(8 rows)

--Testcase 391:
EXPLAIN VERBOSE 
SELECT name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int FROM students WHERE (friends->'class_info'->>'ID')::int IN (SELECT (friends->'class_info'->>'ID')::int FROM students) GROUP BY name, friends HAVING (friends->'class_info'->>'score_rand')::float > 0.01;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=316.56..321.60 rows=155 width=68)
   Output: students.name, ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer), students.friends
   Group Key: students.name, students.friends
   ->  Hash Join  (cost=262.01..315.78 rows=155 width=64)
         Output: students.name, students.friends
         Inner Unique: true
         Hash Cond: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer = (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer)
         ->  Foreign Scan on public.students  (cost=100.00..149.53 rows=310 width=64)
               Output: students."ID", students.name, students.friends
               Filter: ((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision > '0.01'::double precision)
               Remote SQL: SELECT name, friends FROM students
         ->  Hash  (cost=159.52..159.52 rows=200 width=32)
               Output: students_1.friends
               ->  HashAggregate  (cost=157.52..159.52 rows=200 width=32)
                     Output: students_1.friends
                     Group Key: (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer
                     ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                           Output: students_1.friends, (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer
                           Remote SQL: SELECT friends FROM students
(19 rows)

--Testcase 392:
SELECT name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int FROM students WHERE (friends->'class_info'->>'ID')::int IN (SELECT (friends->'class_info'->>'ID')::int FROM students) GROUP BY name, friends HAVING (friends->'class_info'->>'score_rand')::float > 0.01;
  name  | ?column? 
--------+----------
 Olivia |       36
 Angell |       12
 Ghost  |       72
(3 rows)

--Testcase 393:
EXPLAIN VERBOSE 
SELECT count(friends), count("ID"), min(friends->'class_info'->>'name'), max(friends->'class_info'->>'ID') FROM students WHERE "ID" >= ALL(SELECT (friends->'class_info'->'"ID"')::int FROM students) GROUP BY "ID" HAVING min(friends->'class_info'->>'score_rand') != min(friends->'login'->>'last_score');
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=52013.12..52042.87 rows=197 width=84)
   Output: count(students.friends), count(students."ID"), min(((students.friends -> 'class_info'::text) ->> 'name'::text)), max(((students.friends -> 'class_info'::text) ->> 'ID'::text)), students."ID"
   Group Key: students."ID"
   Filter: (min(((students.friends -> 'class_info'::text) ->> 'score_rand'::text)) <> min(((students.friends -> 'login'::text) ->> 'last_score'::text)))
   ->  Sort  (cost=52013.12..52014.82 rows=682 width=36)
         Output: students."ID", students.friends
         Sort Key: students."ID"
         ->  Foreign Scan on public.students  (cost=200.00..51981.02 rows=682 width=36)
               Output: students."ID", students.friends
               Filter: (SubPlan 1)
               Remote SQL: SELECT ID, friends FROM students
               SubPlan 1
                 ->  Materialize  (cost=100.00..172.14 rows=1462 width=4)
                       Output: ((((students_1.friends -> 'class_info'::text) -> '"ID"'::text))::integer)
                       ->  Foreign Scan on public.students students_1  (cost=100.00..164.83 rows=1462 width=4)
                             Output: (((students_1.friends -> 'class_info'::text) -> '"ID"'::text))::integer
                             Remote SQL: SELECT friends FROM students
(17 rows)

--Testcase 394:
SELECT count(friends), count("ID"), min(friends->'class_info'->>'name'), max(friends->'class_info'->>'ID') FROM students WHERE "ID" >= ALL(SELECT (friends->'class_info'->'"ID"')::int FROM students) GROUP BY "ID" HAVING min(friends->'class_info'->>'score_rand') != min(friends->'login'->>'last_score');
 count | count | min | max 
-------+-------+-----+-----
(0 rows)

--Testcase 395:
EXPLAIN VERBOSE 
SELECT sum((friends->'login'->>'ID')::int + (friends->'login'->>'ID')::int) + 3, count(name)/2 FROM students WHERE (friends->'login'->>'ID')::int = ANY(SELECT (friends->'login'->>'ID')::int FROM students) GROUP BY "ID" HAVING min((friends->'class_info'->>'score_rand')::float) <> 0;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=329.81..333.30 rows=199 width=20)
   Output: (sum(((((students.friends -> 'login'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer)) + 3), (count(students.name) / 2), students."ID"
   Group Key: students."ID"
   Filter: (min((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision) <> '0'::double precision)
   ->  Hash Join  (cost=262.01..310.90 rows=445 width=68)
         Output: students."ID", students.friends, students.name
         Inner Unique: true
         Hash Cond: ((((students.friends -> 'login'::text) ->> 'ID'::text))::integer = (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer)
         ->  Foreign Scan on public.students  (cost=100.00..136.70 rows=890 width=68)
               Output: students."ID", students.name, students.friends
               Remote SQL: SELECT ID, name, friends FROM students
         ->  Hash  (cost=159.52..159.52 rows=200 width=32)
               Output: students_1.friends
               ->  HashAggregate  (cost=157.52..159.52 rows=200 width=32)
                     Output: students_1.friends
                     Group Key: (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer
                     ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                           Output: students_1.friends, (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer
                           Remote SQL: SELECT friends FROM students
(19 rows)

--Testcase 396:
SELECT sum((friends->'login'->>'ID')::int + (friends->'login'->>'ID')::int) + 3, count(name)/2 FROM students WHERE (friends->'login'->>'ID')::int = ANY(SELECT (friends->'login'->>'ID')::int FROM students) GROUP BY "ID" HAVING min((friends->'class_info'->>'score_rand')::float) <> 0;
 ?column? | ?column? 
----------+----------
       47 |        0
      113 |        0
      157 |        0
       69 |        0
       91 |        0
       25 |        0
      179 |        0
      135 |        0
(8 rows)

--Testcase 397:
EXPLAIN VERBOSE 
SELECT min(friends->'login'->>'ID'), min(friends->'login'->>'age'), count(DISTINCT friends->'login'->>'isUpdated') FROM students WHERE (friends->'login'->>'isUpdated')::boolean IN (SELECT (friends->'class_info'->>'isAtDorm')::boolean FROM students) GROUP BY "ID", name HAVING max((friends->'login'->>'age')::int) < 50;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=359.00..399.32 rows=67 width=108)
   Output: min(((students.friends -> 'login'::text) ->> 'ID'::text)), min(((students.friends -> 'login'::text) ->> 'age'::text)), count(DISTINCT ((students.friends -> 'login'::text) ->> 'isUpdated'::text)), students."ID", students.name
   Group Key: students."ID", students.name
   Filter: (max((((students.friends -> 'login'::text) ->> 'age'::text))::integer) < 50)
   ->  Sort  (cost=359.00..361.22 rows=890 width=68)
         Output: students."ID", students.name, students.friends
         Sort Key: students."ID", students.name
         ->  Hash Join  (cost=257.56..315.40 rows=890 width=68)
               Output: students."ID", students.name, students.friends
               Inner Unique: true
               Hash Cond: ((((students.friends -> 'login'::text) ->> 'isUpdated'::text))::boolean = (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean)
               ->  Foreign Scan on public.students  (cost=100.00..136.70 rows=890 width=68)
                     Output: students."ID", students.name, students.friends
                     Remote SQL: SELECT ID, name, friends FROM students
               ->  Hash  (cost=157.54..157.54 rows=2 width=32)
                     Output: students_1.friends
                     ->  HashAggregate  (cost=157.52..157.54 rows=2 width=32)
                           Output: students_1.friends
                           Group Key: (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean
                           ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                                 Output: students_1.friends, (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean
                                 Remote SQL: SELECT friends FROM students
(22 rows)

--Testcase 398:
SELECT min(friends->'login'->>'ID'), min(friends->'login'->>'age'), count(DISTINCT friends->'login'->>'isUpdated') FROM students WHERE (friends->'login'->>'isUpdated')::boolean IN (SELECT (friends->'class_info'->>'isAtDorm')::boolean FROM students) GROUP BY "ID", name HAVING max((friends->'login'->>'age')::int) < 50;
 min | min | count 
-----+-----+-------
 55  | 30  |     1
 88  | 22  |     1
 22  | 24  |     1
 77  | 36  |     1
 66  | 33  |     1
 44  | 29  |     1
 33  | 40  |     1
 11  | 20  |     1
(8 rows)

--Testcase 399:
EXPLAIN VERBOSE 
SELECT name, "ID" FROM students WHERE "ID" IN (SELECT "ID" FROM students) GROUP BY name, "ID" HAVING name IS NOT NULL AND "ID" > 0;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=350.52..352.39 rows=187 width=36)
   Output: students.name, students."ID"
   Group Key: students.name, students."ID"
   ->  Hash Join  (cost=309.56..349.39 rows=226 width=36)
         Output: students.name, students."ID"
         Inner Unique: true
         Hash Cond: (students."ID" = students_1."ID")
         ->  Foreign Scan on public.students  (cost=100.00..136.12 rows=453 width=36)
               Output: students."ID", students.name, students.friends
               Remote SQL: SELECT ID, name FROM students WHERE (name IS NOT NULL) AND (ID > 0)
         ->  Hash  (cost=207.06..207.06 rows=200 width=4)
               Output: students_1."ID"
               ->  HashAggregate  (cost=205.06..207.06 rows=200 width=4)
                     Output: students_1."ID"
                     Group Key: students_1."ID"
                     ->  Foreign Scan on public.students students_1  (cost=100.00..197.75 rows=2925 width=4)
                           Output: students_1."ID"
                           Remote SQL: SELECT ID FROM students
(18 rows)

--Testcase 400:
SELECT name, "ID" FROM students WHERE "ID" IN (SELECT "ID" FROM students) GROUP BY name, "ID" HAVING name IS NOT NULL AND "ID" > 0;
  name  |  ID   
--------+-------
 Lily   |  1212
 Marc   |   934
 Angell | 15455
 Ghost  |  4216
 Olivia |  9895
 Rose   |  2121
 Mary   |  6566
 Manuel |  1969
(8 rows)

--Testcase 401:
EXPLAIN VERBOSE 
SELECT "ID", name FROM (SELECT (friends->'class_info'->>'ID')::int as "ID", friends->'class_info'->>'name' AS name FROM students) tbl GROUP BY "ID", name HAVING "ID" IN (15455, 1969, 9895) LIMIT 3;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=174.78..174.85 rows=3 width=36)
   Output: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
   ->  Group  (cost=174.78..175.26 rows=21 width=36)
         Output: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
         Group Key: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
         ->  Sort  (cost=174.78..174.84 rows=22 width=36)
               Output: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
               Sort Key: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'name'::text))
               ->  Foreign Scan on public.students  (cost=100.00..174.29 rows=22 width=36)
                     Output: (((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer, ((students.friends -> 'class_info'::text) ->> 'name'::text)
                     Filter: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer = ANY ('{15455,1969,9895}'::integer[]))
                     Remote SQL: SELECT friends FROM students
(12 rows)

--Testcase 402:
SELECT "ID", name FROM (SELECT (friends->'class_info'->>'ID')::int as "ID", friends->'class_info'->>'name' AS name FROM students) tbl GROUP BY "ID", name HAVING "ID" IN (15455, 1969, 9895) LIMIT 3;
 ID | name 
----+------
(0 rows)

--Testcase 403:
EXPLAIN VERBOSE 
SELECT name, is_update FROM (SELECT friends->'class_info'->>'name' AS name, friends->'login'->>'isUpdated' AS is_update FROM students) tbl GROUP BY name, is_update HAVING (is_update)::boolean != true LIMIT 5;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179.45..179.55 rows=5 width=64)
   Output: (((students.friends -> 'class_info'::text) ->> 'name'::text)), (((students.friends -> 'login'::text) ->> 'isUpdated'::text))
   ->  HashAggregate  (cost=179.45..183.43 rows=199 width=64)
         Output: (((students.friends -> 'class_info'::text) ->> 'name'::text)), (((students.friends -> 'login'::text) ->> 'isUpdated'::text))
         Group Key: ((students.friends -> 'class_info'::text) ->> 'name'::text), ((students.friends -> 'login'::text) ->> 'isUpdated'::text)
         ->  Foreign Scan on public.students  (cost=100.00..175.79 rows=731 width=64)
               Output: ((students.friends -> 'class_info'::text) ->> 'name'::text), ((students.friends -> 'login'::text) ->> 'isUpdated'::text)
               Filter: (NOT (((students.friends -> 'login'::text) ->> 'isUpdated'::text))::boolean)
               Remote SQL: SELECT friends FROM students
(9 rows)

--Testcase 404:
SELECT name, is_update FROM (SELECT friends->'class_info'->>'name' AS name, friends->'login'->>'isUpdated' AS is_update FROM students) tbl GROUP BY name, is_update HAVING (is_update)::boolean != true LIMIT 5;
      name      | is_update 
----------------+-----------
 Pitts Higgins  | false
 Eleanor Barnes | false
 Grant Delgado  | false
 Hammond Conley | false
(4 rows)

--Testcase 405:
EXPLAIN VERBOSE 
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL LIMIT 1;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=266.69..266.70 rows=1 width=48)
   Output: (count(students.name)), (avg(((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision))), students.name
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.students students_1  (cost=100.00..157.95 rows=51 width=0)
           Remote SQL: SELECT * FROM students WHERE ID IN (15455, 1969, 9895)
   ->  HashAggregate  (cost=165.55..168.05 rows=200 width=48)
         Output: count(students.name), avg(((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision)), students.name
         Group Key: students.name
         ->  Result  (cost=100.00..137.80 rows=925 width=64)
               Output: students.name, students.friends
               One-Time Filter: $0
               ->  Foreign Scan on public.students  (cost=100.00..137.80 rows=925 width=64)
                     Output: students."ID", students.name, students.friends
                     Remote SQL: SELECT name, friends FROM students WHERE (name IS NOT NULL)
(14 rows)

--Testcase 406:
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL LIMIT 1;
 count |    avg     
-------+------------
     1 | -68.619706
(1 row)

--Testcase 407:
EXPLAIN VERBOSE 
SELECT friends->'login'->>'lastsignin', friends->'login'->>'lastsignin', friends->'login'->>'lastsignin' FROM students WHERE friends->'login'->>'lastsignin' < ALL(SELECT friends->'login'->>'lastsignin' FROM students WHERE (friends->'login'->>'last_score')::float <> 0) GROUP BY friends->'login'->>'lastsignin', friends->'login'->>'lastsignin', friends->'login'->>'lastsignin' HAVING min("ID") > 0 LIMIT 3;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=61941.78..61942.17 rows=3 width=96)
   Output: (((students.friends -> 'login'::text) ->> 'lastsignin'::text)), (((students.friends -> 'login'::text) ->> 'lastsignin'::text)), (((students.friends -> 'login'::text) ->> 'lastsignin'::text))
   ->  GroupAggregate  (cost=61941.78..61950.36 rows=66 width=96)
         Output: (((students.friends -> 'login'::text) ->> 'lastsignin'::text)), (((students.friends -> 'login'::text) ->> 'lastsignin'::text)), (((students.friends -> 'login'::text) ->> 'lastsignin'::text))
         Group Key: (((students.friends -> 'login'::text) ->> 'lastsignin'::text))
         Filter: (min(students."ID") > 0)
         ->  Sort  (cost=61941.78..61943.49 rows=682 width=68)
               Output: (((students.friends -> 'login'::text) ->> 'lastsignin'::text)), students.friends, students."ID"
               Sort Key: (((students.friends -> 'login'::text) ->> 'lastsignin'::text))
               ->  Foreign Scan on public.students  (cost=200.00..61909.68 rows=682 width=68)
                     Output: ((students.friends -> 'login'::text) ->> 'lastsignin'::text), students.friends, students."ID"
                     Filter: (SubPlan 1)
                     Remote SQL: SELECT ID, friends FROM students
                     SubPlan 1
                       ->  Materialize  (cost=100.00..186.69 rows=1455 width=32)
                             Output: (((students_1.friends -> 'login'::text) ->> 'lastsignin'::text))
                             ->  Foreign Scan on public.students students_1  (cost=100.00..179.41 rows=1455 width=32)
                                   Output: ((students_1.friends -> 'login'::text) ->> 'lastsignin'::text)
                                   Filter: ((((students_1.friends -> 'login'::text) ->> 'last_score'::text))::double precision <> '0'::double precision)
                                   Remote SQL: SELECT friends FROM students
(20 rows)

--Testcase 408:
SELECT friends->'login'->>'lastsignin', friends->'login'->>'lastsignin', friends->'login'->>'lastsignin' FROM students WHERE friends->'login'->>'lastsignin' < ALL(SELECT friends->'login'->>'lastsignin' FROM students WHERE (friends->'login'->>'last_score')::float <> 0) GROUP BY friends->'login'->>'lastsignin', friends->'login'->>'lastsignin', friends->'login'->>'lastsignin' HAVING min("ID") > 0 LIMIT 3;
 ?column? | ?column? | ?column? 
----------+----------+----------
(0 rows)

--Testcase 409:
EXPLAIN VERBOSE 
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL LIMIT 3;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=266.69..266.72 rows=3 width=48)
   Output: (count(students.name)), (avg(((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision))), students.name
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.students students_1  (cost=100.00..157.95 rows=51 width=0)
           Remote SQL: SELECT * FROM students WHERE ID IN (15455, 1969, 9895)
   ->  HashAggregate  (cost=165.55..168.05 rows=200 width=48)
         Output: count(students.name), avg(((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision + (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision)), students.name
         Group Key: students.name
         ->  Result  (cost=100.00..137.80 rows=925 width=64)
               Output: students.name, students.friends
               One-Time Filter: $0
               ->  Foreign Scan on public.students  (cost=100.00..137.80 rows=925 width=64)
                     Output: students."ID", students.name, students.friends
                     Remote SQL: SELECT name, friends FROM students WHERE (name IS NOT NULL)
(14 rows)

--Testcase 410:
SELECT count(name), avg((friends->'class_info'->>'score_rand')::float + (friends->'class_info'->>'score_rand')::float) FROM students WHERE EXISTS (SELECT "ID", name FROM students WHERE "ID" IN (15455, 1969, 9895)) GROUP BY name HAVING name IS NOT NULL LIMIT 3;
 count |     avg     
-------+-------------
     1 |  -68.619706
     1 | -176.121752
     1 |   138.79922
(3 rows)

--Testcase 411:
EXPLAIN VERBOSE 
SELECT name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int FROM students WHERE (friends->'class_info'->>'ID')::int IN (SELECT (friends->'class_info'->>'ID')::int FROM students) GROUP BY name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int, (friends->'class_info'->>'score_rand')::float HAVING (friends->'class_info'->>'score_rand')::float > 0.01 LIMIT 3;
                                                                                                                              QUERY PLAN                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=321.98..322.11 rows=3 width=44)
   Output: students.name, (((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer)), ((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision)
   ->  HashAggregate  (cost=321.98..328.57 rows=155 width=44)
         Output: students.name, (((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer)), ((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision)
         Group Key: students.name, ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision
         ->  Hash Join  (cost=262.01..320.82 rows=155 width=44)
               Output: students.name, ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer), (((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision
               Inner Unique: true
               Hash Cond: ((((students.friends -> 'class_info'::text) ->> 'ID'::text))::integer = (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer)
               ->  Foreign Scan on public.students  (cost=100.00..149.53 rows=310 width=64)
                     Output: students."ID", students.name, students.friends
                     Filter: ((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision > '0.01'::double precision)
                     Remote SQL: SELECT name, friends FROM students
               ->  Hash  (cost=159.52..159.52 rows=200 width=32)
                     Output: students_1.friends
                     ->  HashAggregate  (cost=157.52..159.52 rows=200 width=32)
                           Output: students_1.friends
                           Group Key: (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer
                           ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                                 Output: students_1.friends, (((students_1.friends -> 'class_info'::text) ->> 'ID'::text))::integer
                                 Remote SQL: SELECT friends FROM students
(21 rows)

--Testcase 412:
SELECT name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int FROM students WHERE (friends->'class_info'->>'ID')::int IN (SELECT (friends->'class_info'->>'ID')::int FROM students) GROUP BY name, (friends->'class_info'->>'ID')::int + (friends->'login'->>'ID')::int, (friends->'class_info'->>'score_rand')::float HAVING (friends->'class_info'->>'score_rand')::float > 0.01 LIMIT 3;
  name  | ?column? 
--------+----------
 Olivia |       36
 Angell |       12
 Ghost  |       72
(3 rows)

--Testcase 413:
EXPLAIN VERBOSE 
SELECT count(friends), count(name), min(friends->'class_info'->>'name'), max(friends->'class_info'->>'ID') FROM students WHERE "ID" >= ALL(SELECT (friends->'class_info'->'ID')::int FROM students) GROUP BY "ID" HAVING min(friends->'class_info'->>'score_rand') != min(friends->'login'->>'last_score') LIMIT 3;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33985.05..33985.37 rows=3 width=84)
   Output: (count(students.friends)), (count(students.name)), (min(((students.friends -> 'class_info'::text) ->> 'name'::text))), (max(((students.friends -> 'class_info'::text) ->> 'ID'::text))), students."ID"
   ->  GroupAggregate  (cost=33985.05..34005.24 rows=190 width=84)
         Output: count(students.friends), count(students.name), min(((students.friends -> 'class_info'::text) ->> 'name'::text)), max(((students.friends -> 'class_info'::text) ->> 'ID'::text)), students."ID"
         Group Key: students."ID"
         Filter: (min(((students.friends -> 'class_info'::text) ->> 'score_rand'::text)) <> min(((students.friends -> 'login'::text) ->> 'last_score'::text)))
         ->  Sort  (cost=33985.05..33986.16 rows=445 width=68)
               Output: students."ID", students.friends, students.name
               Sort Key: students."ID"
               ->  Foreign Scan on public.students  (cost=200.00..33965.48 rows=445 width=68)
                     Output: students."ID", students.friends, students.name
                     Filter: (SubPlan 1)
                     Remote SQL: SELECT ID, name, friends FROM students
                     SubPlan 1
                       ->  Materialize  (cost=100.00..172.14 rows=1462 width=4)
                             Output: ((((students_1.friends -> 'class_info'::text) -> 'ID'::text))::integer)
                             ->  Foreign Scan on public.students students_1  (cost=100.00..164.83 rows=1462 width=4)
                                   Output: (((students_1.friends -> 'class_info'::text) -> 'ID'::text))::integer
                                   Remote SQL: SELECT friends FROM students
(19 rows)

--Testcase 414:
SELECT count(friends), count(name), min(friends->'class_info'->>'name'), max(friends->'class_info'->>'ID') FROM students WHERE "ID" >= ALL(SELECT (friends->'class_info'->'ID')::int FROM students) GROUP BY "ID" HAVING min(friends->'class_info'->>'score_rand') != min(friends->'login'->>'last_score') LIMIT 3;
 count | count |        min         | max 
-------+-------+--------------------+-----
     1 |     1 | Schwartz Gallagher | 5
     1 |     1 | Pitts Higgins      | 8
     1 |     1 | Thelma Fletcher    | 2
(3 rows)

--Testcase 415:
EXPLAIN VERBOSE 
SELECT sum((friends->'login'->>'ID')::int) + (friends->'login'->>'ID')::int + 3, count(name)/2 FROM students WHERE (friends->'login'->>'ID')::int = ANY(SELECT (friends->'login'->>'ID')::int FROM students) GROUP BY "ID", friends HAVING min((friends->'class_info'->>'score_rand')::float) <> 0 LIMIT 1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=325.36..325.39 rows=1 width=52)
   Output: (((sum((((students.friends -> 'login'::text) ->> 'ID'::text))::integer) + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer) + 3)), ((count(students.name) / 2)), students."ID", students.friends
   ->  HashAggregate  (cost=325.36..331.34 rows=199 width=52)
         Output: ((sum((((students.friends -> 'login'::text) ->> 'ID'::text))::integer) + (((students.friends -> 'login'::text) ->> 'ID'::text))::integer) + 3), (count(students.name) / 2), students."ID", students.friends
         Group Key: students."ID", students.friends
         Filter: (min((((students.friends -> 'class_info'::text) ->> 'score_rand'::text))::double precision) <> '0'::double precision)
         ->  Hash Join  (cost=262.01..310.90 rows=445 width=68)
               Output: students."ID", students.friends, students.name
               Inner Unique: true
               Hash Cond: ((((students.friends -> 'login'::text) ->> 'ID'::text))::integer = (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer)
               ->  Foreign Scan on public.students  (cost=100.00..136.70 rows=890 width=68)
                     Output: students."ID", students.name, students.friends
                     Remote SQL: SELECT ID, name, friends FROM students
               ->  Hash  (cost=159.52..159.52 rows=200 width=32)
                     Output: students_1.friends
                     ->  HashAggregate  (cost=157.52..159.52 rows=200 width=32)
                           Output: students_1.friends
                           Group Key: (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer
                           ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                                 Output: students_1.friends, (((students_1.friends -> 'login'::text) ->> 'ID'::text))::integer
                                 Remote SQL: SELECT friends FROM students
(21 rows)

--Testcase 416:
SELECT sum((friends->'login'->>'ID')::int) + (friends->'login'->>'ID')::int + 3, count(name)/2 FROM students WHERE (friends->'login'->>'ID')::int = ANY(SELECT (friends->'login'->>'ID')::int FROM students) GROUP BY "ID", friends HAVING min((friends->'class_info'->>'score_rand')::float) <> 0 LIMIT 1;
 ?column? | ?column? 
----------+----------
      135 |        0
(1 row)

--Testcase 417:
EXPLAIN VERBOSE 
SELECT min(friends->'login'->>'ID'), min(friends->'login'->>'age'), count(DISTINCT friends->'login'->>'isUpdated') FROM students WHERE (friends->'login'->>'isUpdated')::boolean IN (SELECT (friends->'class_info'->>'isAtDorm')::boolean FROM students) GROUP BY "ID", name HAVING max((friends->'login'->>'age')::int) < 50 LIMIT 1;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=359.00..359.60 rows=1 width=108)
   Output: (min(((students.friends -> 'login'::text) ->> 'ID'::text))), (min(((students.friends -> 'login'::text) ->> 'age'::text))), (count(DISTINCT ((students.friends -> 'login'::text) ->> 'isUpdated'::text))), students."ID", students.name
   ->  GroupAggregate  (cost=359.00..399.32 rows=67 width=108)
         Output: min(((students.friends -> 'login'::text) ->> 'ID'::text)), min(((students.friends -> 'login'::text) ->> 'age'::text)), count(DISTINCT ((students.friends -> 'login'::text) ->> 'isUpdated'::text)), students."ID", students.name
         Group Key: students."ID", students.name
         Filter: (max((((students.friends -> 'login'::text) ->> 'age'::text))::integer) < 50)
         ->  Sort  (cost=359.00..361.22 rows=890 width=68)
               Output: students."ID", students.name, students.friends
               Sort Key: students."ID", students.name
               ->  Hash Join  (cost=257.56..315.40 rows=890 width=68)
                     Output: students."ID", students.name, students.friends
                     Inner Unique: true
                     Hash Cond: ((((students.friends -> 'login'::text) ->> 'isUpdated'::text))::boolean = (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean)
                     ->  Foreign Scan on public.students  (cost=100.00..136.70 rows=890 width=68)
                           Output: students."ID", students.name, students.friends
                           Remote SQL: SELECT ID, name, friends FROM students
                     ->  Hash  (cost=157.54..157.54 rows=2 width=32)
                           Output: students_1.friends
                           ->  HashAggregate  (cost=157.52..157.54 rows=2 width=32)
                                 Output: students_1.friends
                                 Group Key: (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean
                                 ->  Foreign Scan on public.students students_1  (cost=100.00..153.86 rows=1462 width=32)
                                       Output: students_1.friends, (((students_1.friends -> 'class_info'::text) ->> 'isAtDorm'::text))::boolean
                                       Remote SQL: SELECT friends FROM students
(24 rows)

--Testcase 418:
SELECT min(friends->'login'->>'ID'), min(friends->'login'->>'age'), count(DISTINCT friends->'login'->>'isUpdated') FROM students WHERE (friends->'login'->>'isUpdated')::boolean IN (SELECT (friends->'class_info'->>'isAtDorm')::boolean FROM students) GROUP BY "ID", name HAVING max((friends->'login'->>'age')::int) < 50 LIMIT 1;
 min | min | count 
-----+-----+-------
 55  | 30  |     1
(1 row)

--Testcase 419:
EXPLAIN VERBOSE 
SELECT name, "ID" FROM students WHERE "ID" IN (SELECT "ID" FROM students) GROUP BY name, "ID" HAVING name IS NOT NULL OR "ID" > 0 LIMIT 3;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=378.36..378.39 rows=3 width=36)
   Output: students.name, students."ID"
   ->  HashAggregate  (cost=378.36..380.36 rows=200 width=36)
         Output: students.name, students."ID"
         Group Key: students.name, students."ID"
         ->  Hash Join  (cost=309.56..374.96 rows=680 width=36)
               Output: students.name, students."ID"
               Inner Unique: true
               Hash Cond: (students."ID" = students_1."ID")
               ->  Foreign Scan on public.students  (cost=100.00..154.26 rows=1360 width=36)
                     Output: students."ID", students.name, students.friends
                     Remote SQL: SELECT ID, name FROM students WHERE ((name IS NOT NULL) OR (ID > 0))
               ->  Hash  (cost=207.06..207.06 rows=200 width=4)
                     Output: students_1."ID"
                     ->  HashAggregate  (cost=205.06..207.06 rows=200 width=4)
                           Output: students_1."ID"
                           Group Key: students_1."ID"
                           ->  Foreign Scan on public.students students_1  (cost=100.00..197.75 rows=2925 width=4)
                                 Output: students_1."ID"
                                 Remote SQL: SELECT ID FROM students
(20 rows)

--Testcase 420:
SELECT name, "ID" FROM students WHERE "ID" IN (SELECT "ID" FROM students) GROUP BY name, "ID" HAVING name IS NOT NULL OR "ID" > 0 LIMIT 3;
  name  |  ID   
--------+-------
 Lily   |  1212
 Marc   |   934
 Angell | 15455
(3 rows)

--Testcase 421:
DROP FOREIGN TABLE students;
-- TEST FOR others: operator, constant, orderby/groupby/limit
--Testcase 422:
CREATE FOREIGN TABLE classes (
    id int, 
    name text, 
    "isAtDorm" boolean, 
    score float, 
    courses jsonb) 
SERVER dynamodb_server OPTIONS (table_name 'classes', partition_key 'id');
--Testcase 423:
CREATE FOREIGN TABLE J1_TBL (
    "ID" int, 
    q1 int, 
    q2 float8, 
    q3 text)
SERVER dynamodb_server OPTIONS (table_name 'J1_TBL', partition_key 'ID');
--Testcase 424:
CREATE FOREIGN TABLE J2_TBL (
    "ID" int, 
    q1 int, 
    q2 float8) 
SERVER dynamodb_server OPTIONS (table_name 'J2_TBL', partition_key 'ID');
--select constants
--Testcase 425:
EXPLAIN VERBOSE 
SELECT 1, 31, '1212e' FROM classes;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..212.39 rows=3413 width=40)
   Output: 1, 31, '1212e'::text
   Remote SQL: SELECT * FROM classes
(3 rows)

--Testcase 426:
SELECT 1, 31, '1212e' FROM classes;
 ?column? | ?column? | ?column? 
----------+----------+----------
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
        1 |       31 | 1212e
(24 rows)

--Testcase 427:
EXPLAIN VERBOSE 
SELECT 1,'XYZ' union all SELECT 2,'abc' FROM classes;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Append  (cost=0.00..157.79 rows=1366 width=36)
   ->  Result  (cost=0.00..0.01 rows=1 width=36)
         Output: 1, 'XYZ'::text
   ->  Foreign Scan on public.classes  (cost=100.00..150.95 rows=1365 width=36)
         Output: 2, 'abc'::text
         Remote SQL: SELECT * FROM classes
(6 rows)

--Testcase 428:
SELECT 1,'XYZ' union all SELECT 2,'abc' FROM classes;
 ?column? | ?column? 
----------+----------
        1 | XYZ
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
        2 | abc
(25 rows)

--Testcase 429:
EXPLAIN VERBOSE 
SELECT * FROM (SELECT 1, 2, 3, 4 FROM classes) AS t(a,b,c,d);
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..212.39 rows=3413 width=16)
   Output: 1, 2, 3, 4
   Remote SQL: SELECT * FROM classes
(3 rows)

--Testcase 430:
SELECT * FROM (SELECT 1, 2, 3, 4 FROM classes) AS t(a,b,c,d);
 a | b | c | d 
---+---+---+---
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
 1 | 2 | 3 | 4
(24 rows)

--Testcase 431:
EXPLAIN VERBOSE 
SELECT constant1, constant2, constant3 FROM (SELECT 'foo@gmail.com', 'bar@gmail.com', 'baz@gmail.com' FROM classes) AS mytable(constant1, constant2, constant3);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..212.39 rows=3413 width=96)
   Output: 'foo@gmail.com'::text, 'bar@gmail.com'::text, 'baz@gmail.com'::text
   Remote SQL: SELECT * FROM classes
(3 rows)

--Testcase 432:
SELECT constant1, constant2, constant3 FROM (SELECT 'foo@gmail.com', 'bar@gmail.com', 'baz@gmail.com' FROM classes) AS mytable(constant1, constant2, constant3);
   constant1   |   constant2   |   constant3   
---------------+---------------+---------------
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
 foo@gmail.com | bar@gmail.com | baz@gmail.com
(24 rows)

--Testcase 433:
EXPLAIN VERBOSE 
SELECT * FROM (VALUES (1,'XYZ'),(2,'abc'))  AS t (id, data);
                          QUERY PLAN                          
--------------------------------------------------------------
 Values Scan on "*VALUES*"  (cost=0.00..0.03 rows=2 width=36)
   Output: "*VALUES*".column1, "*VALUES*".column2
(2 rows)

--Testcase 434:
SELECT * FROM (VALUES (1,'XYZ'),(2,'abc'))  AS t (id, data);
 id | data 
----+------
  1 | XYZ
  2 | abc
(2 rows)

--Testcase 435:
EXPLAIN VERBOSE 
SELECT 1212, 'AM(!WF)', 12 FROM classes;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..212.39 rows=3413 width=40)
   Output: 1212, 'AM(!WF)'::text, 12
   Remote SQL: SELECT * FROM classes
(3 rows)

--Testcase 436:
SELECT 1212, 'AM(!WF)', 12 FROM classes;
 ?column? | ?column? | ?column? 
----------+----------+----------
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
     1212 | AM(!WF)  |       12
(24 rows)

--Testcase 437:
EXPLAIN VERBOSE 
SELECT 1212, 'AM(!WF)', 12 FROM classes WHERE id > 0 GROUP BY id HAVING id NOT IN (11, 233, 331) ORDER BY id LIMIT 1 OFFSET 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit  (cost=183.11..183.12 rows=1 width=44)
   Output: 1212, 'AM(!WF)'::text, 12, id
   ->  Sort  (cost=183.11..183.61 rows=199 width=44)
         Output: 1212, 'AM(!WF)'::text, 12, id
         Sort Key: classes.id
         ->  HashAggregate  (cost=179.13..181.12 rows=199 width=44)
               Output: 1212, 'AM(!WF)'::text, 12, id
               Group Key: classes.id
               ->  Foreign Scan on public.classes  (cost=100.00..176.73 rows=960 width=4)
                     Output: id, name, "isAtDorm", score, courses
                     Remote SQL: SELECT id FROM classes WHERE (id > 0) AND id NOT IN (11, 233, 331)
(11 rows)

--Testcase 438:
SELECT 1212, 'AM(!WF)', 12 FROM classes WHERE id > 0 GROUP BY id HAVING id NOT IN (11, 233, 331) ORDER BY id LIMIT 1 OFFSET 1;
 ?column? | ?column? | ?column? 
----------+----------+----------
     1212 | AM(!WF)  |       12
(1 row)

--insert/update/delete
--Testcase 439:
EXPLAIN VERBOSE 
INSERT INTO classes VALUES (25, 'Halla Hue', true, 3.26, '{"majors": "IT", "sub-majors": "Networking"}');
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 25, 'Halla Hue'::text, true, '3.26'::double precision, '{"majors": "IT", "sub-majors": "Networking"}'::jsonb
(4 rows)

--Testcase 440:
INSERT INTO classes VALUES (25, 'Halla Hue', true, 3.26, '{"majors": "IT", "sub-majors": "Networking"}');
--Testcase 441:
EXPLAIN VERBOSE 
INSERT INTO classes (id, name, courses) VALUES (26, 'Anna Hat', '{"majors": "Astronomy", "sub-majors": ""}');
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 26, 'Anna Hat'::text, NULL::boolean, NULL::double precision, '{"majors": "Astronomy", "sub-majors": ""}'::jsonb
(4 rows)

--Testcase 442:
INSERT INTO classes (id, name, courses) VALUES (26, 'Anna Hat', '{"majors": "Astronomy", "sub-majors": ""}');
--Testcase 443:
EXPLAIN VERBOSE 
INSERT INTO classes (id, courses) VALUES (27, null);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 27, NULL::text, NULL::boolean, NULL::double precision, NULL::jsonb
(4 rows)

--Testcase 444:
INSERT INTO classes (id, courses) VALUES (27, null);
--Testcase 445:
EXPLAIN VERBOSE 
INSERT INTO classes (id, name, score, courses) VALUES (28, 'Welling Jr', 23.12, '{"majors": null, "sub-majors": "Chemistry"}');
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 28, 'Welling Jr'::text, NULL::boolean, '23.12'::double precision, '{"majors": null, "sub-majors": "Chemistry"}'::jsonb
(4 rows)

--Testcase 446:
INSERT INTO classes (id, name, score, courses) VALUES (28, 'Welling Jr', 23.12, '{"majors": null, "sub-majors": "Chemistry"}');
--Testcase 447:
EXPLAIN VERBOSE 
INSERT INTO classes VALUES (29, 'HASHKEYS KEEP', false, 23.12);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 29, 'HASHKEYS KEEP'::text, false, '23.12'::double precision, NULL::jsonb
(4 rows)

--Testcase 448:
INSERT INTO classes VALUES (29, 'HASHKEYS KEEP', false, 23.12);
--Testcase 449:
EXPLAIN VERBOSE 
INSERT INTO classes VALUES (30, 'Zone Diana', true, 45.2, '{"majors": "Archeology", "sub-majors": "Adventure"}');
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 30, 'Zone Diana'::text, true, '45.2'::double precision, '{"majors": "Archeology", "sub-majors": "Adventure"}'::jsonb
(4 rows)

--Testcase 450:
INSERT INTO classes VALUES (30, 'Zone Diana', true, 45.2, '{"majors": "Archeology", "sub-majors": "Adventure"}');
--Testcase 451:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 28;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"majors": "Environment"}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 28)
(5 rows)

--Testcase 452:
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 28;
--Testcase 453:
-- Should faild
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = -1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"majors": "Environment"}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = -1)
(5 rows)

--Testcase 454:
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = -1;
--Testcase 457:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"majors": {"m1": "No1", "m2": "No2"}}' WHERE id = 27;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"majors": {"m1": "No1", "m2": "No2"}}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 27)
(5 rows)

--Testcase 458:
UPDATE classes SET courses = '{"majors": {"m1": "No1", "m2": "No2"}}' WHERE id = 27;
--Testcase 459:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"key1": "|2FSo3FSo4*", "key2":[70356, 24708, 68429, -84248, -83370]}' WHERE id = 25;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"key1": "|2FSo3FSo4*", "key2": [70356, 24708, 68429, -84248, -83370]}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 25)
(5 rows)

--Testcase 460:
UPDATE classes SET courses = '{"key1": "|2FSo3FSo4*", "key2":[70356, 24708, 68429, -84248, -83370]}' WHERE id = 25;
--Testcase 461:
EXPLAIN VERBOSE 
DELETE FROM classes WHERE id = 26;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.classes  (cost=100.00..146.86 rows=0 width=0)
   Remote SQL: DELETE FROM classes WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..146.86 rows=15 width=4)
         Output: id
         Remote SQL: SELECT id FROM classes WHERE (id = 26)
(5 rows)

--Testcase 462:
DELETE FROM classes WHERE id = 26;
--Testcase 463:
EXPLAIN VERBOSE 
DELETE FROM classes WHERE courses->'sub-majors' IS NULL AND id BETWEEN 25 AND 30;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Delete on public.classes  (cost=100.00..161.21 rows=0 width=0)
   Remote SQL: DELETE FROM classes WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..161.21 rows=1 width=4)
         Output: id
         Remote SQL: SELECT id FROM classes WHERE (courses."sub-majors" IS NULL) AND (id >= 25) AND (id <= 30)
(5 rows)

--Testcase 464:
DELETE FROM classes WHERE courses->'sub-majors' IS NULL AND id BETWEEN 25 AND 30;
--Testcase 465:
EXPLAIN VERBOSE 
INSERT INTO classes (id, name, courses) VALUES (26, 'Anna Hat', '{"majors": "Astronomy", "sub-majors": ""}');
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Insert on public.classes  (cost=0.00..0.01 rows=0 width=0)
   Remote SQL: INSERT INTO classes VALUE {'id' : ?, 'name' : ?, 'isAtDorm' : ?, 'score' : ?, 'courses' : ?};
   ->  Result  (cost=0.00..0.01 rows=1 width=77)
         Output: 26, 'Anna Hat'::text, NULL::boolean, NULL::double precision, '{"majors": "Astronomy", "sub-majors": ""}'::jsonb
(4 rows)

--Testcase 466:
INSERT INTO classes (id, name, courses) VALUES (26, 'Anna Hat', '{"majors": "Astronomy", "sub-majors": ""}');
--Testcase 467:
EXPLAIN VERBOSE 
UPDATE classes SET courses = null WHERE id = 26;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: NULL::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 26)
(5 rows)

--Testcase 468:
UPDATE classes SET courses = null WHERE id = 26;
--Testcase 469:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '""' WHERE id = 25;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '""'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 25)
(5 rows)

--Testcase 470:
UPDATE classes SET courses = '""' WHERE id = 25;
--Testcase 471:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '[]' WHERE id = 27;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '[]'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 27)
(5 rows)

--Testcase 472:
UPDATE classes SET courses = '[]' WHERE id = 27;
--Testcase 473:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{}' WHERE id = 29;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=0 width=0)
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ?
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 29)
(5 rows)

--Testcase 474:
UPDATE classes SET courses = '{}' WHERE id = 29;
--Operators (comparasion, logic, dereference)
--Testcase 525:
EXPLAIN VERBOSE 
SELECT * FROM classes WHERE id > 10;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..125.54 rows=270 width=77)
   Output: id, name, "isAtDorm", score, courses
   Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id > 10)
(3 rows)

--Testcase 526:
SELECT * FROM classes WHERE id > 10;
 id |        name        | isAtDorm |    score    |                          courses                           
----+--------------------+----------+-------------+------------------------------------------------------------
 23 | Isabelle Decker    | t        |   77.966603 | {"majors": "Biology", "sub-majors": "Chemistry"}
 30 | Zone Diana         | t        |        45.2 | {"majors": "Archeology", "sub-majors": "Adventure"}
 12 | Cheri Goodman      | f        | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 15 | Glenna Conrad      | f        |   95.980049 | {"majors": "Math", "sub-majors": "Physics"}
 28 | Welling Jr         |          |       23.12 | {"majors": "Environment"}
 29 | HASHKEYS KEEP      | f        |       23.12 | {}
 11 | Loretta French     | f        |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
 22 | Pitts Higgins      | f        |  -34.309853 | {"majors": "Math", "sub-majors": "Information Technology"}
 24 | Billie Lowery      | f        |   15.045873 | {"majors": "Math", "sub-majors": "Physics"}
 20 | Lora Hamilton      | f        | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
 14 | Melisa Trujillo    | t        |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 27 |                    |          |             | []
 17 | Harvey Peters      | f        | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 26 | Anna Hat           |          |             | 
 25 | Halla Hue          | t        |        3.26 | ""
 19 | Hammond Conley     | t        |  -161.88588 | {"majors": "Biology", "sub-majors": "Chemistry"}
 13 | Schwartz Gallagher | f        | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 21 | Cole Andrews       | f        |   80.023596 | {"majors": "Math", "sub-majors": "Information Technology"}
 16 | Kari Vang          | t        |   71.612004 | {"majors": "Geography", "sub-majors": "Archeology"}
 18 | Sally Fleming      | t        |   67.340726 | {"majors": "Math", "sub-majors": "Physics"}
(20 rows)

--Testcase 527:
EXPLAIN VERBOSE 
SELECT id, name, "isAtDorm" FROM classes WHERE id < 10 GROUP BY id, name, "isAtDorm" HAVING id <> 10 ORDER BY id; 
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Group  (cost=158.60..163.05 rows=374 width=37)
   Output: id, name, "isAtDorm"
   Group Key: classes.id, classes.name, classes."isAtDorm"
   ->  Sort  (cost=158.60..159.72 rows=445 width=37)
         Output: id, name, "isAtDorm"
         Sort Key: classes.id, classes.name, classes."isAtDorm"
         ->  Foreign Scan on public.classes  (cost=100.00..139.03 rows=445 width=37)
               Output: id, name, "isAtDorm"
               Remote SQL: SELECT id, name, isAtDorm FROM classes WHERE (id < 10) AND (id <> 10)
(9 rows)

--Testcase 528:
SELECT id, name, "isAtDorm" FROM classes WHERE id < 10 GROUP BY id, name, "isAtDorm" HAVING id <> 10 ORDER BY id; 
 id |      name       | isAtDorm 
----+-----------------+----------
  1 | Grant Delgado   | f
  2 | Sonja Reid      | f
  3 | Miriam Robinson | f
  4 | Thelma Fletcher | t
  5 | Gilda Malone    | f
  6 | Adrian Merrill  | f
  7 | Eleanor Barnes  | f
  8 | Faye Mckinney   | f
  9 | Earlene Scott   | t
(9 rows)

--Testcase 529:
EXPLAIN VERBOSE 
SELECT name, score, courses->'majors', courses->'sub-majors' FROM classes WHERE courses->>'majors' = 'Math' AND courses->>'sub-majors' != 'Math';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..143.16 rows=4 width=104)
   Output: name, score, (courses -> 'majors'::text), (courses -> 'sub-majors'::text)
   Filter: (((classes.courses ->> 'sub-majors'::text) <> 'Math'::text) AND ((classes.courses ->> 'majors'::text) = 'Math'::text))
   Remote SQL: SELECT name, score, courses FROM classes
(4 rows)

--Testcase 530:
SELECT name, score, courses->'majors', courses->'sub-majors' FROM classes WHERE courses->>'majors' = 'Math' AND courses->>'sub-majors' != 'Math';
        name        |    score    | ?column? |         ?column?         
--------------------+-------------+----------+--------------------------
 Earlene Scott      |  -30.858104 | "Math"   | "Physics"
 Glenna Conrad      |   95.980049 | "Math"   | "Physics"
 Grant Delgado      |   45.231508 | "Math"   | "Physics"
 Pitts Higgins      |  -34.309853 | "Math"   | "Information Technology"
 Billie Lowery      |   15.045873 | "Math"   | "Physics"
 Harvey Peters      | -121.212542 | "Math"   | "Physics"
 Schwartz Gallagher | -105.895887 | "Math"   | "Physics"
 Cole Andrews       |   80.023596 | "Math"   | "Information Technology"
 Sally Fleming      |   67.340726 | "Math"   | "Physics"
(9 rows)

--Testcase 531:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM classes WHERE score >= 0;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..135.07 rows=401 width=48)
   Output: name, ((id)::double precision + score), score
   Remote SQL: SELECT id, name, score FROM classes WHERE (score >= 0)
(3 rows)

--Testcase 532:
SELECT name, id + score, score FROM classes WHERE score >= 0;
      name       |      ?column?      |   score    
-----------------+--------------------+------------
 Isabelle Decker |         100.966603 |  77.966603
 Zone Diana      |               75.2 |       45.2
 Glenna Conrad   |         110.980049 |  95.980049
 Grant Delgado   |          46.231508 |  45.231508
 Welling Jr      | 51.120000000000005 |      23.12
 Gilda Malone    |         159.196778 | 154.196778
 Eleanor Barnes  |           76.39961 |   69.39961
 HASHKEYS KEEP   | 52.120000000000005 |      23.12
 Loretta French  |          95.090833 |  84.090833
 Billie Lowery   |          39.045873 |  15.045873
 Halla Hue       | 28.259999999999998 |       3.26
 Cole Andrews    |         101.023596 |  80.023596
 Kari Vang       |          87.612004 |  71.612004
 Sally Fleming   |          85.340726 |  67.340726
(14 rows)

--Testcase 533:
EXPLAIN VERBOSE 
SELECT name, score FROM classes GROUP BY name, score, courses HAVING courses->>'majors' = 'Math' ORDER BY name, score;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Group  (cost=138.84..138.88 rows=4 width=72)
   Output: name, score, courses
   Group Key: classes.name, classes.score, classes.courses
   ->  Sort  (cost=138.84..138.84 rows=4 width=72)
         Output: name, score, courses
         Sort Key: classes.name, classes.score, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..138.80 rows=4 width=72)
               Output: name, score, courses
               Filter: ((classes.courses ->> 'majors'::text) = 'Math'::text)
               Remote SQL: SELECT name, score, courses FROM classes
(10 rows)

--Testcase 534:
SELECT name, score FROM classes GROUP BY name, score, courses HAVING courses->>'majors' = 'Math' ORDER BY name, score;
        name        |    score    
--------------------+-------------
 Billie Lowery      |   15.045873
 Cole Andrews       |   80.023596
 Earlene Scott      |  -30.858104
 Glenna Conrad      |   95.980049
 Grant Delgado      |   45.231508
 Harvey Peters      | -121.212542
 Pitts Higgins      |  -34.309853
 Sally Fleming      |   67.340726
 Schwartz Gallagher | -105.895887
(9 rows)

--Testcase 535:
EXPLAIN VERBOSE 
SELECT "isAtDorm" AND true, "isAtDorm" OR FALSE, id <> 10 OR true FROM classes;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..208.28 rows=3276 width=3)
   Output: "isAtDorm", "isAtDorm", true
   Remote SQL: SELECT isAtDorm FROM classes
(3 rows)

--Testcase 536:
SELECT "isAtDorm" AND true, "isAtDorm" OR FALSE, id <> 10 OR true FROM classes;
 ?column? | ?column? | ?column? 
----------+----------+----------
 f        | f        | t
 t        | t        | t
 t        | t        | t
 t        | t        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
          |          | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 f        | f        | t
 t        | t        | t
          |          | t
 f        | f        | t
          |          | t
 t        | t        | t
 t        | t        | t
 f        | f        | t
 f        | f        | t
 t        | t        | t
 f        | f        | t
 t        | t        | t
 t        | t        | t
(30 rows)

--Testcase 537:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes WHERE score NOT IN (1212.3, 13.13, 424.3);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..138.53 rows=840 width=72)
   Output: name, score, courses
   Remote SQL: SELECT name, score, courses FROM classes WHERE score NOT IN (1212.3, 13.13, 424.3)
(3 rows)

--Testcase 538:
SELECT name, score, courses FROM classes WHERE score NOT IN (1212.3, 13.13, 424.3);
        name        |    score    |                           courses                            
--------------------+-------------+--------------------------------------------------------------
 Sonja Reid         |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
 Earlene Scott      |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Isabelle Decker    |   77.966603 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Zone Diana         |        45.2 | {"majors": "Archeology", "sub-majors": "Adventure"}
 Cheri Goodman      | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 Glenna Conrad      |   95.980049 | {"majors": "Math", "sub-majors": "Physics"}
 Grant Delgado      |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
 Welling Jr         |       23.12 | {"majors": "Environment"}
 Miriam Robinson    | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
 Gilda Malone       |  154.196778 | {"majors": "Music", "sub-majors": "Art"}
 Faye Mckinney      | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
 Jamie Byers        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Eleanor Barnes     |    69.39961 | {"majors": "History", "sub-majors": "Archeology"}
 HASHKEYS KEEP      |       23.12 | {}
 Loretta French     |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
 Pitts Higgins      |  -34.309853 | {"majors": "Math", "sub-majors": "Information Technology"}
 Billie Lowery      |   15.045873 | {"majors": "Math", "sub-majors": "Physics"}
 Lora Hamilton      | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Melisa Trujillo    |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
                    |             | []
 Harvey Peters      | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 Anna Hat           |             | 
 Halla Hue          |        3.26 | ""
 Hammond Conley     |  -161.88588 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Schwartz Gallagher | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 Cole Andrews       |   80.023596 | {"majors": "Math", "sub-majors": "Information Technology"}
 Kari Vang          |   71.612004 | {"majors": "Geography", "sub-majors": "Archeology"}
 Adrian Merrill     | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Sally Fleming      |   67.340726 | {"majors": "Math", "sub-majors": "Physics"}
 Thelma Fletcher    |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
(30 rows)

--Testcase 539:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes WHERE id IN (1, 3, 4, 9, 20);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..124.28 rows=21 width=72)
   Output: name, score, courses
   Remote SQL: SELECT name, score, courses FROM classes WHERE id IN (1, 3, 4, 9, 20)
(3 rows)

--Testcase 540:
SELECT name, score, courses FROM classes WHERE id IN (1, 3, 4, 9, 20);
      name       |    score    |                     courses                      
-----------------+-------------+--------------------------------------------------
 Grant Delgado   |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
 Miriam Robinson | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
 Thelma Fletcher |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
 Earlene Scott   |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Lora Hamilton   | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
(5 rows)

--Testcase 541:
EXPLAIN VERBOSE 
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id BETWEEN 1 AND 10;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..124.08 rows=5 width=96)
   Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name
   Remote SQL: SELECT courses."majors", courses."sub-majors", name, id FROM classes WHERE (id >= 1) AND (id <= 10)
(3 rows)

--Testcase 542:
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id BETWEEN 1 AND 10;
      ?column?      |  ?column?  |      name       
--------------------+------------+-----------------
 English Literature | Archeology | Sonja Reid
 Math               | Physics    | Earlene Scott
 Math               | Physics    | Grant Delgado
 Chemistry          | Physics    | Miriam Robinson
 Music              | Art        | Gilda Malone
 Geography          | Archeology | Faye Mckinney
 Music              | Art        | Jamie Byers
 History            | Archeology | Eleanor Barnes
 Biology            | Chemistry  | Adrian Merrill
 Modern Art         | Music      | Thelma Fletcher
(10 rows)

--Testcase 543:
EXPLAIN VERBOSE 
SELECT name, courses->>'majors', "isAtDorm", score FROM classes WHERE name != '@#!#' OR id >= 10 AND courses->>'majors' = 'Biology';
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.classes  (cost=100.00..145.86 rows=840 width=73)
   Output: name, (courses ->> 'majors'::text), "isAtDorm", score
   Filter: ((classes.name <> '@#!#'::text) OR ((classes.id >= 10) AND ((classes.courses ->> 'majors'::text) = 'Biology'::text)))
   Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes
(4 rows)

--Testcase 544:
SELECT name, courses->>'majors', "isAtDorm", score FROM classes WHERE name != '@#!#' OR id >= 10 AND courses->>'majors' = 'Biology';
        name        |      ?column?      | isAtDorm |    score    
--------------------+--------------------+----------+-------------
 Sonja Reid         | English Literature | f        |  -11.042567
 Earlene Scott      | Math               | t        |  -30.858104
 Isabelle Decker    | Biology            | t        |   77.966603
 Zone Diana         | Archeology         | t        |        45.2
 Cheri Goodman      | Geography          | f        | -145.756442
 Glenna Conrad      | Math               | f        |   95.980049
 Grant Delgado      | Math               | f        |   45.231508
 Welling Jr         | Environment        |          |       23.12
 Miriam Robinson    | Chemistry          | f        | -121.388902
 Gilda Malone       | Music              | f        |  154.196778
 Faye Mckinney      | Geography          | f        | -140.965449
 Jamie Byers        | Music              | f        |  -88.060876
 Eleanor Barnes     | History            | f        |    69.39961
 HASHKEYS KEEP      |                    | f        |       23.12
 Loretta French     | Music              | f        |   84.090833
 Pitts Higgins      | Math               | f        |  -34.309853
 Billie Lowery      | Math               | f        |   15.045873
 Lora Hamilton      | Biology            | f        | -122.859337
 Melisa Trujillo    | Geography          | t        |   -11.96517
 Harvey Peters      | Math               | f        | -121.212542
 Anna Hat           |                    |          |            
 Halla Hue          |                    | t        |        3.26
 Hammond Conley     | Biology            | t        |  -161.88588
 Schwartz Gallagher | Math               | f        | -105.895887
 Cole Andrews       | Math               | f        |   80.023596
 Kari Vang          | Geography          | t        |   71.612004
 Adrian Merrill     | Biology            | f        | -107.568385
 Sally Fleming      | Math               | t        |   67.340726
 Thelma Fletcher    | Modern Art         | t        |  -27.938899
(29 rows)

--ORDER BY, GROUP BY, LIMIT
--ORDER BY
--Testcase 545:
EXPLAIN VERBOSE 
SELECT * FROM classes ORDER BY id, name;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=173.52..175.54 rows=811 width=77)
   Output: id, name, "isAtDorm", score, courses
   Sort Key: classes.id, classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..134.33 rows=811 width=77)
         Output: id, name, "isAtDorm", score, courses
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes
(6 rows)

--Testcase 546:
SELECT * FROM classes ORDER BY id, name;
 id |        name        | isAtDorm |    score    |                           courses                            
----+--------------------+----------+-------------+--------------------------------------------------------------
  1 | Grant Delgado      | f        |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
  2 | Sonja Reid         | f        |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
  3 | Miriam Robinson    | f        | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
  4 | Thelma Fletcher    | t        |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
  5 | Gilda Malone       | f        |  154.196778 | {"majors": "Music", "sub-majors": "Art"}
  6 | Adrian Merrill     | f        | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
  7 | Eleanor Barnes     | f        |    69.39961 | {"majors": "History", "sub-majors": "Archeology"}
  8 | Faye Mckinney      | f        | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
  9 | Earlene Scott      | t        |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 10 | Jamie Byers        | f        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 11 | Loretta French     | f        |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
 12 | Cheri Goodman      | f        | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 13 | Schwartz Gallagher | f        | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 14 | Melisa Trujillo    | t        |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 15 | Glenna Conrad      | f        |   95.980049 | {"majors": "Math", "sub-majors": "Physics"}
 16 | Kari Vang          | t        |   71.612004 | {"majors": "Geography", "sub-majors": "Archeology"}
 17 | Harvey Peters      | f        | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 18 | Sally Fleming      | t        |   67.340726 | {"majors": "Math", "sub-majors": "Physics"}
 19 | Hammond Conley     | t        |  -161.88588 | {"majors": "Biology", "sub-majors": "Chemistry"}
 20 | Lora Hamilton      | f        | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
 21 | Cole Andrews       | f        |   80.023596 | {"majors": "Math", "sub-majors": "Information Technology"}
 22 | Pitts Higgins      | f        |  -34.309853 | {"majors": "Math", "sub-majors": "Information Technology"}
 23 | Isabelle Decker    | t        |   77.966603 | {"majors": "Biology", "sub-majors": "Chemistry"}
 24 | Billie Lowery      | f        |   15.045873 | {"majors": "Math", "sub-majors": "Physics"}
 25 | Halla Hue          | t        |        3.26 | ""
 26 | Anna Hat           |          |             | 
 27 |                    |          |             | []
 28 | Welling Jr         |          |       23.12 | {"majors": "Environment"}
 29 | HASHKEYS KEEP      | f        |       23.12 | {}
 30 | Zone Diana         | t        |        45.2 | {"majors": "Archeology", "sub-majors": "Adventure"}
(30 rows)

--Testcase 547:
EXPLAIN VERBOSE 
SELECT id, name, courses FROM classes ORDER BY name;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=180.30..182.52 rows=890 width=68)
   Output: id, name, courses
   Sort Key: classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..136.70 rows=890 width=68)
         Output: id, name, courses
         Remote SQL: SELECT id, name, courses FROM classes
(6 rows)

--Testcase 548:
SELECT id, name, courses FROM classes ORDER BY name;
 id |        name        |                           courses                            
----+--------------------+--------------------------------------------------------------
  6 | Adrian Merrill     | {"majors": "Biology", "sub-majors": "Chemistry"}
 26 | Anna Hat           | 
 24 | Billie Lowery      | {"majors": "Math", "sub-majors": "Physics"}
 12 | Cheri Goodman      | {"majors": "Geography", "sub-majors": "Archeology"}
 21 | Cole Andrews       | {"majors": "Math", "sub-majors": "Information Technology"}
  9 | Earlene Scott      | {"majors": "Math", "sub-majors": "Physics"}
  7 | Eleanor Barnes     | {"majors": "History", "sub-majors": "Archeology"}
  8 | Faye Mckinney      | {"majors": "Geography", "sub-majors": "Archeology"}
  5 | Gilda Malone       | {"majors": "Music", "sub-majors": "Art"}
 15 | Glenna Conrad      | {"majors": "Math", "sub-majors": "Physics"}
  1 | Grant Delgado      | {"majors": "Math", "sub-majors": "Physics"}
 25 | Halla Hue          | ""
 19 | Hammond Conley     | {"majors": "Biology", "sub-majors": "Chemistry"}
 17 | Harvey Peters      | {"majors": "Math", "sub-majors": "Physics"}
 29 | HASHKEYS KEEP      | {}
 23 | Isabelle Decker    | {"majors": "Biology", "sub-majors": "Chemistry"}
 10 | Jamie Byers        | {"majors": "Music", "sub-majors": "Art"}
 16 | Kari Vang          | {"majors": "Geography", "sub-majors": "Archeology"}
 20 | Lora Hamilton      | {"majors": "Biology", "sub-majors": "Chemistry"}
 11 | Loretta French     | {"majors": "Music", "sub-majors": "Art"}
 14 | Melisa Trujillo    | {"majors": "Geography", "sub-majors": "Archeology"}
  3 | Miriam Robinson    | {"majors": "Chemistry", "sub-majors": "Physics"}
 22 | Pitts Higgins      | {"majors": "Math", "sub-majors": "Information Technology"}
 18 | Sally Fleming      | {"majors": "Math", "sub-majors": "Physics"}
 13 | Schwartz Gallagher | {"majors": "Math", "sub-majors": "Physics"}
  2 | Sonja Reid         | {"majors": "English Literature", "sub-majors": "Archeology"}
  4 | Thelma Fletcher    | {"majors": "Modern Art", "sub-majors": "Music"}
 28 | Welling Jr         | {"majors": "Environment"}
 30 | Zone Diana         | {"majors": "Archeology", "sub-majors": "Adventure"}
 27 |                    | []
(30 rows)

--Testcase 549:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM classes ORDER BY name ASC, "isAtDorm", score DESC;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=212.69..215.84 rows=1260 width=41)
   Output: name, "isAtDorm", score
   Sort Key: classes.name, classes."isAtDorm", classes.score DESC
   ->  Foreign Scan on public.classes  (cost=100.00..147.80 rows=1260 width=41)
         Output: name, "isAtDorm", score
         Remote SQL: SELECT name, isAtDorm, score FROM classes
(6 rows)

--Testcase 550:
SELECT name, "isAtDorm", score FROM classes ORDER BY name ASC, "isAtDorm", score DESC;
        name        | isAtDorm |    score    
--------------------+----------+-------------
 Adrian Merrill     | f        | -107.568385
 Anna Hat           |          |            
 Billie Lowery      | f        |   15.045873
 Cheri Goodman      | f        | -145.756442
 Cole Andrews       | f        |   80.023596
 Earlene Scott      | t        |  -30.858104
 Eleanor Barnes     | f        |    69.39961
 Faye Mckinney      | f        | -140.965449
 Gilda Malone       | f        |  154.196778
 Glenna Conrad      | f        |   95.980049
 Grant Delgado      | f        |   45.231508
 Halla Hue          | t        |        3.26
 Hammond Conley     | t        |  -161.88588
 Harvey Peters      | f        | -121.212542
 HASHKEYS KEEP      | f        |       23.12
 Isabelle Decker    | t        |   77.966603
 Jamie Byers        | f        |  -88.060876
 Kari Vang          | t        |   71.612004
 Lora Hamilton      | f        | -122.859337
 Loretta French     | f        |   84.090833
 Melisa Trujillo    | t        |   -11.96517
 Miriam Robinson    | f        | -121.388902
 Pitts Higgins      | f        |  -34.309853
 Sally Fleming      | t        |   67.340726
 Schwartz Gallagher | f        | -105.895887
 Sonja Reid         | f        |  -11.042567
 Thelma Fletcher    | t        |  -27.938899
 Welling Jr         |          |       23.12
 Zone Diana         | t        |        45.2
                    |          |            
(30 rows)

--Testcase 551:
EXPLAIN VERBOSE 
SELECT id, name, score FROM classes ORDER BY id DESC;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=207.73..210.74 rows=1204 width=44)
   Output: id, name, score
   Sort Key: classes.id DESC
   ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
         Output: id, name, score
         Remote SQL: SELECT id, name, score FROM classes
(6 rows)

--Testcase 552:
SELECT id, name, score FROM classes ORDER BY id DESC;
 id |        name        |    score    
----+--------------------+-------------
 30 | Zone Diana         |        45.2
 29 | HASHKEYS KEEP      |       23.12
 28 | Welling Jr         |       23.12
 27 |                    |            
 26 | Anna Hat           |            
 25 | Halla Hue          |        3.26
 24 | Billie Lowery      |   15.045873
 23 | Isabelle Decker    |   77.966603
 22 | Pitts Higgins      |  -34.309853
 21 | Cole Andrews       |   80.023596
 20 | Lora Hamilton      | -122.859337
 19 | Hammond Conley     |  -161.88588
 18 | Sally Fleming      |   67.340726
 17 | Harvey Peters      | -121.212542
 16 | Kari Vang          |   71.612004
 15 | Glenna Conrad      |   95.980049
 14 | Melisa Trujillo    |   -11.96517
 13 | Schwartz Gallagher | -105.895887
 12 | Cheri Goodman      | -145.756442
 11 | Loretta French     |   84.090833
 10 | Jamie Byers        |  -88.060876
  9 | Earlene Scott      |  -30.858104
  8 | Faye Mckinney      | -140.965449
  7 | Eleanor Barnes     |    69.39961
  6 | Adrian Merrill     | -107.568385
  5 | Gilda Malone       |  154.196778
  4 | Thelma Fletcher    |  -27.938899
  3 | Miriam Robinson    | -121.388902
  2 | Sonja Reid         |  -11.042567
  1 | Grant Delgado      |   45.231508
(30 rows)

--Testcase 553:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes ORDER BY courses->>'majors';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort  (cost=241.68..245.34 rows=1462 width=96)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), ((courses ->> 'majors'::text))
   Sort Key: ((classes.courses ->> 'majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..164.83 rows=1462 width=96)
         Output: (courses -> 'majors'::text), (courses -> 'sub-majors'::text), (courses ->> 'majors'::text)
         Remote SQL: SELECT courses FROM classes
(6 rows)

--Testcase 554:
SELECT courses->'majors', courses->'sub-majors' FROM classes ORDER BY courses->>'majors';
       ?column?       |         ?column?         
----------------------+--------------------------
 "Archeology"         | "Adventure"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Chemistry"          | "Physics"
 "English Literature" | "Archeology"
 "Environment"        | 
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "History"            | "Archeology"
 "Math"               | "Information Technology"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Information Technology"
 "Math"               | "Physics"
 "Modern Art"         | "Music"
 "Music"              | "Art"
 "Music"              | "Art"
 "Music"              | "Art"
                      | 
                      | 
                      | 
                      | 
(30 rows)

--Testcase 555:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes ORDER BY courses->>'sub-majors';
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort  (cost=241.68..245.34 rows=1462 width=96)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), ((courses ->> 'sub-majors'::text))
   Sort Key: ((classes.courses ->> 'sub-majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..164.83 rows=1462 width=96)
         Output: (courses -> 'majors'::text), (courses -> 'sub-majors'::text), (courses ->> 'sub-majors'::text)
         Remote SQL: SELECT courses FROM classes
(6 rows)

--Testcase 556:
SELECT courses->'majors', courses->'sub-majors' FROM classes ORDER BY courses->>'sub-majors';
       ?column?       |         ?column?         
----------------------+--------------------------
 "Archeology"         | "Adventure"
 "English Literature" | "Archeology"
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "Geography"          | "Archeology"
 "History"            | "Archeology"
 "Music"              | "Art"
 "Music"              | "Art"
 "Music"              | "Art"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Biology"            | "Chemistry"
 "Math"               | "Information Technology"
 "Math"               | "Information Technology"
 "Modern Art"         | "Music"
 "Chemistry"          | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
 "Math"               | "Physics"
                      | 
                      | 
                      | 
                      | 
 "Environment"        | 
(30 rows)

--Testcase 557:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes ORDER BY score;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort  (cost=177.12..179.25 rows=853 width=72)
   Output: name, score, courses
   Sort Key: classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..135.59 rows=853 width=72)
         Output: name, score, courses
         Remote SQL: SELECT name, score, courses FROM classes
(6 rows)

--Testcase 558:
SELECT name, score, courses FROM classes ORDER BY score;
        name        |    score    |                           courses                            
--------------------+-------------+--------------------------------------------------------------
 Hammond Conley     |  -161.88588 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Cheri Goodman      | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 Faye Mckinney      | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
 Lora Hamilton      | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Miriam Robinson    | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
 Harvey Peters      | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 Adrian Merrill     | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Schwartz Gallagher | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 Jamie Byers        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Pitts Higgins      |  -34.309853 | {"majors": "Math", "sub-majors": "Information Technology"}
 Earlene Scott      |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Thelma Fletcher    |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
 Melisa Trujillo    |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 Sonja Reid         |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
 Halla Hue          |        3.26 | ""
 Billie Lowery      |   15.045873 | {"majors": "Math", "sub-majors": "Physics"}
 Welling Jr         |       23.12 | {"majors": "Environment"}
 HASHKEYS KEEP      |       23.12 | {}
 Zone Diana         |        45.2 | {"majors": "Archeology", "sub-majors": "Adventure"}
 Grant Delgado      |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
 Sally Fleming      |   67.340726 | {"majors": "Math", "sub-majors": "Physics"}
 Eleanor Barnes     |    69.39961 | {"majors": "History", "sub-majors": "Archeology"}
 Kari Vang          |   71.612004 | {"majors": "Geography", "sub-majors": "Archeology"}
 Isabelle Decker    |   77.966603 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Cole Andrews       |   80.023596 | {"majors": "Math", "sub-majors": "Information Technology"}
 Loretta French     |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
 Glenna Conrad      |   95.980049 | {"majors": "Math", "sub-majors": "Physics"}
 Gilda Malone       |  154.196778 | {"majors": "Music", "sub-majors": "Art"}
                    |             | []
 Anna Hat           |             | 
(30 rows)

--Testcase 559:
EXPLAIN VERBOSE 
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes ORDER BY courses->>'majors', courses->>'sub-majors';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=188.40..190.73 rows=930 width=96)
   Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name
   Sort Key: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..142.55 rows=930 width=96)
         Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name
         Remote SQL: SELECT courses."majors", courses."sub-majors", name FROM classes
(6 rows)

--Testcase 560:
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes ORDER BY courses->>'majors', courses->>'sub-majors';
      ?column?      |        ?column?        |        name        
--------------------+------------------------+--------------------
 Archeology         | Adventure              | Zone Diana
 Biology            | Chemistry              | Hammond Conley
 Biology            | Chemistry              | Adrian Merrill
 Biology            | Chemistry              | Isabelle Decker
 Biology            | Chemistry              | Lora Hamilton
 Chemistry          | Physics                | Miriam Robinson
 English Literature | Archeology             | Sonja Reid
 Environment        |                        | Welling Jr
 Geography          | Archeology             | Kari Vang
 Geography          | Archeology             | Melisa Trujillo
 Geography          | Archeology             | Faye Mckinney
 Geography          | Archeology             | Cheri Goodman
 History            | Archeology             | Eleanor Barnes
 Math               | Information Technology | Pitts Higgins
 Math               | Information Technology | Cole Andrews
 Math               | Physics                | Glenna Conrad
 Math               | Physics                | Earlene Scott
 Math               | Physics                | Sally Fleming
 Math               | Physics                | Billie Lowery
 Math               | Physics                | Harvey Peters
 Math               | Physics                | Grant Delgado
 Math               | Physics                | Schwartz Gallagher
 Modern Art         | Music                  | Thelma Fletcher
 Music              | Art                    | Loretta French
 Music              | Art                    | Gilda Malone
 Music              | Art                    | Jamie Byers
                    |                        | Halla Hue
                    |                        | 
                    |                        | Anna Hat
                    |                        | HASHKEYS KEEP
(30 rows)

--Testcase 561:
EXPLAIN VERBOSE 
SELECT name || ' ', courses->>'majors', "isAtDorm", score FROM classes ORDER BY score;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=180.56..182.67 rows=844 width=73)
   Output: ((name || ' '::text)), ((courses ->> 'majors'::text)), "isAtDorm", score
   Sort Key: classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..139.54 rows=844 width=73)
         Output: (name || ' '::text), (courses ->> 'majors'::text), "isAtDorm", score
         Remote SQL: SELECT name, isAtDorm, score, courses FROM classes
(6 rows)

--Testcase 562:
SELECT name || ' ', courses->>'majors', "isAtDorm", score FROM classes ORDER BY score;
      ?column?       |      ?column?      | isAtDorm |    score    
---------------------+--------------------+----------+-------------
 Hammond Conley      | Biology            | t        |  -161.88588
 Cheri Goodman       | Geography          | f        | -145.756442
 Faye Mckinney       | Geography          | f        | -140.965449
 Lora Hamilton       | Biology            | f        | -122.859337
 Miriam Robinson     | Chemistry          | f        | -121.388902
 Harvey Peters       | Math               | f        | -121.212542
 Adrian Merrill      | Biology            | f        | -107.568385
 Schwartz Gallagher  | Math               | f        | -105.895887
 Jamie Byers         | Music              | f        |  -88.060876
 Pitts Higgins       | Math               | f        |  -34.309853
 Earlene Scott       | Math               | t        |  -30.858104
 Thelma Fletcher     | Modern Art         | t        |  -27.938899
 Melisa Trujillo     | Geography          | t        |   -11.96517
 Sonja Reid          | English Literature | f        |  -11.042567
 Halla Hue           |                    | t        |        3.26
 Billie Lowery       | Math               | f        |   15.045873
 Welling Jr          | Environment        |          |       23.12
 HASHKEYS KEEP       |                    | f        |       23.12
 Zone Diana          | Archeology         | t        |        45.2
 Grant Delgado       | Math               | f        |   45.231508
 Sally Fleming       | Math               | t        |   67.340726
 Eleanor Barnes      | History            | f        |    69.39961
 Kari Vang           | Geography          | t        |   71.612004
 Isabelle Decker     | Biology            | t        |   77.966603
 Cole Andrews        | Math               | f        |   80.023596
 Loretta French      | Music              | f        |   84.090833
 Glenna Conrad       | Math               | f        |   95.980049
 Gilda Malone        | Music              | f        |  154.196778
                     |                    |          |            
 Anna Hat            |                    |          |            
(30 rows)

--Testcase 563:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM classes ORDER BY (id + score);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort  (cost=213.75..216.76 rows=1204 width=48)
   Output: name, (((id)::double precision + score)), score
   Sort Key: (((classes.id)::double precision + classes.score))
   ->  Foreign Scan on public.classes  (cost=100.00..152.14 rows=1204 width=48)
         Output: name, ((id)::double precision + score), score
         Remote SQL: SELECT id, name, score FROM classes
(6 rows)

--Testcase 564:
SELECT name, id + score, score FROM classes ORDER BY (id + score);
        name        |      ?column?       |    score    
--------------------+---------------------+-------------
 Hammond Conley     |          -142.88588 |  -161.88588
 Cheri Goodman      |         -133.756442 | -145.756442
 Faye Mckinney      |         -132.965449 | -140.965449
 Miriam Robinson    |         -118.388902 | -121.388902
 Harvey Peters      |         -104.212542 | -121.212542
 Lora Hamilton      |         -102.859337 | -122.859337
 Adrian Merrill     |         -101.568385 | -107.568385
 Schwartz Gallagher |          -92.895887 | -105.895887
 Jamie Byers        |          -78.060876 |  -88.060876
 Thelma Fletcher    |          -23.938899 |  -27.938899
 Earlene Scott      |          -21.858104 |  -30.858104
 Pitts Higgins      | -12.309852999999997 |  -34.309853
 Sonja Reid         |           -9.042567 |  -11.042567
 Melisa Trujillo    |  2.0348299999999995 |   -11.96517
 Halla Hue          |  28.259999999999998 |        3.26
 Billie Lowery      |           39.045873 |   15.045873
 Grant Delgado      |           46.231508 |   45.231508
 Welling Jr         |  51.120000000000005 |       23.12
 HASHKEYS KEEP      |  52.120000000000005 |       23.12
 Zone Diana         |                75.2 |        45.2
 Eleanor Barnes     |            76.39961 |    69.39961
 Sally Fleming      |           85.340726 |   67.340726
 Kari Vang          |           87.612004 |   71.612004
 Loretta French     |           95.090833 |   84.090833
 Isabelle Decker    |          100.966603 |   77.966603
 Cole Andrews       |          101.023596 |   80.023596
 Glenna Conrad      |          110.980049 |   95.980049
 Gilda Malone       |          159.196778 |  154.196778
 Anna Hat           |                     |            
                    |                     |            
(30 rows)

--ORDER BY, WHERE
--Testcase 565:
EXPLAIN VERBOSE 
SELECT * FROM (SELECT * FROM classes WHERE id > 1) tbl WHERE id < 5 ORDER BY id, name;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort  (cost=122.29..122.30 rows=4 width=77)
   Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
   Sort Key: classes.id, classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..122.25 rows=4 width=77)
         Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id > 1) AND (id < 5)
(6 rows)

--Testcase 566:
SELECT * FROM (SELECT * FROM classes WHERE id > 1) tbl WHERE id < 5 ORDER BY id, name;
 id |      name       | isAtDorm |    score    |                           courses                            
----+-----------------+----------+-------------+--------------------------------------------------------------
  2 | Sonja Reid      | f        |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
  3 | Miriam Robinson | f        | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
  4 | Thelma Fletcher | t        |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
(3 rows)

--Testcase 567:
EXPLAIN VERBOSE 
SELECT id, name, courses FROM (SELECT * FROM classes WHERE id IN (1, 3, 4, 5, 9, 10)) tbl WHERE name <> 'Lora Hamilton' ORDER BY name;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=128.98..129.05 rows=27 width=68)
   Output: classes.id, classes.name, classes.courses
   Sort Key: classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..128.34 rows=27 width=68)
         Output: classes.id, classes.name, classes.courses
         Remote SQL: SELECT id, name, courses FROM classes WHERE (name <> 'Lora Hamilton') AND id IN (1, 3, 4, 5, 9, 10)
(6 rows)

--Testcase 568:
SELECT id, name, courses FROM (SELECT * FROM classes WHERE id IN (1, 3, 4, 5, 9, 10)) tbl WHERE name <> 'Lora Hamilton' ORDER BY name;
 id |      name       |                     courses                      
----+-----------------+--------------------------------------------------
  9 | Earlene Scott   | {"majors": "Math", "sub-majors": "Physics"}
  5 | Gilda Malone    | {"majors": "Music", "sub-majors": "Art"}
  1 | Grant Delgado   | {"majors": "Math", "sub-majors": "Physics"}
 10 | Jamie Byers     | {"majors": "Music", "sub-majors": "Art"}
  3 | Miriam Robinson | {"majors": "Chemistry", "sub-majors": "Physics"}
  4 | Thelma Fletcher | {"majors": "Modern Art", "sub-majors": "Music"}
(6 rows)

--Testcase 569:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM (SELECT name, "isAtDorm", score FROM classes WHERE id <> 5) tbl WHERE score < 0 ORDER BY name ASC, "isAtDorm", score DESC;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=155.46..156.50 rows=418 width=41)
   Output: classes.name, classes."isAtDorm", classes.score
   Sort Key: classes.name, classes."isAtDorm", classes.score DESC
   ->  Foreign Scan on public.classes  (cost=100.00..137.26 rows=418 width=41)
         Output: classes.name, classes."isAtDorm", classes.score
         Remote SQL: SELECT name, isAtDorm, score FROM classes WHERE (id <> 5) AND (score < 0)
(6 rows)

--Testcase 570:
SELECT name, "isAtDorm", score FROM (SELECT name, "isAtDorm", score FROM classes WHERE id <> 5) tbl WHERE score < 0 ORDER BY name ASC, "isAtDorm", score DESC;
        name        | isAtDorm |    score    
--------------------+----------+-------------
 Adrian Merrill     | f        | -107.568385
 Cheri Goodman      | f        | -145.756442
 Earlene Scott      | t        |  -30.858104
 Faye Mckinney      | f        | -140.965449
 Hammond Conley     | t        |  -161.88588
 Harvey Peters      | f        | -121.212542
 Jamie Byers        | f        |  -88.060876
 Lora Hamilton      | f        | -122.859337
 Melisa Trujillo    | t        |   -11.96517
 Miriam Robinson    | f        | -121.388902
 Pitts Higgins      | f        |  -34.309853
 Schwartz Gallagher | f        | -105.895887
 Sonja Reid         | f        |  -11.042567
 Thelma Fletcher    | t        |  -27.938899
(14 rows)

--Testcase 571:
EXPLAIN VERBOSE 
SELECT id, name, score FROM (SELECT id, name, score FROM classes WHERE id >= 10) tbl WHERE score >= 0 ORDER BY id DESC;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort  (cost=135.47..135.81 rows=134 width=44)
   Output: classes.id, classes.name, classes.score
   Sort Key: classes.id DESC
   ->  Foreign Scan on public.classes  (cost=100.00..130.74 rows=134 width=44)
         Output: classes.id, classes.name, classes.score
         Remote SQL: SELECT id, name, score FROM classes WHERE (id >= 10) AND (score >= 0)
(6 rows)

--Testcase 572:
SELECT id, name, score FROM (SELECT id, name, score FROM classes WHERE id >= 10) tbl WHERE score >= 0 ORDER BY id DESC;
 id |      name       |   score   
----+-----------------+-----------
 30 | Zone Diana      |      45.2
 29 | HASHKEYS KEEP   |     23.12
 28 | Welling Jr      |     23.12
 25 | Halla Hue       |      3.26
 24 | Billie Lowery   | 15.045873
 23 | Isabelle Decker | 77.966603
 21 | Cole Andrews    | 80.023596
 18 | Sally Fleming   | 67.340726
 16 | Kari Vang       | 71.612004
 15 | Glenna Conrad   | 95.980049
 11 | Loretta French  | 84.090833
(11 rows)

--Testcase 573:
EXPLAIN VERBOSE 
SELECT major, submajor FROM (SELECT courses->'majors' AS major, courses->'sub-majors' AS submajor FROM classes WHERE id <= 10) tbl WHERE (tbl.major)::text = 'Math' ORDER BY submajor;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort  (cost=150.91..150.92 rows=2 width=64)
   Output: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
   Sort Key: ((classes.courses -> 'sub-majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..150.90 rows=2 width=64)
         Output: (classes.courses -> 'majors'::text), (classes.courses -> 'sub-majors'::text)
         Filter: (((classes.courses -> 'majors'::text))::text = 'Math'::text)
         Remote SQL: SELECT courses FROM classes WHERE (id <= 10)
(7 rows)

--Testcase 574:
SELECT major, submajor FROM (SELECT courses->'majors' AS major, courses->'sub-majors' AS submajor FROM classes WHERE id <= 10) tbl WHERE (tbl.major)::text = 'Math' ORDER BY submajor;
 major | submajor 
-------+----------
(0 rows)

--Testcase 575:
EXPLAIN VERBOSE 
SELECT major, submajor FROM (SELECT courses->>'majors' AS major, courses->>'sub-majors' AS submajor FROM classes WHERE id BETWEEN 10 AND 15) tbl WHERE tbl.major != 'Math' ORDER BY major;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=139.51..139.53 rows=7 width=64)
   Output: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text))
   Sort Key: ((classes.courses ->> 'majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..139.41 rows=7 width=64)
         Output: (classes.courses ->> 'majors'::text), (classes.courses ->> 'sub-majors'::text)
         Filter: ((classes.courses ->> 'majors'::text) <> 'Math'::text)
         Remote SQL: SELECT courses FROM classes WHERE (id >= 10) AND (id <= 15)
(7 rows)

--Testcase 576:
SELECT major, submajor FROM (SELECT courses->>'majors' AS major, courses->>'sub-majors' AS submajor FROM classes WHERE id BETWEEN 10 AND 15) tbl WHERE tbl.major != 'Math' ORDER BY major;
   major   |  submajor  
-----------+------------
 Geography | Archeology
 Geography | Archeology
 Music     | Art
 Music     | Art
(4 rows)

--Testcase 577:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM (SELECT name, courses, score FROM classes WHERE score > 0 AND score < 6564.15) tbl ORDER BY score;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort  (cost=122.92..122.93 rows=4 width=72)
   Output: classes.name, classes.score, classes.courses
   Sort Key: classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..122.88 rows=4 width=72)
         Output: classes.name, classes.score, classes.courses
         Remote SQL: SELECT name, score, courses FROM classes WHERE (score > 0) AND (score < 6564.15)
(6 rows)

--Testcase 578:
SELECT name, score, courses FROM (SELECT name, courses, score FROM classes WHERE score > 0 AND score < 6564.15) tbl ORDER BY score;
      name       |   score    |                          courses                           
-----------------+------------+------------------------------------------------------------
 Halla Hue       |       3.26 | ""
 Billie Lowery   |  15.045873 | {"majors": "Math", "sub-majors": "Physics"}
 HASHKEYS KEEP   |      23.12 | {}
 Welling Jr      |      23.12 | {"majors": "Environment"}
 Zone Diana      |       45.2 | {"majors": "Archeology", "sub-majors": "Adventure"}
 Grant Delgado   |  45.231508 | {"majors": "Math", "sub-majors": "Physics"}
 Sally Fleming   |  67.340726 | {"majors": "Math", "sub-majors": "Physics"}
 Eleanor Barnes  |   69.39961 | {"majors": "History", "sub-majors": "Archeology"}
 Kari Vang       |  71.612004 | {"majors": "Geography", "sub-majors": "Archeology"}
 Isabelle Decker |  77.966603 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Cole Andrews    |  80.023596 | {"majors": "Math", "sub-majors": "Information Technology"}
 Loretta French  |  84.090833 | {"majors": "Music", "sub-majors": "Art"}
 Glenna Conrad   |  95.980049 | {"majors": "Math", "sub-majors": "Physics"}
 Gilda Malone    | 154.196778 | {"majors": "Music", "sub-majors": "Art"}
(14 rows)

--Testcase 579:
EXPLAIN VERBOSE 
SELECT major, submajor, name FROM (SELECT courses->>'majors' AS major, courses->>'sub-majors' AS submajor, name, score FROM classes WHERE id > 5 AND id < 15) tbl WHERE score > 0 ORDER BY major, submajor;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=126.34..126.34 rows=2 width=96)
   Output: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text)), classes.name
   Sort Key: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text))
   ->  Foreign Scan on public.classes  (cost=100.00..126.33 rows=2 width=96)
         Output: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text)), classes.name
         Remote SQL: SELECT courses."majors", courses."sub-majors", name, id, score FROM classes WHERE (id > 5) AND (id < 15) AND (score > 0)
(6 rows)

--Testcase 580:
SELECT major, submajor, name FROM (SELECT courses->>'majors' AS major, courses->>'sub-majors' AS submajor, name, score FROM classes WHERE id > 5 AND id < 15) tbl WHERE score > 0 ORDER BY major, submajor;
  major  |  submajor  |      name      
---------+------------+----------------
 History | Archeology | Eleanor Barnes
 Music   | Art        | Loretta French
(2 rows)

--Testcase 581:
EXPLAIN VERBOSE 
SELECT name || ' ', major, "isAtDorm", score FROM (SELECT name, courses->>'majors' AS major, "isAtDorm", score FROM classes WHERE id NOT IN (1, 5, 6, 9, 7, 8))  tbl WHERE score > 0 ORDER BY score;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=144.75..145.43 rows=273 width=73)
   Output: ((classes.name || ' '::text)), ((classes.courses ->> 'majors'::text)), classes."isAtDorm", classes.score
   Sort Key: classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..133.70 rows=273 width=73)
         Output: (classes.name || ' '::text), (classes.courses ->> 'majors'::text), classes."isAtDorm", classes.score
         Remote SQL: SELECT name, isAtDorm, score, courses FROM classes WHERE (score > 0) AND id NOT IN (1, 5, 6, 9, 7, 8)
(6 rows)

--Testcase 582:
SELECT name || ' ', major, "isAtDorm", score FROM (SELECT name, courses->>'majors' AS major, "isAtDorm", score FROM classes WHERE id NOT IN (1, 5, 6, 9, 7, 8))  tbl WHERE score > 0 ORDER BY score;
     ?column?     |    major    | isAtDorm |   score   
------------------+-------------+----------+-----------
 Halla Hue        |             | t        |      3.26
 Billie Lowery    | Math        | f        | 15.045873
 Welling Jr       | Environment |          |     23.12
 HASHKEYS KEEP    |             | f        |     23.12
 Zone Diana       | Archeology  | t        |      45.2
 Sally Fleming    | Math        | t        | 67.340726
 Kari Vang        | Geography   | t        | 71.612004
 Isabelle Decker  | Biology     | t        | 77.966603
 Cole Andrews     | Math        | f        | 80.023596
 Loretta French   | Music       | f        | 84.090833
 Glenna Conrad    | Math        | f        | 95.980049
(11 rows)

--Testcase 583:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM (SELECT name, id, score FROM classes WHERE score > 0 AND score < 6564.15) tbl WHERE id NOT IN (1, 6, 9, 8) ORDER BY (id + score);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=134.31..134.32 rows=6 width=48)
   Output: classes.name, (((classes.id)::double precision + classes.score)), classes.score
   Sort Key: (((classes.id)::double precision + classes.score))
   ->  Foreign Scan on public.classes  (cost=100.00..134.23 rows=6 width=48)
         Output: classes.name, ((classes.id)::double precision + classes.score), classes.score
         Remote SQL: SELECT id, name, score FROM classes WHERE (score > 0) AND (score < 6564.15) AND id NOT IN (1, 6, 9, 8)
(6 rows)

--Testcase 584:
SELECT name, id + score, score FROM (SELECT name, id, score FROM classes WHERE score > 0 AND score < 6564.15) tbl WHERE id NOT IN (1, 6, 9, 8) ORDER BY (id + score);
      name       |      ?column?      |   score    
-----------------+--------------------+------------
 Halla Hue       | 28.259999999999998 |       3.26
 Billie Lowery   |          39.045873 |  15.045873
 Welling Jr      | 51.120000000000005 |      23.12
 HASHKEYS KEEP   | 52.120000000000005 |      23.12
 Zone Diana      |               75.2 |       45.2
 Eleanor Barnes  |           76.39961 |   69.39961
 Sally Fleming   |          85.340726 |  67.340726
 Kari Vang       |          87.612004 |  71.612004
 Loretta French  |          95.090833 |  84.090833
 Isabelle Decker |         100.966603 |  77.966603
 Cole Andrews    |         101.023596 |  80.023596
 Glenna Conrad   |         110.980049 |  95.980049
 Gilda Malone    |         159.196778 | 154.196778
(13 rows)

--GROUP BY, ORDER BY
--Testcase 585:
EXPLAIN VERBOSE 
SELECT * FROM classes WHERE id < 5 GROUP BY id, name, courses, "isAtDorm", score ORDER BY id, name;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Group  (cost=136.44..140.49 rows=270 width=77)
   Output: id, name, "isAtDorm", score, courses
   Group Key: classes.id, classes.name, classes.courses, classes."isAtDorm", classes.score
   ->  Sort  (cost=136.44..137.12 rows=270 width=77)
         Output: id, name, "isAtDorm", score, courses
         Sort Key: classes.id, classes.name, classes.courses, classes."isAtDorm", classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..125.54 rows=270 width=77)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id < 5)
(9 rows)

--Testcase 586:
SELECT * FROM classes WHERE id < 5 GROUP BY id, name, courses, "isAtDorm", score ORDER BY id, name;
 id |      name       | isAtDorm |    score    |                           courses                            
----+-----------------+----------+-------------+--------------------------------------------------------------
  1 | Grant Delgado   | f        |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
  2 | Sonja Reid      | f        |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
  3 | Miriam Robinson | f        | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
  4 | Thelma Fletcher | t        |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
(4 rows)

--Testcase 587:
EXPLAIN VERBOSE 
SELECT id, name, courses FROM classes WHERE name <> 'Lora Hamilton' GROUP BY name, id, courses ORDER BY name;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort  (cost=155.13..155.63 rows=200 width=68)
   Output: id, name, courses
   Sort Key: classes.name
   ->  HashAggregate  (cost=145.49..147.49 rows=200 width=68)
         Output: id, name, courses
         Group Key: classes.name, classes.id, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..138.85 rows=886 width=68)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, courses FROM classes WHERE (name <> 'Lora Hamilton')
(9 rows)

--Testcase 588:
SELECT id, name, courses FROM classes WHERE name <> 'Lora Hamilton' GROUP BY name, id, courses ORDER BY name;
 id |        name        |                           courses                            
----+--------------------+--------------------------------------------------------------
  6 | Adrian Merrill     | {"majors": "Biology", "sub-majors": "Chemistry"}
 26 | Anna Hat           | 
 24 | Billie Lowery      | {"majors": "Math", "sub-majors": "Physics"}
 12 | Cheri Goodman      | {"majors": "Geography", "sub-majors": "Archeology"}
 21 | Cole Andrews       | {"majors": "Math", "sub-majors": "Information Technology"}
  9 | Earlene Scott      | {"majors": "Math", "sub-majors": "Physics"}
  7 | Eleanor Barnes     | {"majors": "History", "sub-majors": "Archeology"}
  8 | Faye Mckinney      | {"majors": "Geography", "sub-majors": "Archeology"}
  5 | Gilda Malone       | {"majors": "Music", "sub-majors": "Art"}
 15 | Glenna Conrad      | {"majors": "Math", "sub-majors": "Physics"}
  1 | Grant Delgado      | {"majors": "Math", "sub-majors": "Physics"}
 25 | Halla Hue          | ""
 19 | Hammond Conley     | {"majors": "Biology", "sub-majors": "Chemistry"}
 17 | Harvey Peters      | {"majors": "Math", "sub-majors": "Physics"}
 29 | HASHKEYS KEEP      | {}
 23 | Isabelle Decker    | {"majors": "Biology", "sub-majors": "Chemistry"}
 10 | Jamie Byers        | {"majors": "Music", "sub-majors": "Art"}
 16 | Kari Vang          | {"majors": "Geography", "sub-majors": "Archeology"}
 11 | Loretta French     | {"majors": "Music", "sub-majors": "Art"}
 14 | Melisa Trujillo    | {"majors": "Geography", "sub-majors": "Archeology"}
  3 | Miriam Robinson    | {"majors": "Chemistry", "sub-majors": "Physics"}
 22 | Pitts Higgins      | {"majors": "Math", "sub-majors": "Information Technology"}
 18 | Sally Fleming      | {"majors": "Math", "sub-majors": "Physics"}
 13 | Schwartz Gallagher | {"majors": "Math", "sub-majors": "Physics"}
  2 | Sonja Reid         | {"majors": "English Literature", "sub-majors": "Archeology"}
  4 | Thelma Fletcher    | {"majors": "Modern Art", "sub-majors": "Music"}
 28 | Welling Jr         | {"majors": "Environment"}
 30 | Zone Diana         | {"majors": "Archeology", "sub-majors": "Adventure"}
 27 |                    | []
(29 rows)

--Testcase 589:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM classes WHERE score >= 0 GROUP BY name, "isAtDorm", score ORDER BY name ASC, "isAtDorm", score DESC;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Group  (cost=152.45..156.65 rows=368 width=41)
   Output: name, "isAtDorm", score
   Group Key: classes.name, classes."isAtDorm", classes.score
   ->  Sort  (cost=152.45..153.50 rows=420 width=41)
         Output: name, "isAtDorm", score
         Sort Key: classes.name, classes."isAtDorm", classes.score DESC
         ->  Foreign Scan on public.classes  (cost=100.00..134.15 rows=420 width=41)
               Output: name, "isAtDorm", score
               Remote SQL: SELECT name, isAtDorm, score FROM classes WHERE (score >= 0)
(9 rows)

--Testcase 590:
SELECT name, "isAtDorm", score FROM classes WHERE score >= 0 GROUP BY name, "isAtDorm", score ORDER BY name ASC, "isAtDorm", score DESC;
      name       | isAtDorm |   score    
-----------------+----------+------------
 Billie Lowery   | f        |  15.045873
 Cole Andrews    | f        |  80.023596
 Eleanor Barnes  | f        |   69.39961
 Gilda Malone    | f        | 154.196778
 Glenna Conrad   | f        |  95.980049
 Grant Delgado   | f        |  45.231508
 Halla Hue       | t        |       3.26
 HASHKEYS KEEP   | f        |      23.12
 Isabelle Decker | t        |  77.966603
 Kari Vang       | t        |  71.612004
 Loretta French  | f        |  84.090833
 Sally Fleming   | t        |  67.340726
 Welling Jr      |          |      23.12
 Zone Diana      | t        |       45.2
(14 rows)

--Testcase 591:
EXPLAIN VERBOSE 
SELECT id, name, score FROM classes GROUP BY id, name, score ORDER BY id DESC;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=164.79..165.29 rows=200 width=44)
   Output: id, name, score
   Sort Key: classes.id DESC
   ->  HashAggregate  (cost=155.15..157.15 rows=200 width=44)
         Output: id, name, score
         Group Key: classes.id, classes.name, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes
(9 rows)

--Testcase 592:
SELECT id, name, score FROM classes GROUP BY id, name, score ORDER BY id DESC;
 id |        name        |    score    
----+--------------------+-------------
 30 | Zone Diana         |        45.2
 29 | HASHKEYS KEEP      |       23.12
 28 | Welling Jr         |       23.12
 27 |                    |            
 26 | Anna Hat           |            
 25 | Halla Hue          |        3.26
 24 | Billie Lowery      |   15.045873
 23 | Isabelle Decker    |   77.966603
 22 | Pitts Higgins      |  -34.309853
 21 | Cole Andrews       |   80.023596
 20 | Lora Hamilton      | -122.859337
 19 | Hammond Conley     |  -161.88588
 18 | Sally Fleming      |   67.340726
 17 | Harvey Peters      | -121.212542
 16 | Kari Vang          |   71.612004
 15 | Glenna Conrad      |   95.980049
 14 | Melisa Trujillo    |   -11.96517
 13 | Schwartz Gallagher | -105.895887
 12 | Cheri Goodman      | -145.756442
 11 | Loretta French     |   84.090833
 10 | Jamie Byers        |  -88.060876
  9 | Earlene Scott      |  -30.858104
  8 | Faye Mckinney      | -140.965449
  7 | Eleanor Barnes     |    69.39961
  6 | Adrian Merrill     | -107.568385
  5 | Gilda Malone       |  154.196778
  4 | Thelma Fletcher    |  -27.938899
  3 | Miriam Robinson    | -121.388902
  2 | Sonja Reid         |  -11.042567
  1 | Grant Delgado      |   45.231508
(30 rows)

--Testcase 593:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id <= 10 GROUP BY courses, courses->'majors', courses->'sub-majors' ORDER BY courses->>'majors';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=154.62..155.09 rows=190 width=128)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), ((courses ->> 'majors'::text)), courses
   Sort Key: ((classes.courses ->> 'majors'::text))
   ->  HashAggregate  (cost=144.10..147.43 rows=190 width=128)
         Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), (courses ->> 'majors'::text), courses
         Group Key: classes.courses, (classes.courses -> 'majors'::text), (classes.courses -> 'sub-majors'::text)
         ->  Foreign Scan on public.classes  (cost=100.00..140.45 rows=487 width=96)
               Output: (courses -> 'majors'::text), (courses -> 'sub-majors'::text), courses
               Remote SQL: SELECT courses FROM classes WHERE (id <= 10)
(9 rows)

--Testcase 594:
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id <= 10 GROUP BY courses, courses->'majors', courses->'sub-majors' ORDER BY courses->>'majors';
       ?column?       |   ?column?   
----------------------+--------------
 "Biology"            | "Chemistry"
 "Chemistry"          | "Physics"
 "English Literature" | "Archeology"
 "Geography"          | "Archeology"
 "History"            | "Archeology"
 "Math"               | "Physics"
 "Modern Art"         | "Music"
 "Music"              | "Art"
(8 rows)

--Testcase 595:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id BETWEEN 10 AND 15 GROUP BY courses, courses->'majors', courses->'sub-majors' ORDER BY courses->>'sub-majors';
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=132.42..132.44 rows=7 width=128)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), ((courses ->> 'sub-majors'::text)), courses
   Sort Key: ((classes.courses ->> 'sub-majors'::text))
   ->  Group  (cost=132.20..132.33 rows=7 width=128)
         Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), (courses ->> 'sub-majors'::text), courses
         Group Key: classes.courses, ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
         ->  Sort  (cost=132.20..132.22 rows=7 width=96)
               Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text)), courses
               Sort Key: classes.courses, ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
               ->  Foreign Scan on public.classes  (cost=100.00..132.10 rows=7 width=96)
                     Output: (courses -> 'majors'::text), (courses -> 'sub-majors'::text), courses
                     Remote SQL: SELECT courses FROM classes WHERE (id >= 10) AND (id <= 15)
(12 rows)

--Testcase 596:
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id BETWEEN 10 AND 15 GROUP BY courses, courses->'majors', courses->'sub-majors' ORDER BY courses->>'sub-majors';
  ?column?   |   ?column?   
-------------+--------------
 "Geography" | "Archeology"
 "Music"     | "Art"
 "Math"      | "Physics"
(3 rows)

--Testcase 597:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes WHERE id > 5 AND id < 15 GROUP BY name, score, courses ORDER BY score;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Group  (cost=122.92..122.96 rows=4 width=72)
   Output: name, score, courses
   Group Key: classes.score, classes.name, classes.courses
   ->  Sort  (cost=122.92..122.93 rows=4 width=72)
         Output: name, score, courses
         Sort Key: classes.score, classes.name, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..122.88 rows=4 width=72)
               Output: name, score, courses
               Remote SQL: SELECT name, score, courses FROM classes WHERE (id > 5) AND (id < 15)
(9 rows)

--Testcase 598:
SELECT name, score, courses FROM classes WHERE id > 5 AND id < 15 GROUP BY name, score, courses ORDER BY score;
        name        |    score    |                       courses                       
--------------------+-------------+-----------------------------------------------------
 Cheri Goodman      | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 Faye Mckinney      | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
 Adrian Merrill     | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Schwartz Gallagher | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 Jamie Byers        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Earlene Scott      |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Melisa Trujillo    |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 Eleanor Barnes     |    69.39961 | {"majors": "History", "sub-majors": "Archeology"}
 Loretta French     |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
(9 rows)

--Testcase 599:
EXPLAIN VERBOSE 
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id NOT IN (1, 6, 9, 8) GROUP BY courses, name ORDER BY courses->>'majors', courses->>'sub-majors';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=157.37..157.87 rows=200 width=128)
   Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name, courses
   Sort Key: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text))
   ->  HashAggregate  (cost=146.73..149.73 rows=200 width=128)
         Output: (courses ->> 'majors'::text), (courses ->> 'sub-majors'::text), name, courses
         Group Key: classes.courses, classes.name
         ->  Foreign Scan on public.classes  (cost=100.00..142.17 rows=911 width=64)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, courses FROM classes WHERE id NOT IN (1, 6, 9, 8)
(9 rows)

--Testcase 600:
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id NOT IN (1, 6, 9, 8) GROUP BY courses, name ORDER BY courses->>'majors', courses->>'sub-majors';
      ?column?      |        ?column?        |        name        
--------------------+------------------------+--------------------
 Archeology         | Adventure              | Zone Diana
 Biology            | Chemistry              | Hammond Conley
 Biology            | Chemistry              | Lora Hamilton
 Biology            | Chemistry              | Isabelle Decker
 Chemistry          | Physics                | Miriam Robinson
 English Literature | Archeology             | Sonja Reid
 Environment        |                        | Welling Jr
 Geography          | Archeology             | Cheri Goodman
 Geography          | Archeology             | Kari Vang
 Geography          | Archeology             | Melisa Trujillo
 History            | Archeology             | Eleanor Barnes
 Math               | Information Technology | Cole Andrews
 Math               | Information Technology | Pitts Higgins
 Math               | Physics                | Harvey Peters
 Math               | Physics                | Billie Lowery
 Math               | Physics                | Sally Fleming
 Math               | Physics                | Schwartz Gallagher
 Math               | Physics                | Glenna Conrad
 Modern Art         | Music                  | Thelma Fletcher
 Music              | Art                    | Gilda Malone
 Music              | Art                    | Jamie Byers
 Music              | Art                    | Loretta French
                    |                        | Anna Hat
                    |                        | Halla Hue
                    |                        | 
                    |                        | HASHKEYS KEEP
(26 rows)

--Testcase 601:
EXPLAIN VERBOSE 
SELECT name, courses->>'majors', "isAtDorm", score FROM classes WHERE score > 0 AND score < 6564.15 GROUP BY name, courses, "isAtDorm", score ORDER BY score;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Group  (cost=122.78..122.84 rows=4 width=105)
   Output: name, (courses ->> 'majors'::text), "isAtDorm", score, courses
   Group Key: classes.score, classes.name, classes.courses, classes."isAtDorm"
   ->  Sort  (cost=122.78..122.79 rows=4 width=73)
         Output: name, "isAtDorm", score, courses
         Sort Key: classes.score, classes.name, classes.courses, classes."isAtDorm"
         ->  Foreign Scan on public.classes  (cost=100.00..122.74 rows=4 width=73)
               Output: name, "isAtDorm", score, courses
               Remote SQL: SELECT name, isAtDorm, score, courses FROM classes WHERE (score > 0) AND (score < 6564.15)
(9 rows)

--Testcase 602:
SELECT name, courses->>'majors', "isAtDorm", score FROM classes WHERE score > 0 AND score < 6564.15 GROUP BY name, courses, "isAtDorm", score ORDER BY score;
      name       |  ?column?   | isAtDorm |   score    
-----------------+-------------+----------+------------
 Halla Hue       |             | t        |       3.26
 Billie Lowery   | Math        | f        |  15.045873
 HASHKEYS KEEP   |             | f        |      23.12
 Welling Jr      | Environment |          |      23.12
 Zone Diana      | Archeology  | t        |       45.2
 Grant Delgado   | Math        | f        |  45.231508
 Sally Fleming   | Math        | t        |  67.340726
 Eleanor Barnes  | History     | f        |   69.39961
 Kari Vang       | Geography   | t        |  71.612004
 Isabelle Decker | Biology     | t        |  77.966603
 Cole Andrews    | Math        | f        |  80.023596
 Loretta French  | Music       | f        |  84.090833
 Glenna Conrad   | Math        | f        |  95.980049
 Gilda Malone    | Music       | f        | 154.196778
(14 rows)

--Testcase 603:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM classes WHERE score >= 0 GROUP BY name, id, score ORDER BY (id + score);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=145.70..146.16 rows=183 width=52)
   Output: name, (((id)::double precision + score)), score, id
   Sort Key: (((classes.id)::double precision + classes.score))
   ->  HashAggregate  (cost=136.08..138.82 rows=183 width=52)
         Output: name, ((id)::double precision + score), score, id
         Group Key: classes.name, classes.id, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..133.07 rows=401 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes WHERE (score >= 0)
(9 rows)

--Testcase 604:
SELECT name, id + score, score FROM classes WHERE score >= 0 GROUP BY name, id, score ORDER BY (id + score);
      name       |      ?column?      |   score    
-----------------+--------------------+------------
 Halla Hue       | 28.259999999999998 |       3.26
 Billie Lowery   |          39.045873 |  15.045873
 Grant Delgado   |          46.231508 |  45.231508
 Welling Jr      | 51.120000000000005 |      23.12
 HASHKEYS KEEP   | 52.120000000000005 |      23.12
 Zone Diana      |               75.2 |       45.2
 Eleanor Barnes  |           76.39961 |   69.39961
 Sally Fleming   |          85.340726 |  67.340726
 Kari Vang       |          87.612004 |  71.612004
 Loretta French  |          95.090833 |  84.090833
 Isabelle Decker |         100.966603 |  77.966603
 Cole Andrews    |         101.023596 |  80.023596
 Glenna Conrad   |         110.980049 |  95.980049
 Gilda Malone    |         159.196778 | 154.196778
(14 rows)

--GROUP BY
--Testcase 605:
EXPLAIN VERBOSE 
SELECT * FROM (SELECT id, name FROM classes WHERE id > 10) tbl GROUP BY id, name;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=138.44..140.31 rows=187 width=36)
   Output: classes.id, classes.name
   Group Key: classes.id, classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..136.16 rows=455 width=36)
         Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
         Remote SQL: SELECT id, name FROM classes WHERE (id > 10)
(6 rows)

--Testcase 606:
SELECT * FROM (SELECT id, name FROM classes WHERE id > 10) tbl GROUP BY id, name;
 id |        name        
----+--------------------
 14 | Melisa Trujillo
 27 | 
 15 | Glenna Conrad
 13 | Schwartz Gallagher
 30 | Zone Diana
 19 | Hammond Conley
 18 | Sally Fleming
 12 | Cheri Goodman
 20 | Lora Hamilton
 16 | Kari Vang
 28 | Welling Jr
 25 | Halla Hue
 17 | Harvey Peters
 21 | Cole Andrews
 24 | Billie Lowery
 23 | Isabelle Decker
 22 | Pitts Higgins
 29 | HASHKEYS KEEP
 26 | Anna Hat
 11 | Loretta French
(20 rows)

--Testcase 607:
EXPLAIN VERBOSE 
SELECT id, name, courses FROM (SELECT id, name, courses FROM classes WHERE id IN (1, 3, 4, 5, 8, 9)) tbl GROUP BY id, name, courses ORDER BY id, name, courses;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Group  (cost=126.76..127.03 rows=26 width=68)
   Output: classes.id, classes.name, classes.courses
   Group Key: classes.id, classes.name, classes.courses
   ->  Sort  (cost=126.76..126.82 rows=27 width=68)
         Output: classes.id, classes.name, classes.courses
         Sort Key: classes.id, classes.name, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..126.11 rows=27 width=68)
               Output: classes.id, classes.name, classes.courses
               Remote SQL: SELECT id, name, courses FROM classes WHERE id IN (1, 3, 4, 5, 8, 9)
(9 rows)

--Testcase 608:
SELECT id, name, courses FROM (SELECT id, name, courses FROM classes WHERE id IN (1, 3, 4, 5, 8, 9)) tbl GROUP BY id, name, courses ORDER BY id, name, courses;
 id |      name       |                       courses                       
----+-----------------+-----------------------------------------------------
  1 | Grant Delgado   | {"majors": "Math", "sub-majors": "Physics"}
  3 | Miriam Robinson | {"majors": "Chemistry", "sub-majors": "Physics"}
  4 | Thelma Fletcher | {"majors": "Modern Art", "sub-majors": "Music"}
  5 | Gilda Malone    | {"majors": "Music", "sub-majors": "Art"}
  8 | Faye Mckinney   | {"majors": "Geography", "sub-majors": "Archeology"}
  9 | Earlene Scott   | {"majors": "Math", "sub-majors": "Physics"}
(6 rows)

--Testcase 609:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM (SELECT name, "isAtDorm", score FROM classes WHERE score > 0) tbl GROUP BY name, "isAtDorm", score;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=137.30..140.98 rows=368 width=41)
   Output: classes.name, classes."isAtDorm", classes.score
   Group Key: classes.name, classes."isAtDorm", classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..134.15 rows=420 width=41)
         Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
         Remote SQL: SELECT name, isAtDorm, score FROM classes WHERE (score > 0)
(6 rows)

--Testcase 610:
SELECT name, "isAtDorm", score FROM (SELECT name, "isAtDorm", score FROM classes WHERE score > 0) tbl GROUP BY name, "isAtDorm", score;
      name       | isAtDorm |   score    
-----------------+----------+------------
 Loretta French  | f        |  84.090833
 Sally Fleming   | t        |  67.340726
 Cole Andrews    | f        |  80.023596
 Glenna Conrad   | f        |  95.980049
 Eleanor Barnes  | f        |   69.39961
 Zone Diana      | t        |       45.2
 Isabelle Decker | t        |  77.966603
 Kari Vang       | t        |  71.612004
 Grant Delgado   | f        |  45.231508
 Welling Jr      |          |      23.12
 Billie Lowery   | f        |  15.045873
 HASHKEYS KEEP   | f        |      23.12
 Gilda Malone    | f        | 154.196778
 Halla Hue       | t        |       3.26
(14 rows)

--Testcase 611:
EXPLAIN VERBOSE 
SELECT id, name, score FROM (SELECT id, name, score FROM classes WHERE name <= 'Sonja Reid') tbl GROUP BY id, name, score;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=152.12..153.95 rows=183 width=44)
   Output: classes.id, classes.name, classes.score
   Group Key: classes.id, classes.name, classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..149.11 rows=401 width=44)
         Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
         Filter: (classes.name <= 'Sonja Reid'::text)
         Remote SQL: SELECT id, name, score FROM classes
(7 rows)

--Testcase 612:
SELECT id, name, score FROM (SELECT id, name, score FROM classes WHERE name <= 'Sonja Reid') tbl GROUP BY id, name, score;
 id |        name        |    score    
----+--------------------+-------------
 26 | Anna Hat           |            
 22 | Pitts Higgins      |  -34.309853
  6 | Adrian Merrill     | -107.568385
 11 | Loretta French     |   84.090833
 14 | Melisa Trujillo    |   -11.96517
 18 | Sally Fleming      |   67.340726
  8 | Faye Mckinney      | -140.965449
 23 | Isabelle Decker    |   77.966603
 21 | Cole Andrews       |   80.023596
 10 | Jamie Byers        |  -88.060876
  3 | Miriam Robinson    | -121.388902
 25 | Halla Hue          |        3.26
 15 | Glenna Conrad      |   95.980049
  9 | Earlene Scott      |  -30.858104
 24 | Billie Lowery      |   15.045873
  5 | Gilda Malone       |  154.196778
  1 | Grant Delgado      |   45.231508
 17 | Harvey Peters      | -121.212542
 29 | HASHKEYS KEEP      |       23.12
 13 | Schwartz Gallagher | -105.895887
  7 | Eleanor Barnes     |    69.39961
 20 | Lora Hamilton      | -122.859337
 16 | Kari Vang          |   71.612004
 19 | Hammond Conley     |  -161.88588
  2 | Sonja Reid         |  -11.042567
 12 | Cheri Goodman      | -145.756442
(26 rows)

--Testcase 613:
EXPLAIN VERBOSE 
SELECT _major, _sub FROM (SELECT courses->'majors' AS _major, courses->'sub-majors' AS _sub FROM classes WHERE courses->>'majors' = 'Math') tbl GROUP BY _major, _sub;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Group  (cost=160.06..160.15 rows=7 width=64)
   Output: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
   Group Key: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
   ->  Sort  (cost=160.06..160.08 rows=7 width=64)
         Output: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
         Sort Key: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
         ->  Foreign Scan on public.classes  (cost=100.00..159.97 rows=7 width=64)
               Output: (classes.courses -> 'majors'::text), (classes.courses -> 'sub-majors'::text)
               Filter: ((classes.courses ->> 'majors'::text) = 'Math'::text)
               Remote SQL: SELECT courses FROM classes
(10 rows)

--Testcase 614:
SELECT _major, _sub FROM (SELECT courses->'majors' AS _major, courses->'sub-majors' AS _sub FROM classes WHERE courses->>'majors' = 'Math') tbl GROUP BY _major, _sub;
 _major |           _sub           
--------+--------------------------
 "Math" | "Information Technology"
 "Math" | "Physics"
(2 rows)

--Testcase 615:
EXPLAIN VERBOSE 
SELECT _major_, _sub_major_ FROM (SELECT courses->'majors' AS _major_, courses->'sub-majors' AS _sub_major_ FROM classes WHERE  courses->>'majors' != 'Math') tbl GROUP BY _major_, _sub_major_;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=175.72..178.72 rows=200 width=64)
   Output: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
   Group Key: (classes.courses -> 'majors'::text), (classes.courses -> 'sub-majors'::text)
   ->  Foreign Scan on public.classes  (cost=100.00..168.45 rows=1455 width=64)
         Output: (classes.courses -> 'majors'::text), (classes.courses -> 'sub-majors'::text)
         Filter: ((classes.courses ->> 'majors'::text) <> 'Math'::text)
         Remote SQL: SELECT courses FROM classes
(7 rows)

--Testcase 616:
SELECT _major_, _sub_major_ FROM (SELECT courses->'majors' AS _major_, courses->'sub-majors' AS _sub_major_ FROM classes WHERE  courses->>'majors' != 'Math') tbl GROUP BY _major_, _sub_major_;
       _major_        | _sub_major_  
----------------------+--------------
 "Modern Art"         | "Music"
 "Chemistry"          | "Physics"
 "Geography"          | "Archeology"
 "English Literature" | "Archeology"
 "Music"              | "Art"
 "History"            | "Archeology"
 "Environment"        | 
 "Biology"            | "Chemistry"
 "Archeology"         | "Adventure"
(9 rows)

--Testcase 617:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM (SELECT name, score, courses FROM classes WHERE score < 0) tbl GROUP BY name, score, courses;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 HashAggregate  (cost=128.47..130.11 rows=164 width=72)
   Output: classes.name, classes.score, classes.courses
   Group Key: classes.name, classes.score, classes.courses
   ->  Foreign Scan on public.classes  (cost=100.00..126.34 rows=284 width=72)
         Output: classes.id, classes.name, classes."isAtDorm", classes.score, classes.courses
         Remote SQL: SELECT name, score, courses FROM classes WHERE (score < 0)
(6 rows)

--Testcase 618:
SELECT name, score, courses FROM (SELECT name, score, courses FROM classes WHERE score < 0) tbl GROUP BY name, score, courses;
        name        |    score    |                           courses                            
--------------------+-------------+--------------------------------------------------------------
 Jamie Byers        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Harvey Peters      | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 Earlene Scott      |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Pitts Higgins      |  -34.309853 | {"majors": "Math", "sub-majors": "Information Technology"}
 Melisa Trujillo    |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 Cheri Goodman      | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 Hammond Conley     |  -161.88588 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Sonja Reid         |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
 Schwartz Gallagher | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
 Miriam Robinson    | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
 Faye Mckinney      | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
 Thelma Fletcher    |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
 Lora Hamilton      | -122.859337 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Adrian Merrill     | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
(14 rows)

--Testcase 619:
EXPLAIN VERBOSE 
SELECT majors, submajors, name FROM (SELECT courses->>'majors' AS majors, courses->>'sub-majors' AS submajors, name FROM classes WHERE name != 'Thelma Fletcher') tbl GROUP BY majors, submajors, name;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=151.69..154.69 rows=200 width=96)
   Output: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text)), classes.name
   Group Key: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text)), classes.name
   ->  Foreign Scan on public.classes  (cost=100.00..144.75 rows=925 width=96)
         Output: ((classes.courses ->> 'majors'::text)), ((classes.courses ->> 'sub-majors'::text)), classes.name
         Remote SQL: SELECT courses."majors", courses."sub-majors", name FROM classes WHERE (name <> 'Thelma Fletcher')
(6 rows)

--Testcase 620:
SELECT majors, submajors, name FROM (SELECT courses->>'majors' AS majors, courses->>'sub-majors' AS submajors, name FROM classes WHERE name != 'Thelma Fletcher') tbl GROUP BY majors, submajors, name;
       majors       |       submajors        |        name        
--------------------+------------------------+--------------------
                    |                        | 
 Chemistry          | Physics                | Miriam Robinson
 English Literature | Archeology             | Sonja Reid
 Geography          | Archeology             | Faye Mckinney
 Geography          | Archeology             | Cheri Goodman
 Math               | Physics                | Sally Fleming
                    |                        | Anna Hat
 Math               | Physics                | Glenna Conrad
 Archeology         | Adventure              | Zone Diana
 Math               | Physics                | Harvey Peters
 Geography          | Archeology             | Melisa Trujillo
 Math               | Physics                | Schwartz Gallagher
 Math               | Information Technology | Pitts Higgins
 Math               | Information Technology | Cole Andrews
 Biology            | Chemistry              | Hammond Conley
                    |                        | Halla Hue
 Math               | Physics                | Grant Delgado
 Math               | Physics                | Billie Lowery
 Music              | Art                    | Gilda Malone
 Music              | Art                    | Loretta French
                    |                        | HASHKEYS KEEP
 Geography          | Archeology             | Kari Vang
 Biology            | Chemistry              | Lora Hamilton
 Biology            | Chemistry              | Isabelle Decker
 History            | Archeology             | Eleanor Barnes
 Biology            | Chemistry              | Adrian Merrill
 Math               | Physics                | Earlene Scott
 Music              | Art                    | Jamie Byers
 Environment        |                        | Welling Jr
(29 rows)

--Testcase 621:
EXPLAIN VERBOSE 
SELECT name || 'xx', courses->>'majors', "isAtDorm", score FROM (SELECT name, courses, "isAtDorm", score FROM classes WHERE id = 1 OR id = 7) tbl GROUP BY courses, name, score, "isAtDorm" ORDER BY courses, name, score, "isAtDorm";
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Group  (cost=122.94..123.08 rows=8 width=137)
   Output: (classes.name || 'xx'::text), (classes.courses ->> 'majors'::text), classes."isAtDorm", classes.score, classes.courses, classes.name
   Group Key: classes.courses, classes.name, classes.score, classes."isAtDorm"
   ->  Sort  (cost=122.94..122.96 rows=8 width=73)
         Output: classes."isAtDorm", classes.score, classes.courses, classes.name
         Sort Key: classes.courses, classes.name, classes.score, classes."isAtDorm"
         ->  Foreign Scan on public.classes  (cost=100.00..122.82 rows=8 width=73)
               Output: classes."isAtDorm", classes.score, classes.courses, classes.name
               Remote SQL: SELECT name, isAtDorm, score, courses FROM classes WHERE ((id = 1) OR (id = 7))
(9 rows)

--Testcase 622:
SELECT name || 'xx', courses->>'majors', "isAtDorm", score FROM (SELECT name, courses, "isAtDorm", score FROM classes WHERE id = 1 OR id = 7) tbl GROUP BY courses, name, score, "isAtDorm" ORDER BY courses, name, score, "isAtDorm";
     ?column?     | ?column? | isAtDorm |   score   
------------------+----------+----------+-----------
 Eleanor Barnesxx | History  | f        |  69.39961
 Grant Delgadoxx  | Math     | f        | 45.231508
(2 rows)

--Testcase 623:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM (SELECT name, id, score FROM classes WHERE id > 5 AND score < 0) tbl GROUP BY (id + score), name, score;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 HashAggregate  (cost=132.41..133.94 rows=102 width=48)
   Output: classes.name, (((classes.id)::double precision + classes.score)), classes.score
   Group Key: ((classes.id)::double precision + classes.score), classes.name, classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..131.41 rows=134 width=48)
         Output: classes.name, ((classes.id)::double precision + classes.score), classes.score
         Remote SQL: SELECT id, name, score FROM classes WHERE (id > 5) AND (score < 0)
(6 rows)

--Testcase 624:
SELECT name, id + score, score FROM (SELECT name, id, score FROM classes WHERE id > 5 AND score < 0) tbl GROUP BY (id + score), name, score;
        name        |      ?column?       |    score    
--------------------+---------------------+-------------
 Adrian Merrill     |         -101.568385 | -107.568385
 Harvey Peters      |         -104.212542 | -121.212542
 Faye Mckinney      |         -132.965449 | -140.965449
 Lora Hamilton      |         -102.859337 | -122.859337
 Jamie Byers        |          -78.060876 |  -88.060876
 Hammond Conley     |          -142.88588 |  -161.88588
 Earlene Scott      |          -21.858104 |  -30.858104
 Schwartz Gallagher |          -92.895887 | -105.895887
 Cheri Goodman      |         -133.756442 | -145.756442
 Melisa Trujillo    |  2.0348299999999995 |   -11.96517
 Pitts Higgins      | -12.309852999999997 |  -34.309853
(11 rows)

--GROUP BY, LIMIT (where)
--Testcase 625:
EXPLAIN VERBOSE 
SELECT * FROM classes WHERE id < 5 GROUP BY id, name, courses, "isAtDorm", score LIMIT 5;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit  (cost=128.91..128.96 rows=5 width=77)
   Output: id, name, "isAtDorm", score, courses
   ->  HashAggregate  (cost=128.91..131.61 rows=270 width=77)
         Output: id, name, "isAtDorm", score, courses
         Group Key: classes.id, classes.name, classes.courses, classes."isAtDorm", classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..125.54 rows=270 width=77)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id < 5)
(8 rows)

--Testcase 626:
SELECT * FROM classes WHERE id < 5 GROUP BY id, name, courses, "isAtDorm", score LIMIT 5;
 id |      name       | isAtDorm |    score    |                           courses                            
----+-----------------+----------+-------------+--------------------------------------------------------------
  4 | Thelma Fletcher | t        |  -27.938899 | {"majors": "Modern Art", "sub-majors": "Music"}
  2 | Sonja Reid      | f        |  -11.042567 | {"majors": "English Literature", "sub-majors": "Archeology"}
  1 | Grant Delgado   | f        |   45.231508 | {"majors": "Math", "sub-majors": "Physics"}
  3 | Miriam Robinson | f        | -121.388902 | {"majors": "Chemistry", "sub-majors": "Physics"}
(4 rows)

--Testcase 627:
EXPLAIN VERBOSE 
SELECT id, name, courses FROM classes WHERE name <> 'Lora Hamilton' GROUP BY id, name, courses LIMIT 3;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit  (cost=145.49..145.52 rows=3 width=68)
   Output: id, name, courses
   ->  HashAggregate  (cost=145.49..147.49 rows=200 width=68)
         Output: id, name, courses
         Group Key: classes.id, classes.name, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..138.85 rows=886 width=68)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, courses FROM classes WHERE (name <> 'Lora Hamilton')
(8 rows)

--Testcase 628:
SELECT id, name, courses FROM classes WHERE name <> 'Lora Hamilton' GROUP BY id, name, courses LIMIT 3;
 id |      name      |                          courses                           
----+----------------+------------------------------------------------------------
 21 | Cole Andrews   | {"majors": "Math", "sub-majors": "Information Technology"}
 26 | Anna Hat       | 
 11 | Loretta French | {"majors": "Music", "sub-majors": "Art"}
(3 rows)

--Testcase 629:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM classes WHERE score >= 0 GROUP BY name, "isAtDorm", score LIMIT 2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit  (cost=137.30..137.32 rows=2 width=41)
   Output: name, "isAtDorm", score
   ->  HashAggregate  (cost=137.30..140.98 rows=368 width=41)
         Output: name, "isAtDorm", score
         Group Key: classes.name, classes."isAtDorm", classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..134.15 rows=420 width=41)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, isAtDorm, score FROM classes WHERE (score >= 0)
(8 rows)

--Testcase 630:
SELECT name, "isAtDorm", score FROM classes WHERE score >= 0 GROUP BY name, "isAtDorm", score LIMIT 2;
      name      | isAtDorm |   score   
----------------+----------+-----------
 Loretta French | f        | 84.090833
 Sally Fleming  | t        | 67.340726
(2 rows)

--Testcase 631:
EXPLAIN VERBOSE 
SELECT id, name, score FROM classes GROUP BY id, name, score LIMIT 5;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Limit  (cost=155.15..155.20 rows=5 width=44)
   Output: id, name, score
   ->  HashAggregate  (cost=155.15..157.15 rows=200 width=44)
         Output: id, name, score
         Group Key: classes.id, classes.name, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes
(8 rows)

--Testcase 632:
SELECT id, name, score FROM classes GROUP BY id, name, score LIMIT 5;
 id |      name       |    score    
----+-----------------+-------------
 26 | Anna Hat        |            
 22 | Pitts Higgins   |  -34.309853
  6 | Adrian Merrill  | -107.568385
 11 | Loretta French  |   84.090833
 14 | Melisa Trujillo |   -11.96517
(5 rows)

--Testcase 633:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id <= 10 GROUP BY courses->'majors', courses->'sub-majors' LIMIT 3;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit  (cost=142.89..142.93 rows=3 width=64)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
   ->  HashAggregate  (cost=142.89..145.74 rows=190 width=64)
         Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
         Group Key: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
         ->  Foreign Scan on public.classes  (cost=100.00..140.45 rows=487 width=64)
               Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
               Remote SQL: SELECT courses."majors", courses."sub-majors", id FROM classes WHERE (id <= 10)
(8 rows)

--Testcase 634:
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id <= 10 GROUP BY courses->'majors', courses->'sub-majors' LIMIT 3;
   ?column?   | ?column?  
--------------+-----------
 "Math"       | "Physics"
 "Modern Art" | "Music"
 "Chemistry"  | "Physics"
(3 rows)

--Testcase 635:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id BETWEEN 10 AND 15 GROUP BY courses->'majors', courses->'sub-majors' LIMIT ALL;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Group  (cost=132.20..132.29 rows=7 width=64)
   Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
   Group Key: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
   ->  Sort  (cost=132.20..132.22 rows=7 width=64)
         Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
         Sort Key: ((classes.courses -> 'majors'::text)), ((classes.courses -> 'sub-majors'::text))
         ->  Foreign Scan on public.classes  (cost=100.00..132.10 rows=7 width=64)
               Output: ((courses -> 'majors'::text)), ((courses -> 'sub-majors'::text))
               Remote SQL: SELECT courses."majors", courses."sub-majors", id FROM classes WHERE (id >= 10) AND (id <= 15)
(9 rows)

--Testcase 636:
SELECT courses->'majors', courses->'sub-majors' FROM classes WHERE id BETWEEN 10 AND 15 GROUP BY courses->'majors', courses->'sub-majors' LIMIT ALL;
  ?column?   |   ?column?   
-------------+--------------
 "Geography" | "Archeology"
 "Math"      | "Physics"
 "Music"     | "Art"
(3 rows)

--Testcase 637:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes WHERE id > 5 AND id < 15 GROUP BY name, score, courses ORDER BY name, score, courses LIMIT NULL;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Group  (cost=122.92..122.96 rows=4 width=72)
   Output: name, score, courses
   Group Key: classes.name, classes.score, classes.courses
   ->  Sort  (cost=122.92..122.93 rows=4 width=72)
         Output: name, score, courses
         Sort Key: classes.name, classes.score, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..122.88 rows=4 width=72)
               Output: name, score, courses
               Remote SQL: SELECT name, score, courses FROM classes WHERE (id > 5) AND (id < 15)
(9 rows)

--Testcase 638:
SELECT name, score, courses FROM classes WHERE id > 5 AND id < 15 GROUP BY name, score, courses ORDER BY name, score, courses LIMIT NULL;
        name        |    score    |                       courses                       
--------------------+-------------+-----------------------------------------------------
 Adrian Merrill     | -107.568385 | {"majors": "Biology", "sub-majors": "Chemistry"}
 Cheri Goodman      | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
 Earlene Scott      |  -30.858104 | {"majors": "Math", "sub-majors": "Physics"}
 Eleanor Barnes     |    69.39961 | {"majors": "History", "sub-majors": "Archeology"}
 Faye Mckinney      | -140.965449 | {"majors": "Geography", "sub-majors": "Archeology"}
 Jamie Byers        |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Loretta French     |   84.090833 | {"majors": "Music", "sub-majors": "Art"}
 Melisa Trujillo    |   -11.96517 | {"majors": "Geography", "sub-majors": "Archeology"}
 Schwartz Gallagher | -105.895887 | {"majors": "Math", "sub-majors": "Physics"}
(9 rows)

--Testcase 639:
EXPLAIN VERBOSE 
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id NOT IN (1, 6, 9, 8) GROUP BY courses, name LIMIT 5;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit  (cost=146.73..146.80 rows=5 width=128)
   Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name, courses
   ->  HashAggregate  (cost=146.73..149.73 rows=200 width=128)
         Output: (courses ->> 'majors'::text), (courses ->> 'sub-majors'::text), name, courses
         Group Key: classes.courses, classes.name
         ->  Foreign Scan on public.classes  (cost=100.00..142.17 rows=911 width=64)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, courses FROM classes WHERE id NOT IN (1, 6, 9, 8)
(8 rows)

--Testcase 640:
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes WHERE id NOT IN (1, 6, 9, 8) GROUP BY courses, name LIMIT 5;
  ?column?  |  ?column?  |      name       
------------+------------+-----------------
            |            | 
 Math       | Physics    | Sally Fleming
 Geography  | Archeology | Kari Vang
 Biology    | Chemistry  | Lora Hamilton
 Modern Art | Music      | Thelma Fletcher
(5 rows)

--Testcase 641:
EXPLAIN VERBOSE 
SELECT name || 'sssssOW', courses->>'majors', "isAtDorm", score FROM classes WHERE score > 0 AND score < 6564.15 GROUP BY name, courses, "isAtDorm", score ORDER BY name, courses, "isAtDorm", score LIMIT 3;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122.78..122.83 rows=3 width=137)
   Output: ((name || 'sssssOW'::text)), ((courses ->> 'majors'::text)), "isAtDorm", score, name, courses
   ->  Group  (cost=122.78..122.85 rows=4 width=137)
         Output: (name || 'sssssOW'::text), (courses ->> 'majors'::text), "isAtDorm", score, name, courses
         Group Key: classes.name, classes.courses, classes."isAtDorm", classes.score
         ->  Sort  (cost=122.78..122.79 rows=4 width=73)
               Output: "isAtDorm", score, name, courses
               Sort Key: classes.name, classes.courses, classes."isAtDorm", classes.score
               ->  Foreign Scan on public.classes  (cost=100.00..122.74 rows=4 width=73)
                     Output: "isAtDorm", score, name, courses
                     Remote SQL: SELECT name, isAtDorm, score, courses FROM classes WHERE (score > 0) AND (score < 6564.15)
(11 rows)

--Testcase 642:
SELECT name || 'sssssOW', courses->>'majors', "isAtDorm", score FROM classes WHERE score > 0 AND score < 6564.15 GROUP BY name, courses, "isAtDorm", score ORDER BY name, courses, "isAtDorm", score LIMIT 3;
       ?column?        | ?column? | isAtDorm |   score   
-----------------------+----------+----------+-----------
 Billie LowerysssssOW  | Math     | f        | 15.045873
 Cole AndrewssssssOW   | Math     | f        | 80.023596
 Eleanor BarnessssssOW | History  | f        |  69.39961
(3 rows)

--Testcase 643:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM classes WHERE score >= 0 GROUP BY name, id, score LIMIT 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit  (cost=136.08..136.09 rows=1 width=52)
   Output: name, (((id)::double precision + score)), score, id
   ->  HashAggregate  (cost=136.08..138.82 rows=183 width=52)
         Output: name, ((id)::double precision + score), score, id
         Group Key: classes.name, classes.id, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..133.07 rows=401 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes WHERE (score >= 0)
(8 rows)

--Testcase 644:
SELECT name, id + score, score FROM classes WHERE score >= 0 GROUP BY name, id, score LIMIT 1;
    name    | ?column? | score 
------------+----------+-------
 Zone Diana |     75.2 |  45.2
(1 row)

--GROUP BY, LIMIT
--Testcase 645:
EXPLAIN VERBOSE 
SELECT id, name, score + id FROM classes GROUP BY id, name, score LIMIT 5;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Limit  (cost=155.15..155.22 rows=5 width=52)
   Output: id, name, ((score + (id)::double precision)), score
   ->  HashAggregate  (cost=155.15..158.15 rows=200 width=52)
         Output: id, name, (score + (id)::double precision), score
         Group Key: classes.id, classes.name, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes
(8 rows)

--Testcase 646:
SELECT id, name, score + id FROM classes GROUP BY id, name, score LIMIT 5;
 id |      name       |      ?column?       
----+-----------------+---------------------
 26 | Anna Hat        |                    
 22 | Pitts Higgins   | -12.309852999999997
  6 | Adrian Merrill  |         -101.568385
 11 | Loretta French  |           95.090833
 14 | Melisa Trujillo |  2.0348299999999995
(5 rows)

--Testcase 647:
EXPLAIN VERBOSE 
SELECT id, name, id * score + score/id FROM classes GROUP BY id, name, score LIMIT ALL;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 HashAggregate  (cost=155.15..159.65 rows=200 width=52)
   Output: id, name, (((id)::double precision * score) + (score / (id)::double precision)), score
   Group Key: classes.id, classes.name, classes.score
   ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
         Output: id, name, "isAtDorm", score, courses
         Remote SQL: SELECT id, name, score FROM classes
(6 rows)

--Testcase 648:
SELECT id, name, id * score + score/id FROM classes GROUP BY id, name, score LIMIT ALL;
 id |        name        |      ?column?       
----+--------------------+---------------------
 26 | Anna Hat           |                    
 22 | Pitts Higgins      |  -756.3763047727272
  6 | Adrian Merrill     |  -663.3383741666667
 11 | Loretta French     |   932.6437841818182
 14 | Melisa Trujillo    | -168.36703500000002
 18 | Sally Fleming      |  1215.8742194444446
  8 | Faye Mckinney      |     -1145.344273125
 27 |                    |                    
 23 | Isabelle Decker    |   1796.621721304348
 21 | Cole Andrews       |  1684.3061634285714
 10 | Jamie Byers        |  -889.4148475999999
  3 | Miriam Robinson    |  -404.6296733333333
 25 | Halla Hue          |             81.6304
 15 | Glenna Conrad      |  1446.0994049333333
  9 | Earlene Scott      | -281.15161422222224
 24 | Billie Lowery      |       361.727863375
  5 | Gilda Malone       |         801.8232456
  1 | Grant Delgado      |           90.463016
 17 | Harvey Peters      |  -2067.743363529412
 29 | HASHKEYS KEEP      |   671.2772413793103
 13 | Schwartz Gallagher | -1384.7923684615384
  7 | Eleanor Barnes     |  495.71149999999994
 20 | Lora Hamilton      |      -2463.32970685
  4 | Thelma Fletcher    |       -118.74032075
 28 | Welling Jr         |   648.1857142857143
 16 | Kari Vang          |       1150.26781425
 19 | Hammond Conley     |  -3084.352029473684
  2 | Sonja Reid         |         -27.6064175
 30 | Zone Diana         |  1357.5066666666667
 12 | Cheri Goodman      | -1761.2236741666666
(30 rows)

--Testcase 649:
EXPLAIN VERBOSE 
SELECT name, "isAtDorm", score FROM classes GROUP BY name, "isAtDorm", score LIMIT 3;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Limit  (cost=157.25..157.28 rows=3 width=41)
   Output: name, "isAtDorm", score
   ->  HashAggregate  (cost=157.25..161.25 rows=400 width=41)
         Output: name, "isAtDorm", score
         Group Key: classes.name, classes."isAtDorm", classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..147.80 rows=1260 width=41)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, isAtDorm, score FROM classes
(8 rows)

--Testcase 650:
SELECT name, "isAtDorm", score FROM classes GROUP BY name, "isAtDorm", score LIMIT 3;
      name      | isAtDorm |   score    
----------------+----------+------------
                |          |           
 Loretta French | f        |  84.090833
 Sonja Reid     | f        | -11.042567
(3 rows)

--Testcase 651:
EXPLAIN VERBOSE 
SELECT id, name, score FROM classes GROUP BY id, name, score LIMIT 3;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Limit  (cost=155.15..155.18 rows=3 width=44)
   Output: id, name, score
   ->  HashAggregate  (cost=155.15..157.15 rows=200 width=44)
         Output: id, name, score
         Group Key: classes.id, classes.name, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..146.12 rows=1204 width=44)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, score FROM classes
(8 rows)

--Testcase 652:
SELECT id, name, score FROM classes GROUP BY id, name, score LIMIT 3;
 id |      name      |    score    
----+----------------+-------------
 26 | Anna Hat       |            
 22 | Pitts Higgins  |  -34.309853
  6 | Adrian Merrill | -107.568385
(3 rows)

--Testcase 653:
EXPLAIN VERBOSE 
SELECT name, id, score, "isAtDorm" FROM classes GROUP BY name, id, score, "isAtDorm" LIMIT 5;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Limit  (cost=157.48..157.53 rows=5 width=45)
   Output: name, id, score, "isAtDorm"
   ->  HashAggregate  (cost=157.48..161.48 rows=400 width=45)
         Output: name, id, score, "isAtDorm"
         Group Key: classes.name, classes.id, classes.score, classes."isAtDorm"
         ->  Foreign Scan on public.classes  (cost=100.00..145.61 rows=1187 width=45)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT id, name, isAtDorm, score FROM classes
(8 rows)

--Testcase 654:
SELECT name, id, score, "isAtDorm" FROM classes GROUP BY name, id, score, "isAtDorm" LIMIT 5;
      name       | id |   score    | isAtDorm 
-----------------+----+------------+----------
 Melisa Trujillo | 14 |  -11.96517 | t
 Isabelle Decker | 23 |  77.966603 | t
 Welling Jr      | 28 |      23.12 | 
 Sally Fleming   | 18 |  67.340726 | t
 Pitts Higgins   | 22 | -34.309853 | f
(5 rows)

--Testcase 655:
EXPLAIN VERBOSE 
SELECT courses->'majors', courses->'sub-majors' FROM classes GROUP BY courses LIMIT NULL;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 HashAggregate  (cost=157.52..160.52 rows=200 width=96)
   Output: (courses -> 'majors'::text), (courses -> 'sub-majors'::text), courses
   Group Key: classes.courses
   ->  Foreign Scan on public.classes  (cost=100.00..153.86 rows=1462 width=32)
         Output: id, name, "isAtDorm", score, courses
         Remote SQL: SELECT courses FROM classes
(6 rows)

--Testcase 656:
SELECT courses->'majors', courses->'sub-majors' FROM classes GROUP BY courses LIMIT NULL;
       ?column?       |         ?column?         
----------------------+--------------------------
                      | 
                      | 
                      | 
 "Modern Art"         | "Music"
 "History"            | "Archeology"
 "Math"               | "Information Technology"
 "Geography"          | "Archeology"
 "Archeology"         | "Adventure"
 "Biology"            | "Chemistry"
 "Chemistry"          | "Physics"
 "English Literature" | "Archeology"
 "Environment"        | 
 "Math"               | "Physics"
                      | 
 "Music"              | "Art"
(15 rows)

--Testcase 657:
EXPLAIN VERBOSE 
SELECT name, score, courses FROM classes GROUP BY name, score, courses LIMIT 5;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit  (cost=141.99..142.04 rows=5 width=72)
   Output: name, score, courses
   ->  HashAggregate  (cost=141.99..143.99 rows=200 width=72)
         Output: name, score, courses
         Group Key: classes.name, classes.score, classes.courses
         ->  Foreign Scan on public.classes  (cost=100.00..135.59 rows=853 width=72)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, score, courses FROM classes
(8 rows)

--Testcase 658:
SELECT name, score, courses FROM classes GROUP BY name, score, courses LIMIT 5;
     name      |    score    |                   courses                   
---------------+-------------+---------------------------------------------
               |             | []
 Gilda Malone  |  154.196778 | {"majors": "Music", "sub-majors": "Art"}
 Jamie Byers   |  -88.060876 | {"majors": "Music", "sub-majors": "Art"}
 Harvey Peters | -121.212542 | {"majors": "Math", "sub-majors": "Physics"}
 Welling Jr    |       23.12 | {"majors": "Environment"}
(5 rows)

--Testcase 659:
EXPLAIN VERBOSE 
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes GROUP BY courses, name LIMIT 5;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit  (cost=142.55..142.62 rows=5 width=128)
   Output: ((courses ->> 'majors'::text)), ((courses ->> 'sub-majors'::text)), name, courses
   ->  HashAggregate  (cost=142.55..145.55 rows=200 width=128)
         Output: (courses ->> 'majors'::text), (courses ->> 'sub-majors'::text), name, courses
         Group Key: classes.courses, classes.name
         ->  Foreign Scan on public.classes  (cost=100.00..137.90 rows=930 width=64)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, courses FROM classes
(8 rows)

--Testcase 660:
SELECT courses->>'majors', courses->>'sub-majors', name FROM classes GROUP BY courses, name LIMIT 5;
 ?column?  |  ?column?  |     name      
-----------+------------+---------------
           |            | 
 Math      | Physics    | Sally Fleming
 Geography | Archeology | Kari Vang
 Math      | Physics    | Earlene Scott
 Biology   | Chemistry  | Lora Hamilton
(5 rows)

--Testcase 661:
EXPLAIN VERBOSE 
SELECT name || 'wefjwf', courses->>'majors', "isAtDorm", score FROM classes GROUP BY name, courses, "isAtDorm", score LIMIT 5;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit  (cost=143.76..143.83 rows=5 width=137)
   Output: ((name || 'wefjwf'::text)), ((courses ->> 'majors'::text)), "isAtDorm", score, name, courses
   ->  HashAggregate  (cost=143.76..149.76 rows=400 width=137)
         Output: (name || 'wefjwf'::text), (courses ->> 'majors'::text), "isAtDorm", score, name, courses
         Group Key: classes.name, classes.courses, classes."isAtDorm", classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..135.32 rows=844 width=73)
               Output: id, name, "isAtDorm", score, courses
               Remote SQL: SELECT name, isAtDorm, score, courses FROM classes
(8 rows)

--Testcase 662:
SELECT name || 'wefjwf', courses->>'majors', "isAtDorm", score FROM classes GROUP BY name, courses, "isAtDorm", score LIMIT 5;
       ?column?       |      ?column?      | isAtDorm |    score    
----------------------+--------------------+----------+-------------
                      |                    |          |            
 Sonja Reidwefjwf     | English Literature | f        |  -11.042567
 Adrian Merrillwefjwf | Biology            | f        | -107.568385
 Earlene Scottwefjwf  | Math               | t        |  -30.858104
 Kari Vangwefjwf      | Geography          | t        |   71.612004
(5 rows)

--Testcase 663:
EXPLAIN VERBOSE 
SELECT name, id + score, score FROM classes GROUP BY (id + score), name, score LIMIT 5;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit  (cost=161.17..161.24 rows=5 width=48)
   Output: name, (((id)::double precision + score)), score
   ->  HashAggregate  (cost=161.17..164.17 rows=200 width=48)
         Output: name, (((id)::double precision + score)), score
         Group Key: ((classes.id)::double precision + classes.score), classes.name, classes.score
         ->  Foreign Scan on public.classes  (cost=100.00..152.14 rows=1204 width=48)
               Output: name, ((id)::double precision + score), score
               Remote SQL: SELECT id, name, score FROM classes
(8 rows)

--Testcase 664:
SELECT name, id + score, score FROM classes GROUP BY (id + score), name, score LIMIT 5;
      name      |  ?column?   |    score    
----------------+-------------+-------------
                |             |            
 Glenna Conrad  |  110.980049 |   95.980049
 Adrian Merrill | -101.568385 | -107.568385
 Lora Hamilton  | -102.859337 | -122.859337
 Earlene Scott  |  -21.858104 |  -30.858104
(5 rows)

-- Test INSERT/UPDATE/DELETE with RETURNING and RUNTURNING * 
-- support RETURNING in UPDATE/DELETE operation
--Testcase 671:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 10 RETURNING id, "isAtDorm", score, courses;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=3 width=137)
   Output: id, "isAtDorm", score, courses
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ? RETURNING ALL NEW *
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"majors": "Environment"}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 10)
(6 rows)

--Testcase 672:
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 10 RETURNING id, "isAtDorm", score, courses;
 id | isAtDorm |   score    |          courses          
----+----------+------------+---------------------------
 10 | f        | -88.060876 | {"majors": "Environment"}
(1 row)

--Testcase 673:
EXPLAIN VERBOSE 
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 10 RETURNING *;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on public.classes  (cost=100.00..118.00 rows=3 width=137)
   Output: id, name, "isAtDorm", score, courses
   Remote SQL: UPDATE classes SET courses = ? WHERE id = ? RETURNING ALL NEW *
   ->  Foreign Scan on public.classes  (cost=100.00..118.00 rows=3 width=137)
         Output: '{"majors": "Environment"}'::jsonb, id, classes.*
         Remote SQL: SELECT id, name, isAtDorm, score, courses FROM classes WHERE (id = 10)
(6 rows)

--Testcase 674:
UPDATE classes SET courses = '{"majors": "Environment"}' WHERE id = 10 RETURNING *;
 id |    name     | isAtDorm |   score    |          courses          
----+-------------+----------+------------+---------------------------
 10 | Jamie Byers | f        | -88.060876 | {"majors": "Environment"}
(1 row)

--Testcase 675:
EXPLAIN VERBOSE 
DELETE FROM classes WHERE id = 11 RETURNING id, "isAtDorm", score, courses;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.classes  (cost=100.00..146.86 rows=15 width=4)
   Output: id, "isAtDorm", score, courses
   Remote SQL: DELETE FROM classes WHERE id = ? RETURNING ALL OLD *
   ->  Foreign Scan on public.classes  (cost=100.00..146.86 rows=15 width=4)
         Output: id
         Remote SQL: SELECT id FROM classes WHERE (id = 11)
(6 rows)

--Testcase 676:
DELETE FROM classes WHERE id = 11 RETURNING id, "isAtDorm", score, courses;
 id | isAtDorm |   score   |                 courses                  
----+----------+-----------+------------------------------------------
 11 | f        | 84.090833 | {"majors": "Music", "sub-majors": "Art"}
(1 row)

--Testcase 677:
EXPLAIN VERBOSE 
DELETE FROM classes WHERE id = 12 RETURNING *;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.classes  (cost=100.00..146.86 rows=15 width=4)
   Output: id, name, "isAtDorm", score, courses
   Remote SQL: DELETE FROM classes WHERE id = ? RETURNING ALL OLD *
   ->  Foreign Scan on public.classes  (cost=100.00..146.86 rows=15 width=4)
         Output: id
         Remote SQL: SELECT id FROM classes WHERE (id = 12)
(6 rows)

--Testcase 678:
DELETE FROM classes WHERE id = 12 RETURNING *;
 id |     name      | isAtDorm |    score    |                       courses                       
----+---------------+----------+-------------+-----------------------------------------------------
 12 | Cheri Goodman | f        | -145.756442 | {"majors": "Geography", "sub-majors": "Archeology"}
(1 row)

-- Not support RETURNING in INSERT operation
--Testcase 679:
EXPLAIN VERBOSE 
INSERT INTO classes (id, "isAtDorm", score, courses) VALUES (30, true, 100.001, '{"majors": "CNTT", "sub-majors": "Stream Game"}') RETURNING id, "isAtDorm", score, courses;
ERROR:  dynamodb_fdw: unsupported RETURNING in INSERT operation
--Testcase 680:
INSERT INTO classes (id, "isAtDorm", score, courses) VALUES (30, true, 100.001, '{"majors": "CNTT", "sub-majors": "Stream Game"}') RETURNING id, "isAtDorm", score, courses;
ERROR:  dynamodb_fdw: unsupported RETURNING in INSERT operation
--Testcase 681:
EXPLAIN VERBOSE 
INSERT INTO classes (id, "isAtDorm", score, courses) VALUES (30, true, 100.001, '{"majors": "CNTT", "sub-majors": "Stream Game"}') RETURNING *;
ERROR:  dynamodb_fdw: unsupported RETURNING in INSERT operation
--Testcase 682:
INSERT INTO classes (id, "isAtDorm", score, courses) VALUES (30, true, 100.001, '{"majors": "CNTT", "sub-majors": "Stream Game"}') RETURNING *;
ERROR:  dynamodb_fdw: unsupported RETURNING in INSERT operation
--Testcase 665:
DROP FOREIGN TABLE classes;
--Testcase 666:
DROP FOREIGN TABLE J1_TBL;
--Testcase 667:
DROP FOREIGN TABLE J2_TBL;
--Testcase 668:
DROP USER MAPPING FOR public SERVER dynamodb_server;
--Testcase 669:
DROP SERVER dynamodb_server;
--Testcase 670:
DROP EXTENSION dynamodb_fdw;
